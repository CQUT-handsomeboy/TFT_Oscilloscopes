
TFT_Oscilloscopes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bc8  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08004d50  08004d50  00005d50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f38  08004f38  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004f38  08004f38  00005f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f40  08004f40  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f40  08004f40  00005f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f44  08004f44  00005f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004f48  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          000000c4  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000d0  200000d0  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b2ad  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d31  00000000  00000000  000112e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000be8  00000000  00000000  00013020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000092b  00000000  00000000  00013c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000212d9  00000000  00000000  00014533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ce9a  00000000  00000000  0003580c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc7ed  00000000  00000000  000426a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010ee93  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000355c  00000000  00000000  0010eed8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  00112434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004d38 	.word	0x08004d38

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004d38 	.word	0x08004d38

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b96a 	b.w	8000e50 <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9d08      	ldr	r5, [sp, #32]
 8000b9a:	460c      	mov	r4, r1
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d14e      	bne.n	8000c3e <__udivmoddi4+0xaa>
 8000ba0:	4694      	mov	ip, r2
 8000ba2:	458c      	cmp	ip, r1
 8000ba4:	4686      	mov	lr, r0
 8000ba6:	fab2 f282 	clz	r2, r2
 8000baa:	d962      	bls.n	8000c72 <__udivmoddi4+0xde>
 8000bac:	b14a      	cbz	r2, 8000bc2 <__udivmoddi4+0x2e>
 8000bae:	f1c2 0320 	rsb	r3, r2, #32
 8000bb2:	4091      	lsls	r1, r2
 8000bb4:	fa20 f303 	lsr.w	r3, r0, r3
 8000bb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bbc:	4319      	orrs	r1, r3
 8000bbe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bc6:	fa1f f68c 	uxth.w	r6, ip
 8000bca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bd2:	fb07 1114 	mls	r1, r7, r4, r1
 8000bd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bda:	fb04 f106 	mul.w	r1, r4, r6
 8000bde:	4299      	cmp	r1, r3
 8000be0:	d90a      	bls.n	8000bf8 <__udivmoddi4+0x64>
 8000be2:	eb1c 0303 	adds.w	r3, ip, r3
 8000be6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bea:	f080 8112 	bcs.w	8000e12 <__udivmoddi4+0x27e>
 8000bee:	4299      	cmp	r1, r3
 8000bf0:	f240 810f 	bls.w	8000e12 <__udivmoddi4+0x27e>
 8000bf4:	3c02      	subs	r4, #2
 8000bf6:	4463      	add	r3, ip
 8000bf8:	1a59      	subs	r1, r3, r1
 8000bfa:	fa1f f38e 	uxth.w	r3, lr
 8000bfe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c02:	fb07 1110 	mls	r1, r7, r0, r1
 8000c06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c0a:	fb00 f606 	mul.w	r6, r0, r6
 8000c0e:	429e      	cmp	r6, r3
 8000c10:	d90a      	bls.n	8000c28 <__udivmoddi4+0x94>
 8000c12:	eb1c 0303 	adds.w	r3, ip, r3
 8000c16:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c1a:	f080 80fc 	bcs.w	8000e16 <__udivmoddi4+0x282>
 8000c1e:	429e      	cmp	r6, r3
 8000c20:	f240 80f9 	bls.w	8000e16 <__udivmoddi4+0x282>
 8000c24:	4463      	add	r3, ip
 8000c26:	3802      	subs	r0, #2
 8000c28:	1b9b      	subs	r3, r3, r6
 8000c2a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c2e:	2100      	movs	r1, #0
 8000c30:	b11d      	cbz	r5, 8000c3a <__udivmoddi4+0xa6>
 8000c32:	40d3      	lsrs	r3, r2
 8000c34:	2200      	movs	r2, #0
 8000c36:	e9c5 3200 	strd	r3, r2, [r5]
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d905      	bls.n	8000c4e <__udivmoddi4+0xba>
 8000c42:	b10d      	cbz	r5, 8000c48 <__udivmoddi4+0xb4>
 8000c44:	e9c5 0100 	strd	r0, r1, [r5]
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4608      	mov	r0, r1
 8000c4c:	e7f5      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000c4e:	fab3 f183 	clz	r1, r3
 8000c52:	2900      	cmp	r1, #0
 8000c54:	d146      	bne.n	8000ce4 <__udivmoddi4+0x150>
 8000c56:	42a3      	cmp	r3, r4
 8000c58:	d302      	bcc.n	8000c60 <__udivmoddi4+0xcc>
 8000c5a:	4290      	cmp	r0, r2
 8000c5c:	f0c0 80f0 	bcc.w	8000e40 <__udivmoddi4+0x2ac>
 8000c60:	1a86      	subs	r6, r0, r2
 8000c62:	eb64 0303 	sbc.w	r3, r4, r3
 8000c66:	2001      	movs	r0, #1
 8000c68:	2d00      	cmp	r5, #0
 8000c6a:	d0e6      	beq.n	8000c3a <__udivmoddi4+0xa6>
 8000c6c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c70:	e7e3      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000c72:	2a00      	cmp	r2, #0
 8000c74:	f040 8090 	bne.w	8000d98 <__udivmoddi4+0x204>
 8000c78:	eba1 040c 	sub.w	r4, r1, ip
 8000c7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c80:	fa1f f78c 	uxth.w	r7, ip
 8000c84:	2101      	movs	r1, #1
 8000c86:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c8e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c96:	fb07 f006 	mul.w	r0, r7, r6
 8000c9a:	4298      	cmp	r0, r3
 8000c9c:	d908      	bls.n	8000cb0 <__udivmoddi4+0x11c>
 8000c9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ca6:	d202      	bcs.n	8000cae <__udivmoddi4+0x11a>
 8000ca8:	4298      	cmp	r0, r3
 8000caa:	f200 80cd 	bhi.w	8000e48 <__udivmoddi4+0x2b4>
 8000cae:	4626      	mov	r6, r4
 8000cb0:	1a1c      	subs	r4, r3, r0
 8000cb2:	fa1f f38e 	uxth.w	r3, lr
 8000cb6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cba:	fb08 4410 	mls	r4, r8, r0, r4
 8000cbe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cc2:	fb00 f707 	mul.w	r7, r0, r7
 8000cc6:	429f      	cmp	r7, r3
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x148>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x146>
 8000cd4:	429f      	cmp	r7, r3
 8000cd6:	f200 80b0 	bhi.w	8000e3a <__udivmoddi4+0x2a6>
 8000cda:	4620      	mov	r0, r4
 8000cdc:	1bdb      	subs	r3, r3, r7
 8000cde:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ce2:	e7a5      	b.n	8000c30 <__udivmoddi4+0x9c>
 8000ce4:	f1c1 0620 	rsb	r6, r1, #32
 8000ce8:	408b      	lsls	r3, r1
 8000cea:	fa22 f706 	lsr.w	r7, r2, r6
 8000cee:	431f      	orrs	r7, r3
 8000cf0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cf4:	fa04 f301 	lsl.w	r3, r4, r1
 8000cf8:	ea43 030c 	orr.w	r3, r3, ip
 8000cfc:	40f4      	lsrs	r4, r6
 8000cfe:	fa00 f801 	lsl.w	r8, r0, r1
 8000d02:	0c38      	lsrs	r0, r7, #16
 8000d04:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d08:	fbb4 fef0 	udiv	lr, r4, r0
 8000d0c:	fa1f fc87 	uxth.w	ip, r7
 8000d10:	fb00 441e 	mls	r4, r0, lr, r4
 8000d14:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d18:	fb0e f90c 	mul.w	r9, lr, ip
 8000d1c:	45a1      	cmp	r9, r4
 8000d1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x1a6>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d2a:	f080 8084 	bcs.w	8000e36 <__udivmoddi4+0x2a2>
 8000d2e:	45a1      	cmp	r9, r4
 8000d30:	f240 8081 	bls.w	8000e36 <__udivmoddi4+0x2a2>
 8000d34:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d38:	443c      	add	r4, r7
 8000d3a:	eba4 0409 	sub.w	r4, r4, r9
 8000d3e:	fa1f f983 	uxth.w	r9, r3
 8000d42:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d46:	fb00 4413 	mls	r4, r0, r3, r4
 8000d4a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d4e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d52:	45a4      	cmp	ip, r4
 8000d54:	d907      	bls.n	8000d66 <__udivmoddi4+0x1d2>
 8000d56:	193c      	adds	r4, r7, r4
 8000d58:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d5c:	d267      	bcs.n	8000e2e <__udivmoddi4+0x29a>
 8000d5e:	45a4      	cmp	ip, r4
 8000d60:	d965      	bls.n	8000e2e <__udivmoddi4+0x29a>
 8000d62:	3b02      	subs	r3, #2
 8000d64:	443c      	add	r4, r7
 8000d66:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d6a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d6e:	eba4 040c 	sub.w	r4, r4, ip
 8000d72:	429c      	cmp	r4, r3
 8000d74:	46ce      	mov	lr, r9
 8000d76:	469c      	mov	ip, r3
 8000d78:	d351      	bcc.n	8000e1e <__udivmoddi4+0x28a>
 8000d7a:	d04e      	beq.n	8000e1a <__udivmoddi4+0x286>
 8000d7c:	b155      	cbz	r5, 8000d94 <__udivmoddi4+0x200>
 8000d7e:	ebb8 030e 	subs.w	r3, r8, lr
 8000d82:	eb64 040c 	sbc.w	r4, r4, ip
 8000d86:	fa04 f606 	lsl.w	r6, r4, r6
 8000d8a:	40cb      	lsrs	r3, r1
 8000d8c:	431e      	orrs	r6, r3
 8000d8e:	40cc      	lsrs	r4, r1
 8000d90:	e9c5 6400 	strd	r6, r4, [r5]
 8000d94:	2100      	movs	r1, #0
 8000d96:	e750      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000d98:	f1c2 0320 	rsb	r3, r2, #32
 8000d9c:	fa20 f103 	lsr.w	r1, r0, r3
 8000da0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da4:	fa24 f303 	lsr.w	r3, r4, r3
 8000da8:	4094      	lsls	r4, r2
 8000daa:	430c      	orrs	r4, r1
 8000dac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3110 	mls	r1, r8, r0, r3
 8000dc0:	0c23      	lsrs	r3, r4, #16
 8000dc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc6:	fb00 f107 	mul.w	r1, r0, r7
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x24c>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dd6:	d22c      	bcs.n	8000e32 <__udivmoddi4+0x29e>
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d92a      	bls.n	8000e32 <__udivmoddi4+0x29e>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	4463      	add	r3, ip
 8000de0:	1a5b      	subs	r3, r3, r1
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000de8:	fb08 3311 	mls	r3, r8, r1, r3
 8000dec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df0:	fb01 f307 	mul.w	r3, r1, r7
 8000df4:	42a3      	cmp	r3, r4
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x276>
 8000df8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dfc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e00:	d213      	bcs.n	8000e2a <__udivmoddi4+0x296>
 8000e02:	42a3      	cmp	r3, r4
 8000e04:	d911      	bls.n	8000e2a <__udivmoddi4+0x296>
 8000e06:	3902      	subs	r1, #2
 8000e08:	4464      	add	r4, ip
 8000e0a:	1ae4      	subs	r4, r4, r3
 8000e0c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e10:	e739      	b.n	8000c86 <__udivmoddi4+0xf2>
 8000e12:	4604      	mov	r4, r0
 8000e14:	e6f0      	b.n	8000bf8 <__udivmoddi4+0x64>
 8000e16:	4608      	mov	r0, r1
 8000e18:	e706      	b.n	8000c28 <__udivmoddi4+0x94>
 8000e1a:	45c8      	cmp	r8, r9
 8000e1c:	d2ae      	bcs.n	8000d7c <__udivmoddi4+0x1e8>
 8000e1e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e22:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e26:	3801      	subs	r0, #1
 8000e28:	e7a8      	b.n	8000d7c <__udivmoddi4+0x1e8>
 8000e2a:	4631      	mov	r1, r6
 8000e2c:	e7ed      	b.n	8000e0a <__udivmoddi4+0x276>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	e799      	b.n	8000d66 <__udivmoddi4+0x1d2>
 8000e32:	4630      	mov	r0, r6
 8000e34:	e7d4      	b.n	8000de0 <__udivmoddi4+0x24c>
 8000e36:	46d6      	mov	lr, sl
 8000e38:	e77f      	b.n	8000d3a <__udivmoddi4+0x1a6>
 8000e3a:	4463      	add	r3, ip
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	e74d      	b.n	8000cdc <__udivmoddi4+0x148>
 8000e40:	4606      	mov	r6, r0
 8000e42:	4623      	mov	r3, r4
 8000e44:	4608      	mov	r0, r1
 8000e46:	e70f      	b.n	8000c68 <__udivmoddi4+0xd4>
 8000e48:	3e02      	subs	r6, #2
 8000e4a:	4463      	add	r3, ip
 8000e4c:	e730      	b.n	8000cb0 <__udivmoddi4+0x11c>
 8000e4e:	bf00      	nop

08000e50 <__aeabi_idiv0>:
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start_IT(&htim1);
 8000e5e:	4803      	ldr	r0, [pc, #12]	@ (8000e6c <HAL_GPIO_EXTI_Callback+0x18>)
 8000e60:	f002 fa0e 	bl	8003280 <HAL_TIM_Base_Start_IT>
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20000028 	.word	0x20000028

08000e70 <HAL_TIM_PeriodElapsedCallback>:
void onKey2();
void onKeyUP();


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	int keyState = 0;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60fb      	str	r3, [r7, #12]
	int pressedKey = 1;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	60bb      	str	r3, [r7, #8]
	switch(keyState)
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d003      	beq.n	8000e8e <HAL_TIM_PeriodElapsedCallback+0x1e>
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d039      	beq.n	8000f00 <HAL_TIM_PeriodElapsedCallback+0x90>
				break;
		}
		break;
	}

}
 8000e8c:	e07b      	b.n	8000f86 <HAL_TIM_PeriodElapsedCallback+0x116>
			if(!HAL_GPIO_ReadPin(KEY0_GPIO_Port,KEY0_Pin))
 8000e8e:	2110      	movs	r1, #16
 8000e90:	483f      	ldr	r0, [pc, #252]	@ (8000f90 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000e92:	f001 fcef 	bl	8002874 <HAL_GPIO_ReadPin>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d106      	bne.n	8000eaa <HAL_TIM_PeriodElapsedCallback+0x3a>
				pressedKey = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60bb      	str	r3, [r7, #8]
				keyState = 1;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	60fb      	str	r3, [r7, #12]
				onKey0();
 8000ea4:	f000 fbe2 	bl	800166c <onKey0>
			break;
 8000ea8:	e06a      	b.n	8000f80 <HAL_TIM_PeriodElapsedCallback+0x110>
			} else if(!HAL_GPIO_ReadPin(KEY1_GPIO_Port,KEY1_Pin))
 8000eaa:	2108      	movs	r1, #8
 8000eac:	4838      	ldr	r0, [pc, #224]	@ (8000f90 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000eae:	f001 fce1 	bl	8002874 <HAL_GPIO_ReadPin>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d106      	bne.n	8000ec6 <HAL_TIM_PeriodElapsedCallback+0x56>
				pressedKey = 1;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	60bb      	str	r3, [r7, #8]
				keyState = 1;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	60fb      	str	r3, [r7, #12]
				onKey1();
 8000ec0:	f000 fbda 	bl	8001678 <onKey1>
			break;
 8000ec4:	e05c      	b.n	8000f80 <HAL_TIM_PeriodElapsedCallback+0x110>
			} else if(!HAL_GPIO_ReadPin(KEY2_GPIO_Port,KEY2_Pin))
 8000ec6:	2104      	movs	r1, #4
 8000ec8:	4831      	ldr	r0, [pc, #196]	@ (8000f90 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000eca:	f001 fcd3 	bl	8002874 <HAL_GPIO_ReadPin>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d106      	bne.n	8000ee2 <HAL_TIM_PeriodElapsedCallback+0x72>
				pressedKey = 2;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	60bb      	str	r3, [r7, #8]
				keyState = 1;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	60fb      	str	r3, [r7, #12]
				onKey2();
 8000edc:	f000 fbd2 	bl	8001684 <onKey2>
			break;
 8000ee0:	e04e      	b.n	8000f80 <HAL_TIM_PeriodElapsedCallback+0x110>
			} else if (HAL_GPIO_ReadPin(KEY_UP_GPIO_Port,KEY_UP_Pin))
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	482b      	ldr	r0, [pc, #172]	@ (8000f94 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000ee6:	f001 fcc5 	bl	8002874 <HAL_GPIO_ReadPin>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d047      	beq.n	8000f80 <HAL_TIM_PeriodElapsedCallback+0x110>
				pressedKey = -1;
 8000ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef4:	60bb      	str	r3, [r7, #8]
				keyState = 1;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	60fb      	str	r3, [r7, #12]
				onKeyUP();
 8000efa:	f000 fbc9 	bl	8001690 <onKeyUP>
			break;
 8000efe:	e03f      	b.n	8000f80 <HAL_TIM_PeriodElapsedCallback+0x110>
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	3301      	adds	r3, #1
 8000f04:	2b03      	cmp	r3, #3
 8000f06:	d83d      	bhi.n	8000f84 <HAL_TIM_PeriodElapsedCallback+0x114>
 8000f08:	a201      	add	r2, pc, #4	@ (adr r2, 8000f10 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f0e:	bf00      	nop
 8000f10:	08000f5d 	.word	0x08000f5d
 8000f14:	08000f21 	.word	0x08000f21
 8000f18:	08000f35 	.word	0x08000f35
 8000f1c:	08000f49 	.word	0x08000f49
				if(HAL_GPIO_ReadPin(KEY0_GPIO_Port,KEY0_Pin))
 8000f20:	2110      	movs	r1, #16
 8000f22:	481b      	ldr	r0, [pc, #108]	@ (8000f90 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000f24:	f001 fca6 	bl	8002874 <HAL_GPIO_ReadPin>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d020      	beq.n	8000f70 <HAL_TIM_PeriodElapsedCallback+0x100>
					keyState = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
				break;
 8000f32:	e01d      	b.n	8000f70 <HAL_TIM_PeriodElapsedCallback+0x100>
				if(HAL_GPIO_ReadPin(KEY1_GPIO_Port,KEY1_Pin))
 8000f34:	2108      	movs	r1, #8
 8000f36:	4816      	ldr	r0, [pc, #88]	@ (8000f90 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000f38:	f001 fc9c 	bl	8002874 <HAL_GPIO_ReadPin>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d018      	beq.n	8000f74 <HAL_TIM_PeriodElapsedCallback+0x104>
					keyState = 0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
				break;
 8000f46:	e015      	b.n	8000f74 <HAL_TIM_PeriodElapsedCallback+0x104>
				if(HAL_GPIO_ReadPin(KEY2_GPIO_Port,KEY2_Pin))
 8000f48:	2104      	movs	r1, #4
 8000f4a:	4811      	ldr	r0, [pc, #68]	@ (8000f90 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000f4c:	f001 fc92 	bl	8002874 <HAL_GPIO_ReadPin>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d010      	beq.n	8000f78 <HAL_TIM_PeriodElapsedCallback+0x108>
					keyState = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	60fb      	str	r3, [r7, #12]
				break;
 8000f5a:	e00d      	b.n	8000f78 <HAL_TIM_PeriodElapsedCallback+0x108>
				if (!HAL_GPIO_ReadPin(KEY_UP_GPIO_Port,KEY_UP_Pin))
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	480d      	ldr	r0, [pc, #52]	@ (8000f94 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000f60:	f001 fc88 	bl	8002874 <HAL_GPIO_ReadPin>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d108      	bne.n	8000f7c <HAL_TIM_PeriodElapsedCallback+0x10c>
					keyState = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
				break;
 8000f6e:	e005      	b.n	8000f7c <HAL_TIM_PeriodElapsedCallback+0x10c>
				break;
 8000f70:	bf00      	nop
 8000f72:	e007      	b.n	8000f84 <HAL_TIM_PeriodElapsedCallback+0x114>
				break;
 8000f74:	bf00      	nop
 8000f76:	e005      	b.n	8000f84 <HAL_TIM_PeriodElapsedCallback+0x114>
				break;
 8000f78:	bf00      	nop
 8000f7a:	e003      	b.n	8000f84 <HAL_TIM_PeriodElapsedCallback+0x114>
				break;
 8000f7c:	bf00      	nop
		break;
 8000f7e:	e001      	b.n	8000f84 <HAL_TIM_PeriodElapsedCallback+0x114>
			break;
 8000f80:	bf00      	nop
 8000f82:	e000      	b.n	8000f86 <HAL_TIM_PeriodElapsedCallback+0x116>
		break;
 8000f84:	bf00      	nop
}
 8000f86:	bf00      	nop
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40021000 	.word	0x40021000
 8000f94:	40020000 	.word	0x40020000

08000f98 <drawAxis>:

void drawAxis()
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af02      	add	r7, sp, #8
	TFT_DrawLine(1,240,320,240,0xFFFF);
 8000f9e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	23f0      	movs	r3, #240	@ 0xf0
 8000fa6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000faa:	21f0      	movs	r1, #240	@ 0xf0
 8000fac:	2001      	movs	r0, #1
 8000fae:	f001 f86d 	bl	800208c <TFT_DrawLine>
	TFT_DrawLine(160,1,160,480,0xFFFF);
 8000fb2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000fbc:	22a0      	movs	r2, #160	@ 0xa0
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	20a0      	movs	r0, #160	@ 0xa0
 8000fc2:	f001 f863 	bl	800208c <TFT_DrawLine>
	TFT_DrawLine(320,240,310,230,0xFFFF);
 8000fc6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fca:	9300      	str	r3, [sp, #0]
 8000fcc:	23e6      	movs	r3, #230	@ 0xe6
 8000fce:	f44f 729b 	mov.w	r2, #310	@ 0x136
 8000fd2:	21f0      	movs	r1, #240	@ 0xf0
 8000fd4:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8000fd8:	f001 f858 	bl	800208c <TFT_DrawLine>
	TFT_DrawLine(320,240,310,250,0xFFFF);
 8000fdc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	23fa      	movs	r3, #250	@ 0xfa
 8000fe4:	f44f 729b 	mov.w	r2, #310	@ 0x136
 8000fe8:	21f0      	movs	r1, #240	@ 0xf0
 8000fea:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8000fee:	f001 f84d 	bl	800208c <TFT_DrawLine>
	TFT_DrawLine(160,480,150,470,0xFFFF);
 8000ff2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	f44f 73eb 	mov.w	r3, #470	@ 0x1d6
 8000ffc:	2296      	movs	r2, #150	@ 0x96
 8000ffe:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8001002:	20a0      	movs	r0, #160	@ 0xa0
 8001004:	f001 f842 	bl	800208c <TFT_DrawLine>
	TFT_DrawLine(160,480,170,470,0xFFFF);
 8001008:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	f44f 73eb 	mov.w	r3, #470	@ 0x1d6
 8001012:	22aa      	movs	r2, #170	@ 0xaa
 8001014:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8001018:	20a0      	movs	r0, #160	@ 0xa0
 800101a:	f001 f837 	bl	800208c <TFT_DrawLine>
	for(int j=0;j<=48;j++)
 800101e:	2300      	movs	r3, #0
 8001020:	607b      	str	r3, [r7, #4]
 8001022:	e017      	b.n	8001054 <drawAxis+0xbc>
	{
		TFT_DrawLine(160,j*10,170,j*10,0xFFFF);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	b29b      	uxth	r3, r3
 8001028:	461a      	mov	r2, r3
 800102a:	0092      	lsls	r2, r2, #2
 800102c:	4413      	add	r3, r2
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	b299      	uxth	r1, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	b29b      	uxth	r3, r3
 8001036:	461a      	mov	r2, r3
 8001038:	0092      	lsls	r2, r2, #2
 800103a:	4413      	add	r3, r2
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	b29b      	uxth	r3, r3
 8001040:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001044:	9200      	str	r2, [sp, #0]
 8001046:	22aa      	movs	r2, #170	@ 0xaa
 8001048:	20a0      	movs	r0, #160	@ 0xa0
 800104a:	f001 f81f 	bl	800208c <TFT_DrawLine>
	for(int j=0;j<=48;j++)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	3301      	adds	r3, #1
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b30      	cmp	r3, #48	@ 0x30
 8001058:	dde4      	ble.n	8001024 <drawAxis+0x8c>
	}
	for(int j=0;j<=32;j++)
 800105a:	2300      	movs	r3, #0
 800105c:	603b      	str	r3, [r7, #0]
 800105e:	e017      	b.n	8001090 <drawAxis+0xf8>
	{
		TFT_DrawLine(j*10,240,j*10,250,0xFFFF);
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	b29b      	uxth	r3, r3
 8001064:	461a      	mov	r2, r3
 8001066:	0092      	lsls	r2, r2, #2
 8001068:	4413      	add	r3, r2
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	b298      	uxth	r0, r3
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	b29b      	uxth	r3, r3
 8001072:	461a      	mov	r2, r3
 8001074:	0092      	lsls	r2, r2, #2
 8001076:	4413      	add	r3, r2
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	b29a      	uxth	r2, r3
 800107c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	23fa      	movs	r3, #250	@ 0xfa
 8001084:	21f0      	movs	r1, #240	@ 0xf0
 8001086:	f001 f801 	bl	800208c <TFT_DrawLine>
	for(int j=0;j<=32;j++)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	3301      	adds	r3, #1
 800108e:	603b      	str	r3, [r7, #0]
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	2b20      	cmp	r3, #32
 8001094:	dde4      	ble.n	8001060 <drawAxis+0xc8>
	}
}
 8001096:	bf00      	nop
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <drawCoordinate_Sin>:

void drawCoordinate_Sin()
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
	TFT_Clear(0x0000);
 80010a6:	2000      	movs	r0, #0
 80010a8:	f000 ff63 	bl	8001f72 <TFT_Clear>
	drawAxis();
 80010ac:	f7ff ff74 	bl	8000f98 <drawAxis>
	for(float i=1;i<480;i+=0.1)
 80010b0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	e05b      	b.n	8001170 <drawCoordinate_Sin+0xd0>
	{
		y=i;
 80010b8:	4a39      	ldr	r2, [pc, #228]	@ (80011a0 <drawCoordinate_Sin+0x100>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6013      	str	r3, [r2, #0]
		x=50*sin(i*3.1415/20)+160;
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff f9e6 	bl	8000490 <__aeabi_f2d>
 80010c4:	a332      	add	r3, pc, #200	@ (adr r3, 8001190 <drawCoordinate_Sin+0xf0>)
 80010c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ca:	f7ff fa39 	bl	8000540 <__aeabi_dmul>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	4610      	mov	r0, r2
 80010d4:	4619      	mov	r1, r3
 80010d6:	f04f 0200 	mov.w	r2, #0
 80010da:	4b32      	ldr	r3, [pc, #200]	@ (80011a4 <drawCoordinate_Sin+0x104>)
 80010dc:	f7ff fb5a 	bl	8000794 <__aeabi_ddiv>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	ec43 2b17 	vmov	d7, r2, r3
 80010e8:	eeb0 0a47 	vmov.f32	s0, s14
 80010ec:	eef0 0a67 	vmov.f32	s1, s15
 80010f0:	f002 fdf2 	bl	8003cd8 <sin>
 80010f4:	ec51 0b10 	vmov	r0, r1, d0
 80010f8:	f04f 0200 	mov.w	r2, #0
 80010fc:	4b2a      	ldr	r3, [pc, #168]	@ (80011a8 <drawCoordinate_Sin+0x108>)
 80010fe:	f7ff fa1f 	bl	8000540 <__aeabi_dmul>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	4610      	mov	r0, r2
 8001108:	4619      	mov	r1, r3
 800110a:	f04f 0200 	mov.w	r2, #0
 800110e:	4b27      	ldr	r3, [pc, #156]	@ (80011ac <drawCoordinate_Sin+0x10c>)
 8001110:	f7ff f860 	bl	80001d4 <__adddf3>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	4610      	mov	r0, r2
 800111a:	4619      	mov	r1, r3
 800111c:	f7ff fcd2 	bl	8000ac4 <__aeabi_d2f>
 8001120:	4603      	mov	r3, r0
 8001122:	4a23      	ldr	r2, [pc, #140]	@ (80011b0 <drawCoordinate_Sin+0x110>)
 8001124:	6013      	str	r3, [r2, #0]
		TFT_DrawPoint(x,y,0xF800);
 8001126:	4b22      	ldr	r3, [pc, #136]	@ (80011b0 <drawCoordinate_Sin+0x110>)
 8001128:	edd3 7a00 	vldr	s15, [r3]
 800112c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001130:	ee17 3a90 	vmov	r3, s15
 8001134:	b29b      	uxth	r3, r3
 8001136:	4a1a      	ldr	r2, [pc, #104]	@ (80011a0 <drawCoordinate_Sin+0x100>)
 8001138:	edd2 7a00 	vldr	s15, [r2]
 800113c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001140:	ee17 2a90 	vmov	r2, s15
 8001144:	b291      	uxth	r1, r2
 8001146:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800114a:	4618      	mov	r0, r3
 800114c:	f000 ff87 	bl	800205e <TFT_DrawPoint>
	for(float i=1;i<480;i+=0.1)
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff f99d 	bl	8000490 <__aeabi_f2d>
 8001156:	a310      	add	r3, pc, #64	@ (adr r3, 8001198 <drawCoordinate_Sin+0xf8>)
 8001158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115c:	f7ff f83a 	bl	80001d4 <__adddf3>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4610      	mov	r0, r2
 8001166:	4619      	mov	r1, r3
 8001168:	f7ff fcac 	bl	8000ac4 <__aeabi_d2f>
 800116c:	4603      	mov	r3, r0
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	edd7 7a01 	vldr	s15, [r7, #4]
 8001174:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80011b4 <drawCoordinate_Sin+0x114>
 8001178:	eef4 7ac7 	vcmpe.f32	s15, s14
 800117c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001180:	d49a      	bmi.n	80010b8 <drawCoordinate_Sin+0x18>
	}
}
 8001182:	bf00      	nop
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	f3af 8000 	nop.w
 8001190:	c083126f 	.word	0xc083126f
 8001194:	400921ca 	.word	0x400921ca
 8001198:	9999999a 	.word	0x9999999a
 800119c:	3fb99999 	.word	0x3fb99999
 80011a0:	200000c4 	.word	0x200000c4
 80011a4:	40340000 	.word	0x40340000
 80011a8:	40490000 	.word	0x40490000
 80011ac:	40640000 	.word	0x40640000
 80011b0:	200000c0 	.word	0x200000c0
 80011b4:	43f00000 	.word	0x43f00000

080011b8 <drawCoordinate1>:


void drawCoordinate1()
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af02      	add	r7, sp, #8
	TFT_Clear(0x0000);
 80011be:	2000      	movs	r0, #0
 80011c0:	f000 fed7 	bl	8001f72 <TFT_Clear>
	drawAxis();
 80011c4:	f7ff fee8 	bl	8000f98 <drawAxis>
	for(float i=1;i<480;i+=0.1)
 80011c8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	e085      	b.n	80012dc <drawCoordinate1+0x124>
	{
		y=i;
 80011d0:	4a53      	ldr	r2, [pc, #332]	@ (8001320 <drawCoordinate1+0x168>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6013      	str	r3, [r2, #0]
		x=50*sin(i*3.1415/20);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff f95a 	bl	8000490 <__aeabi_f2d>
 80011dc:	a348      	add	r3, pc, #288	@ (adr r3, 8001300 <drawCoordinate1+0x148>)
 80011de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e2:	f7ff f9ad 	bl	8000540 <__aeabi_dmul>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4610      	mov	r0, r2
 80011ec:	4619      	mov	r1, r3
 80011ee:	f04f 0200 	mov.w	r2, #0
 80011f2:	4b4c      	ldr	r3, [pc, #304]	@ (8001324 <drawCoordinate1+0x16c>)
 80011f4:	f7ff face 	bl	8000794 <__aeabi_ddiv>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	ec43 2b17 	vmov	d7, r2, r3
 8001200:	eeb0 0a47 	vmov.f32	s0, s14
 8001204:	eef0 0a67 	vmov.f32	s1, s15
 8001208:	f002 fd66 	bl	8003cd8 <sin>
 800120c:	ec51 0b10 	vmov	r0, r1, d0
 8001210:	f04f 0200 	mov.w	r2, #0
 8001214:	4b44      	ldr	r3, [pc, #272]	@ (8001328 <drawCoordinate1+0x170>)
 8001216:	f7ff f993 	bl	8000540 <__aeabi_dmul>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	4610      	mov	r0, r2
 8001220:	4619      	mov	r1, r3
 8001222:	f7ff fc4f 	bl	8000ac4 <__aeabi_d2f>
 8001226:	4603      	mov	r3, r0
 8001228:	4a40      	ldr	r2, [pc, #256]	@ (800132c <drawCoordinate1+0x174>)
 800122a:	6013      	str	r3, [r2, #0]
		if(x<0.2&&x>-0.2)
 800122c:	4b3f      	ldr	r3, [pc, #252]	@ (800132c <drawCoordinate1+0x174>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f92d 	bl	8000490 <__aeabi_f2d>
 8001236:	a334      	add	r3, pc, #208	@ (adr r3, 8001308 <drawCoordinate1+0x150>)
 8001238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123c:	f7ff fbf2 	bl	8000a24 <__aeabi_dcmplt>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d03a      	beq.n	80012bc <drawCoordinate1+0x104>
 8001246:	4b39      	ldr	r3, [pc, #228]	@ (800132c <drawCoordinate1+0x174>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff f920 	bl	8000490 <__aeabi_f2d>
 8001250:	a32f      	add	r3, pc, #188	@ (adr r3, 8001310 <drawCoordinate1+0x158>)
 8001252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001256:	f7ff fc03 	bl	8000a60 <__aeabi_dcmpgt>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d02d      	beq.n	80012bc <drawCoordinate1+0x104>
		{
			TFT_DrawLine(120,i,200,i,0xF800);
 8001260:	edd7 7a01 	vldr	s15, [r7, #4]
 8001264:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001268:	ee17 3a90 	vmov	r3, s15
 800126c:	b299      	uxth	r1, r3
 800126e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001272:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001276:	ee17 3a90 	vmov	r3, s15
 800127a:	b29b      	uxth	r3, r3
 800127c:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001280:	9200      	str	r2, [sp, #0]
 8001282:	22c8      	movs	r2, #200	@ 0xc8
 8001284:	2078      	movs	r0, #120	@ 0x78
 8001286:	f000 ff01 	bl	800208c <TFT_DrawLine>
			TFT_DrawLine(200,i,120,i+20,0xF800);
 800128a:	edd7 7a01 	vldr	s15, [r7, #4]
 800128e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001292:	ee17 3a90 	vmov	r3, s15
 8001296:	b299      	uxth	r1, r3
 8001298:	edd7 7a01 	vldr	s15, [r7, #4]
 800129c:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80012a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012a8:	ee17 3a90 	vmov	r3, s15
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80012b2:	9200      	str	r2, [sp, #0]
 80012b4:	2278      	movs	r2, #120	@ 0x78
 80012b6:	20c8      	movs	r0, #200	@ 0xc8
 80012b8:	f000 fee8 	bl	800208c <TFT_DrawLine>
	for(float i=1;i<480;i+=0.1)
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff f8e7 	bl	8000490 <__aeabi_f2d>
 80012c2:	a315      	add	r3, pc, #84	@ (adr r3, 8001318 <drawCoordinate1+0x160>)
 80012c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c8:	f7fe ff84 	bl	80001d4 <__adddf3>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4610      	mov	r0, r2
 80012d2:	4619      	mov	r1, r3
 80012d4:	f7ff fbf6 	bl	8000ac4 <__aeabi_d2f>
 80012d8:	4603      	mov	r3, r0
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80012e0:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001330 <drawCoordinate1+0x178>
 80012e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ec:	f53f af70 	bmi.w	80011d0 <drawCoordinate1+0x18>
		}
	}
}
 80012f0:	bf00      	nop
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	f3af 8000 	nop.w
 8001300:	c083126f 	.word	0xc083126f
 8001304:	400921ca 	.word	0x400921ca
 8001308:	9999999a 	.word	0x9999999a
 800130c:	3fc99999 	.word	0x3fc99999
 8001310:	9999999a 	.word	0x9999999a
 8001314:	bfc99999 	.word	0xbfc99999
 8001318:	9999999a 	.word	0x9999999a
 800131c:	3fb99999 	.word	0x3fb99999
 8001320:	200000c4 	.word	0x200000c4
 8001324:	40340000 	.word	0x40340000
 8001328:	40490000 	.word	0x40490000
 800132c:	200000c0 	.word	0x200000c0
 8001330:	43f00000 	.word	0x43f00000
 8001334:	00000000 	.word	0x00000000

08001338 <drawCoordinate2>:

void drawCoordinate2()
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af02      	add	r7, sp, #8
	TFT_Clear(0x0000);
 800133e:	2000      	movs	r0, #0
 8001340:	f000 fe17 	bl	8001f72 <TFT_Clear>
	drawAxis();
 8001344:	f7ff fe28 	bl	8000f98 <drawAxis>
	for(float i=1;i<480;i+=0.1)
 8001348:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800134c:	607b      	str	r3, [r7, #4]
 800134e:	e09e      	b.n	800148e <drawCoordinate2+0x156>
	{
		x=i;
 8001350:	4a5d      	ldr	r2, [pc, #372]	@ (80014c8 <drawCoordinate2+0x190>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6013      	str	r3, [r2, #0]
		y=50*sin(i*3.1415/20);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff f89a 	bl	8000490 <__aeabi_f2d>
 800135c:	a354      	add	r3, pc, #336	@ (adr r3, 80014b0 <drawCoordinate2+0x178>)
 800135e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001362:	f7ff f8ed 	bl	8000540 <__aeabi_dmul>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4610      	mov	r0, r2
 800136c:	4619      	mov	r1, r3
 800136e:	f04f 0200 	mov.w	r2, #0
 8001372:	4b56      	ldr	r3, [pc, #344]	@ (80014cc <drawCoordinate2+0x194>)
 8001374:	f7ff fa0e 	bl	8000794 <__aeabi_ddiv>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	ec43 2b17 	vmov	d7, r2, r3
 8001380:	eeb0 0a47 	vmov.f32	s0, s14
 8001384:	eef0 0a67 	vmov.f32	s1, s15
 8001388:	f002 fca6 	bl	8003cd8 <sin>
 800138c:	ec51 0b10 	vmov	r0, r1, d0
 8001390:	f04f 0200 	mov.w	r2, #0
 8001394:	4b4e      	ldr	r3, [pc, #312]	@ (80014d0 <drawCoordinate2+0x198>)
 8001396:	f7ff f8d3 	bl	8000540 <__aeabi_dmul>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	4610      	mov	r0, r2
 80013a0:	4619      	mov	r1, r3
 80013a2:	f7ff fb8f 	bl	8000ac4 <__aeabi_d2f>
 80013a6:	4603      	mov	r3, r0
 80013a8:	4a4a      	ldr	r2, [pc, #296]	@ (80014d4 <drawCoordinate2+0x19c>)
 80013aa:	6013      	str	r3, [r2, #0]
		if(y>0.1)
 80013ac:	4b49      	ldr	r3, [pc, #292]	@ (80014d4 <drawCoordinate2+0x19c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff f86d 	bl	8000490 <__aeabi_f2d>
 80013b6:	a340      	add	r3, pc, #256	@ (adr r3, 80014b8 <drawCoordinate2+0x180>)
 80013b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013bc:	f7ff fb50 	bl	8000a60 <__aeabi_dcmpgt>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d018      	beq.n	80013f8 <drawCoordinate2+0xc0>
		{
			y=200;
 80013c6:	4b43      	ldr	r3, [pc, #268]	@ (80014d4 <drawCoordinate2+0x19c>)
 80013c8:	4a43      	ldr	r2, [pc, #268]	@ (80014d8 <drawCoordinate2+0x1a0>)
 80013ca:	601a      	str	r2, [r3, #0]
			TFT_DrawPoint(y,x,0xF800);
 80013cc:	4b41      	ldr	r3, [pc, #260]	@ (80014d4 <drawCoordinate2+0x19c>)
 80013ce:	edd3 7a00 	vldr	s15, [r3]
 80013d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013d6:	ee17 3a90 	vmov	r3, s15
 80013da:	b29b      	uxth	r3, r3
 80013dc:	4a3a      	ldr	r2, [pc, #232]	@ (80014c8 <drawCoordinate2+0x190>)
 80013de:	edd2 7a00 	vldr	s15, [r2]
 80013e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013e6:	ee17 2a90 	vmov	r2, s15
 80013ea:	b291      	uxth	r1, r2
 80013ec:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80013f0:	4618      	mov	r0, r3
 80013f2:	f000 fe34 	bl	800205e <TFT_DrawPoint>
 80013f6:	e03a      	b.n	800146e <drawCoordinate2+0x136>
		}
		else if(y<-0.1)
 80013f8:	4b36      	ldr	r3, [pc, #216]	@ (80014d4 <drawCoordinate2+0x19c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff f847 	bl	8000490 <__aeabi_f2d>
 8001402:	a32f      	add	r3, pc, #188	@ (adr r3, 80014c0 <drawCoordinate2+0x188>)
 8001404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001408:	f7ff fb0c 	bl	8000a24 <__aeabi_dcmplt>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d018      	beq.n	8001444 <drawCoordinate2+0x10c>
		{
			y=120;
 8001412:	4b30      	ldr	r3, [pc, #192]	@ (80014d4 <drawCoordinate2+0x19c>)
 8001414:	4a31      	ldr	r2, [pc, #196]	@ (80014dc <drawCoordinate2+0x1a4>)
 8001416:	601a      	str	r2, [r3, #0]
			TFT_DrawPoint(y,x,0xF800);
 8001418:	4b2e      	ldr	r3, [pc, #184]	@ (80014d4 <drawCoordinate2+0x19c>)
 800141a:	edd3 7a00 	vldr	s15, [r3]
 800141e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001422:	ee17 3a90 	vmov	r3, s15
 8001426:	b29b      	uxth	r3, r3
 8001428:	4a27      	ldr	r2, [pc, #156]	@ (80014c8 <drawCoordinate2+0x190>)
 800142a:	edd2 7a00 	vldr	s15, [r2]
 800142e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001432:	ee17 2a90 	vmov	r2, s15
 8001436:	b291      	uxth	r1, r2
 8001438:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800143c:	4618      	mov	r0, r3
 800143e:	f000 fe0e 	bl	800205e <TFT_DrawPoint>
 8001442:	e014      	b.n	800146e <drawCoordinate2+0x136>
		}
		else
			TFT_DrawLine(120,i,200,i,0xF800);
 8001444:	edd7 7a01 	vldr	s15, [r7, #4]
 8001448:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800144c:	ee17 3a90 	vmov	r3, s15
 8001450:	b299      	uxth	r1, r3
 8001452:	edd7 7a01 	vldr	s15, [r7, #4]
 8001456:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800145a:	ee17 3a90 	vmov	r3, s15
 800145e:	b29b      	uxth	r3, r3
 8001460:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001464:	9200      	str	r2, [sp, #0]
 8001466:	22c8      	movs	r2, #200	@ 0xc8
 8001468:	2078      	movs	r0, #120	@ 0x78
 800146a:	f000 fe0f 	bl	800208c <TFT_DrawLine>
	for(float i=1;i<480;i+=0.1)
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff f80e 	bl	8000490 <__aeabi_f2d>
 8001474:	a310      	add	r3, pc, #64	@ (adr r3, 80014b8 <drawCoordinate2+0x180>)
 8001476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147a:	f7fe feab 	bl	80001d4 <__adddf3>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4610      	mov	r0, r2
 8001484:	4619      	mov	r1, r3
 8001486:	f7ff fb1d 	bl	8000ac4 <__aeabi_d2f>
 800148a:	4603      	mov	r3, r0
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001492:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80014e0 <drawCoordinate2+0x1a8>
 8001496:	eef4 7ac7 	vcmpe.f32	s15, s14
 800149a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800149e:	f53f af57 	bmi.w	8001350 <drawCoordinate2+0x18>
	}
}
 80014a2:	bf00      	nop
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	f3af 8000 	nop.w
 80014b0:	c083126f 	.word	0xc083126f
 80014b4:	400921ca 	.word	0x400921ca
 80014b8:	9999999a 	.word	0x9999999a
 80014bc:	3fb99999 	.word	0x3fb99999
 80014c0:	9999999a 	.word	0x9999999a
 80014c4:	bfb99999 	.word	0xbfb99999
 80014c8:	200000c0 	.word	0x200000c0
 80014cc:	40340000 	.word	0x40340000
 80014d0:	40490000 	.word	0x40490000
 80014d4:	200000c4 	.word	0x200000c4
 80014d8:	43480000 	.word	0x43480000
 80014dc:	42f00000 	.word	0x42f00000
 80014e0:	43f00000 	.word	0x43f00000
 80014e4:	00000000 	.word	0x00000000

080014e8 <drawCoordinate3>:

void drawCoordinate3()
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af02      	add	r7, sp, #8
	TFT_Clear(0x0000);
 80014ee:	2000      	movs	r0, #0
 80014f0:	f000 fd3f 	bl	8001f72 <TFT_Clear>
	drawAxis();
 80014f4:	f7ff fd50 	bl	8000f98 <drawAxis>
	for(float i=1;i<480;i+=0.1)
 80014f8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	e089      	b.n	8001614 <drawCoordinate3+0x12c>
	{
		x=i;
 8001500:	4a55      	ldr	r2, [pc, #340]	@ (8001658 <drawCoordinate3+0x170>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6013      	str	r3, [r2, #0]
		y=50*sin(i*3.1415/20);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7fe ffc2 	bl	8000490 <__aeabi_f2d>
 800150c:	a34a      	add	r3, pc, #296	@ (adr r3, 8001638 <drawCoordinate3+0x150>)
 800150e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001512:	f7ff f815 	bl	8000540 <__aeabi_dmul>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4610      	mov	r0, r2
 800151c:	4619      	mov	r1, r3
 800151e:	f04f 0200 	mov.w	r2, #0
 8001522:	4b4e      	ldr	r3, [pc, #312]	@ (800165c <drawCoordinate3+0x174>)
 8001524:	f7ff f936 	bl	8000794 <__aeabi_ddiv>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	ec43 2b17 	vmov	d7, r2, r3
 8001530:	eeb0 0a47 	vmov.f32	s0, s14
 8001534:	eef0 0a67 	vmov.f32	s1, s15
 8001538:	f002 fbce 	bl	8003cd8 <sin>
 800153c:	ec51 0b10 	vmov	r0, r1, d0
 8001540:	f04f 0200 	mov.w	r2, #0
 8001544:	4b46      	ldr	r3, [pc, #280]	@ (8001660 <drawCoordinate3+0x178>)
 8001546:	f7fe fffb 	bl	8000540 <__aeabi_dmul>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4610      	mov	r0, r2
 8001550:	4619      	mov	r1, r3
 8001552:	f7ff fab7 	bl	8000ac4 <__aeabi_d2f>
 8001556:	4603      	mov	r3, r0
 8001558:	4a42      	ldr	r2, [pc, #264]	@ (8001664 <drawCoordinate3+0x17c>)
 800155a:	6013      	str	r3, [r2, #0]
		if(y<0.2&&y>-0.2)
 800155c:	4b41      	ldr	r3, [pc, #260]	@ (8001664 <drawCoordinate3+0x17c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f7fe ff95 	bl	8000490 <__aeabi_f2d>
 8001566:	a336      	add	r3, pc, #216	@ (adr r3, 8001640 <drawCoordinate3+0x158>)
 8001568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156c:	f7ff fa5a 	bl	8000a24 <__aeabi_dcmplt>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d03e      	beq.n	80015f4 <drawCoordinate3+0x10c>
 8001576:	4b3b      	ldr	r3, [pc, #236]	@ (8001664 <drawCoordinate3+0x17c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f7fe ff88 	bl	8000490 <__aeabi_f2d>
 8001580:	a331      	add	r3, pc, #196	@ (adr r3, 8001648 <drawCoordinate3+0x160>)
 8001582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001586:	f7ff fa6b 	bl	8000a60 <__aeabi_dcmpgt>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d031      	beq.n	80015f4 <drawCoordinate3+0x10c>
		{
			TFT_DrawLine(200,i,120,i+10,0xF800);
 8001590:	edd7 7a01 	vldr	s15, [r7, #4]
 8001594:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001598:	ee17 3a90 	vmov	r3, s15
 800159c:	b299      	uxth	r1, r3
 800159e:	edd7 7a01 	vldr	s15, [r7, #4]
 80015a2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80015a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015ae:	ee17 3a90 	vmov	r3, s15
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80015b8:	9200      	str	r2, [sp, #0]
 80015ba:	2278      	movs	r2, #120	@ 0x78
 80015bc:	20c8      	movs	r0, #200	@ 0xc8
 80015be:	f000 fd65 	bl	800208c <TFT_DrawLine>
			TFT_DrawLine(120,i-10,200,i,0xF800);
 80015c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80015c6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80015ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80015ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015d2:	ee17 3a90 	vmov	r3, s15
 80015d6:	b299      	uxth	r1, r3
 80015d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80015dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015e0:	ee17 3a90 	vmov	r3, s15
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80015ea:	9200      	str	r2, [sp, #0]
 80015ec:	22c8      	movs	r2, #200	@ 0xc8
 80015ee:	2078      	movs	r0, #120	@ 0x78
 80015f0:	f000 fd4c 	bl	800208c <TFT_DrawLine>
	for(float i=1;i<480;i+=0.1)
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7fe ff4b 	bl	8000490 <__aeabi_f2d>
 80015fa:	a315      	add	r3, pc, #84	@ (adr r3, 8001650 <drawCoordinate3+0x168>)
 80015fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001600:	f7fe fde8 	bl	80001d4 <__adddf3>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4610      	mov	r0, r2
 800160a:	4619      	mov	r1, r3
 800160c:	f7ff fa5a 	bl	8000ac4 <__aeabi_d2f>
 8001610:	4603      	mov	r3, r0
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	edd7 7a01 	vldr	s15, [r7, #4]
 8001618:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001668 <drawCoordinate3+0x180>
 800161c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001624:	f53f af6c 	bmi.w	8001500 <drawCoordinate3+0x18>
		}
	}
}
 8001628:	bf00      	nop
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	f3af 8000 	nop.w
 8001638:	c083126f 	.word	0xc083126f
 800163c:	400921ca 	.word	0x400921ca
 8001640:	9999999a 	.word	0x9999999a
 8001644:	3fc99999 	.word	0x3fc99999
 8001648:	9999999a 	.word	0x9999999a
 800164c:	bfc99999 	.word	0xbfc99999
 8001650:	9999999a 	.word	0x9999999a
 8001654:	3fb99999 	.word	0x3fb99999
 8001658:	200000c0 	.word	0x200000c0
 800165c:	40340000 	.word	0x40340000
 8001660:	40490000 	.word	0x40490000
 8001664:	200000c4 	.word	0x200000c4
 8001668:	43f00000 	.word	0x43f00000

0800166c <onKey0>:

void onKey0()
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
	drawCoordinate_Sin();
 8001670:	f7ff fd16 	bl	80010a0 <drawCoordinate_Sin>
}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}

08001678 <onKey1>:

void onKey1()
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
	drawCoordinate1();
 800167c:	f7ff fd9c 	bl	80011b8 <drawCoordinate1>
}
 8001680:	bf00      	nop
 8001682:	bd80      	pop	{r7, pc}

08001684 <onKey2>:

void onKey2()
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
	drawCoordinate2();
 8001688:	f7ff fe56 	bl	8001338 <drawCoordinate2>
}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}

08001690 <onKeyUP>:

void onKeyUP()
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
	drawCoordinate3();
 8001694:	f7ff ff28 	bl	80014e8 <drawCoordinate3>
}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}

0800169c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016a0:	f000 fda4 	bl	80021ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016a4:	f000 f80e 	bl	80016c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016a8:	f000 f8bc 	bl	8001824 <MX_GPIO_Init>
  MX_FSMC_Init();
 80016ac:	f000 f966 	bl	800197c <MX_FSMC_Init>
  MX_TIM1_Init();
 80016b0:	f000 f866 	bl	8001780 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	TFT_Init();
 80016b4:	f000 fb2c 	bl	8001d10 <TFT_Init>
	TFT_Clear(0xFEA0);
 80016b8:	f64f 60a0 	movw	r0, #65184	@ 0xfea0
 80016bc:	f000 fc59 	bl	8001f72 <TFT_Clear>




  while (1)
 80016c0:	bf00      	nop
 80016c2:	e7fd      	b.n	80016c0 <main+0x24>

080016c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b094      	sub	sp, #80	@ 0x50
 80016c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ca:	f107 0320 	add.w	r3, r7, #32
 80016ce:	2230      	movs	r2, #48	@ 0x30
 80016d0:	2100      	movs	r1, #0
 80016d2:	4618      	mov	r0, r3
 80016d4:	f002 fad2 	bl	8003c7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016d8:	f107 030c 	add.w	r3, r7, #12
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e8:	2300      	movs	r3, #0
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	4b22      	ldr	r3, [pc, #136]	@ (8001778 <SystemClock_Config+0xb4>)
 80016ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f0:	4a21      	ldr	r2, [pc, #132]	@ (8001778 <SystemClock_Config+0xb4>)
 80016f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80016f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001778 <SystemClock_Config+0xb4>)
 80016fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001704:	2300      	movs	r3, #0
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	4b1c      	ldr	r3, [pc, #112]	@ (800177c <SystemClock_Config+0xb8>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a1b      	ldr	r2, [pc, #108]	@ (800177c <SystemClock_Config+0xb8>)
 800170e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	4b19      	ldr	r3, [pc, #100]	@ (800177c <SystemClock_Config+0xb8>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800171c:	607b      	str	r3, [r7, #4]
 800171e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001720:	2302      	movs	r3, #2
 8001722:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001724:	2301      	movs	r3, #1
 8001726:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001728:	2310      	movs	r3, #16
 800172a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800172c:	2300      	movs	r3, #0
 800172e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001730:	f107 0320 	add.w	r3, r7, #32
 8001734:	4618      	mov	r0, r3
 8001736:	f001 f8e7 	bl	8002908 <HAL_RCC_OscConfig>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001740:	f000 f97c 	bl	8001a3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001744:	230f      	movs	r3, #15
 8001746:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001748:	2300      	movs	r3, #0
 800174a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001750:	2300      	movs	r3, #0
 8001752:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001754:	2300      	movs	r3, #0
 8001756:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001758:	f107 030c 	add.w	r3, r7, #12
 800175c:	2100      	movs	r1, #0
 800175e:	4618      	mov	r0, r3
 8001760:	f001 fb4a 	bl	8002df8 <HAL_RCC_ClockConfig>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800176a:	f000 f967 	bl	8001a3c <Error_Handler>
  }
}
 800176e:	bf00      	nop
 8001770:	3750      	adds	r7, #80	@ 0x50
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40023800 	.word	0x40023800
 800177c:	40007000 	.word	0x40007000

08001780 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001786:	f107 0308 	add.w	r3, r7, #8
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001794:	463b      	mov	r3, r7
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800179c:	4b1f      	ldr	r3, [pc, #124]	@ (800181c <MX_TIM1_Init+0x9c>)
 800179e:	4a20      	ldr	r2, [pc, #128]	@ (8001820 <MX_TIM1_Init+0xa0>)
 80017a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 400;
 80017a2:	4b1e      	ldr	r3, [pc, #120]	@ (800181c <MX_TIM1_Init+0x9c>)
 80017a4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80017a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017aa:	4b1c      	ldr	r3, [pc, #112]	@ (800181c <MX_TIM1_Init+0x9c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 400;
 80017b0:	4b1a      	ldr	r3, [pc, #104]	@ (800181c <MX_TIM1_Init+0x9c>)
 80017b2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80017b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b8:	4b18      	ldr	r3, [pc, #96]	@ (800181c <MX_TIM1_Init+0x9c>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017be:	4b17      	ldr	r3, [pc, #92]	@ (800181c <MX_TIM1_Init+0x9c>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c4:	4b15      	ldr	r3, [pc, #84]	@ (800181c <MX_TIM1_Init+0x9c>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017ca:	4814      	ldr	r0, [pc, #80]	@ (800181c <MX_TIM1_Init+0x9c>)
 80017cc:	f001 fd08 	bl	80031e0 <HAL_TIM_Base_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80017d6:	f000 f931 	bl	8001a3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017e0:	f107 0308 	add.w	r3, r7, #8
 80017e4:	4619      	mov	r1, r3
 80017e6:	480d      	ldr	r0, [pc, #52]	@ (800181c <MX_TIM1_Init+0x9c>)
 80017e8:	f001 feaa 	bl	8003540 <HAL_TIM_ConfigClockSource>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80017f2:	f000 f923 	bl	8001a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f6:	2300      	movs	r3, #0
 80017f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017fe:	463b      	mov	r3, r7
 8001800:	4619      	mov	r1, r3
 8001802:	4806      	ldr	r0, [pc, #24]	@ (800181c <MX_TIM1_Init+0x9c>)
 8001804:	f002 f8d2 	bl	80039ac <HAL_TIMEx_MasterConfigSynchronization>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800180e:	f000 f915 	bl	8001a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001812:	bf00      	nop
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000028 	.word	0x20000028
 8001820:	40010000 	.word	0x40010000

08001824 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08a      	sub	sp, #40	@ 0x28
 8001828:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182a:	f107 0314 	add.w	r3, r7, #20
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	60da      	str	r2, [r3, #12]
 8001838:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	613b      	str	r3, [r7, #16]
 800183e:	4b4b      	ldr	r3, [pc, #300]	@ (800196c <MX_GPIO_Init+0x148>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001842:	4a4a      	ldr	r2, [pc, #296]	@ (800196c <MX_GPIO_Init+0x148>)
 8001844:	f043 0310 	orr.w	r3, r3, #16
 8001848:	6313      	str	r3, [r2, #48]	@ 0x30
 800184a:	4b48      	ldr	r3, [pc, #288]	@ (800196c <MX_GPIO_Init+0x148>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184e:	f003 0310 	and.w	r3, r3, #16
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	4b44      	ldr	r3, [pc, #272]	@ (800196c <MX_GPIO_Init+0x148>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185e:	4a43      	ldr	r2, [pc, #268]	@ (800196c <MX_GPIO_Init+0x148>)
 8001860:	f043 0320 	orr.w	r3, r3, #32
 8001864:	6313      	str	r3, [r2, #48]	@ 0x30
 8001866:	4b41      	ldr	r3, [pc, #260]	@ (800196c <MX_GPIO_Init+0x148>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186a:	f003 0320 	and.w	r3, r3, #32
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	60bb      	str	r3, [r7, #8]
 8001876:	4b3d      	ldr	r3, [pc, #244]	@ (800196c <MX_GPIO_Init+0x148>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187a:	4a3c      	ldr	r2, [pc, #240]	@ (800196c <MX_GPIO_Init+0x148>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	6313      	str	r3, [r2, #48]	@ 0x30
 8001882:	4b3a      	ldr	r3, [pc, #232]	@ (800196c <MX_GPIO_Init+0x148>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	60bb      	str	r3, [r7, #8]
 800188c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	607b      	str	r3, [r7, #4]
 8001892:	4b36      	ldr	r3, [pc, #216]	@ (800196c <MX_GPIO_Init+0x148>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001896:	4a35      	ldr	r2, [pc, #212]	@ (800196c <MX_GPIO_Init+0x148>)
 8001898:	f043 0308 	orr.w	r3, r3, #8
 800189c:	6313      	str	r3, [r2, #48]	@ 0x30
 800189e:	4b33      	ldr	r3, [pc, #204]	@ (800196c <MX_GPIO_Init+0x148>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a2:	f003 0308 	and.w	r3, r3, #8
 80018a6:	607b      	str	r3, [r7, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	603b      	str	r3, [r7, #0]
 80018ae:	4b2f      	ldr	r3, [pc, #188]	@ (800196c <MX_GPIO_Init+0x148>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	4a2e      	ldr	r2, [pc, #184]	@ (800196c <MX_GPIO_Init+0x148>)
 80018b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ba:	4b2c      	ldr	r3, [pc, #176]	@ (800196c <MX_GPIO_Init+0x148>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018c2:	603b      	str	r3, [r7, #0]
 80018c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80018c6:	2200      	movs	r2, #0
 80018c8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018cc:	4828      	ldr	r0, [pc, #160]	@ (8001970 <MX_GPIO_Init+0x14c>)
 80018ce:	f000 ffe9 	bl	80028a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : KEY2_Pin KEY1_Pin KEY0_Pin */
  GPIO_InitStruct.Pin = KEY2_Pin|KEY1_Pin|KEY0_Pin;
 80018d2:	231c      	movs	r3, #28
 80018d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80018d6:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80018da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018dc:	2301      	movs	r3, #1
 80018de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	4619      	mov	r1, r3
 80018e6:	4823      	ldr	r0, [pc, #140]	@ (8001974 <MX_GPIO_Init+0x150>)
 80018e8:	f000 fe28 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80018ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f2:	2301      	movs	r3, #1
 80018f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fa:	2300      	movs	r3, #0
 80018fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80018fe:	f107 0314 	add.w	r3, r7, #20
 8001902:	4619      	mov	r1, r3
 8001904:	481a      	ldr	r0, [pc, #104]	@ (8001970 <MX_GPIO_Init+0x14c>)
 8001906:	f000 fe19 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_UP_Pin */
  GPIO_InitStruct.Pin = KEY_UP_Pin;
 800190a:	2301      	movs	r3, #1
 800190c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800190e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001912:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001914:	2302      	movs	r3, #2
 8001916:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_UP_GPIO_Port, &GPIO_InitStruct);
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	4619      	mov	r1, r3
 800191e:	4816      	ldr	r0, [pc, #88]	@ (8001978 <MX_GPIO_Init+0x154>)
 8001920:	f000 fe0c 	bl	800253c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001924:	2200      	movs	r2, #0
 8001926:	2100      	movs	r1, #0
 8001928:	2006      	movs	r0, #6
 800192a:	f000 fdd0 	bl	80024ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800192e:	2006      	movs	r0, #6
 8001930:	f000 fde9 	bl	8002506 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001934:	2200      	movs	r2, #0
 8001936:	2100      	movs	r1, #0
 8001938:	2008      	movs	r0, #8
 800193a:	f000 fdc8 	bl	80024ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800193e:	2008      	movs	r0, #8
 8001940:	f000 fde1 	bl	8002506 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001944:	2200      	movs	r2, #0
 8001946:	2100      	movs	r1, #0
 8001948:	2009      	movs	r0, #9
 800194a:	f000 fdc0 	bl	80024ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800194e:	2009      	movs	r0, #9
 8001950:	f000 fdd9 	bl	8002506 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001954:	2200      	movs	r2, #0
 8001956:	2100      	movs	r1, #0
 8001958:	200a      	movs	r0, #10
 800195a:	f000 fdb8 	bl	80024ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800195e:	200a      	movs	r0, #10
 8001960:	f000 fdd1 	bl	8002506 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001964:	bf00      	nop
 8001966:	3728      	adds	r7, #40	@ 0x28
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40023800 	.word	0x40023800
 8001970:	40021400 	.word	0x40021400
 8001974:	40021000 	.word	0x40021000
 8001978:	40020000 	.word	0x40020000

0800197c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b088      	sub	sp, #32
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001982:	1d3b      	adds	r3, r7, #4
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	611a      	str	r2, [r3, #16]
 8001990:	615a      	str	r2, [r3, #20]
 8001992:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001994:	4b27      	ldr	r3, [pc, #156]	@ (8001a34 <MX_FSMC_Init+0xb8>)
 8001996:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 800199a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800199c:	4b25      	ldr	r3, [pc, #148]	@ (8001a34 <MX_FSMC_Init+0xb8>)
 800199e:	4a26      	ldr	r2, [pc, #152]	@ (8001a38 <MX_FSMC_Init+0xbc>)
 80019a0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK4;
 80019a2:	4b24      	ldr	r3, [pc, #144]	@ (8001a34 <MX_FSMC_Init+0xb8>)
 80019a4:	2206      	movs	r2, #6
 80019a6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80019a8:	4b22      	ldr	r3, [pc, #136]	@ (8001a34 <MX_FSMC_Init+0xb8>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80019ae:	4b21      	ldr	r3, [pc, #132]	@ (8001a34 <MX_FSMC_Init+0xb8>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80019b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a34 <MX_FSMC_Init+0xb8>)
 80019b6:	2210      	movs	r2, #16
 80019b8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80019ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001a34 <MX_FSMC_Init+0xb8>)
 80019bc:	2200      	movs	r2, #0
 80019be:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80019c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001a34 <MX_FSMC_Init+0xb8>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80019c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001a34 <MX_FSMC_Init+0xb8>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80019cc:	4b19      	ldr	r3, [pc, #100]	@ (8001a34 <MX_FSMC_Init+0xb8>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80019d2:	4b18      	ldr	r3, [pc, #96]	@ (8001a34 <MX_FSMC_Init+0xb8>)
 80019d4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80019d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80019da:	4b16      	ldr	r3, [pc, #88]	@ (8001a34 <MX_FSMC_Init+0xb8>)
 80019dc:	2200      	movs	r2, #0
 80019de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80019e0:	4b14      	ldr	r3, [pc, #80]	@ (8001a34 <MX_FSMC_Init+0xb8>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80019e6:	4b13      	ldr	r3, [pc, #76]	@ (8001a34 <MX_FSMC_Init+0xb8>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80019ec:	4b11      	ldr	r3, [pc, #68]	@ (8001a34 <MX_FSMC_Init+0xb8>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80019f2:	4b10      	ldr	r3, [pc, #64]	@ (8001a34 <MX_FSMC_Init+0xb8>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 1;
 80019f8:	2301      	movs	r3, #1
 80019fa:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80019fc:	230f      	movs	r3, #15
 80019fe:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 1;
 8001a00:	2301      	movs	r3, #1
 8001a02:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 1;
 8001a04:	2301      	movs	r3, #1
 8001a06:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001a08:	2310      	movs	r3, #16
 8001a0a:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001a0c:	2311      	movs	r3, #17
 8001a0e:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001a14:	1d3b      	adds	r3, r7, #4
 8001a16:	2200      	movs	r2, #0
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4806      	ldr	r0, [pc, #24]	@ (8001a34 <MX_FSMC_Init+0xb8>)
 8001a1c:	f001 fb98 	bl	8003150 <HAL_SRAM_Init>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8001a26:	f000 f809 	bl	8001a3c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001a2a:	bf00      	nop
 8001a2c:	3720      	adds	r7, #32
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000070 	.word	0x20000070
 8001a38:	a0000104 	.word	0xa0000104

08001a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a40:	b672      	cpsid	i
}
 8001a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a44:	bf00      	nop
 8001a46:	e7fd      	b.n	8001a44 <Error_Handler+0x8>

08001a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	607b      	str	r3, [r7, #4]
 8001a52:	4b10      	ldr	r3, [pc, #64]	@ (8001a94 <HAL_MspInit+0x4c>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a56:	4a0f      	ldr	r2, [pc, #60]	@ (8001a94 <HAL_MspInit+0x4c>)
 8001a58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a94 <HAL_MspInit+0x4c>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a66:	607b      	str	r3, [r7, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	603b      	str	r3, [r7, #0]
 8001a6e:	4b09      	ldr	r3, [pc, #36]	@ (8001a94 <HAL_MspInit+0x4c>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a72:	4a08      	ldr	r2, [pc, #32]	@ (8001a94 <HAL_MspInit+0x4c>)
 8001a74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a7a:	4b06      	ldr	r3, [pc, #24]	@ (8001a94 <HAL_MspInit+0x4c>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a82:	603b      	str	r3, [r7, #0]
 8001a84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	40023800 	.word	0x40023800

08001a98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a12      	ldr	r2, [pc, #72]	@ (8001af0 <HAL_TIM_Base_MspInit+0x58>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d11d      	bne.n	8001ae6 <HAL_TIM_Base_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	4b11      	ldr	r3, [pc, #68]	@ (8001af4 <HAL_TIM_Base_MspInit+0x5c>)
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab2:	4a10      	ldr	r2, [pc, #64]	@ (8001af4 <HAL_TIM_Base_MspInit+0x5c>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aba:	4b0e      	ldr	r3, [pc, #56]	@ (8001af4 <HAL_TIM_Base_MspInit+0x5c>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2100      	movs	r1, #0
 8001aca:	2018      	movs	r0, #24
 8001acc:	f000 fcff 	bl	80024ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001ad0:	2018      	movs	r0, #24
 8001ad2:	f000 fd18 	bl	8002506 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2100      	movs	r1, #0
 8001ada:	2019      	movs	r0, #25
 8001adc:	f000 fcf7 	bl	80024ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ae0:	2019      	movs	r0, #25
 8001ae2:	f000 fd10 	bl	8002506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001ae6:	bf00      	nop
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40010000 	.word	0x40010000
 8001af4:	40023800 	.word	0x40023800

08001af8 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001afe:	1d3b      	adds	r3, r7, #4
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001b0c:	4b2c      	ldr	r3, [pc, #176]	@ (8001bc0 <HAL_FSMC_MspInit+0xc8>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d151      	bne.n	8001bb8 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8001b14:	4b2a      	ldr	r3, [pc, #168]	@ (8001bc0 <HAL_FSMC_MspInit+0xc8>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	603b      	str	r3, [r7, #0]
 8001b1e:	4b29      	ldr	r3, [pc, #164]	@ (8001bc4 <HAL_FSMC_MspInit+0xcc>)
 8001b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b22:	4a28      	ldr	r2, [pc, #160]	@ (8001bc4 <HAL_FSMC_MspInit+0xcc>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	6393      	str	r3, [r2, #56]	@ 0x38
 8001b2a:	4b26      	ldr	r3, [pc, #152]	@ (8001bc4 <HAL_FSMC_MspInit+0xcc>)
 8001b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	603b      	str	r3, [r7, #0]
 8001b34:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG12   ------> FSMC_NE4
  */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001b36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b3a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b44:	2303      	movs	r3, #3
 8001b46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001b48:	230c      	movs	r3, #12
 8001b4a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	4619      	mov	r1, r3
 8001b50:	481d      	ldr	r0, [pc, #116]	@ (8001bc8 <HAL_FSMC_MspInit+0xd0>)
 8001b52:	f000 fcf3 	bl	800253c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001b56:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8001b5a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b64:	2303      	movs	r3, #3
 8001b66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001b68:	230c      	movs	r3, #12
 8001b6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b6c:	1d3b      	adds	r3, r7, #4
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4816      	ldr	r0, [pc, #88]	@ (8001bcc <HAL_FSMC_MspInit+0xd4>)
 8001b72:	f000 fce3 	bl	800253c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001b76:	f24c 7333 	movw	r3, #50995	@ 0xc733
 8001b7a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b84:	2303      	movs	r3, #3
 8001b86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001b88:	230c      	movs	r3, #12
 8001b8a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b8c:	1d3b      	adds	r3, r7, #4
 8001b8e:	4619      	mov	r1, r3
 8001b90:	480f      	ldr	r0, [pc, #60]	@ (8001bd0 <HAL_FSMC_MspInit+0xd8>)
 8001b92:	f000 fcd3 	bl	800253c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001b96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b9a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001ba8:	230c      	movs	r3, #12
 8001baa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bac:	1d3b      	adds	r3, r7, #4
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4808      	ldr	r0, [pc, #32]	@ (8001bd4 <HAL_FSMC_MspInit+0xdc>)
 8001bb2:	f000 fcc3 	bl	800253c <HAL_GPIO_Init>
 8001bb6:	e000      	b.n	8001bba <HAL_FSMC_MspInit+0xc2>
    return;
 8001bb8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	200000c8 	.word	0x200000c8
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	40021400 	.word	0x40021400
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	40020c00 	.word	0x40020c00
 8001bd4:	40021800 	.word	0x40021800

08001bd8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001be0:	f7ff ff8a 	bl	8001af8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001be4:	bf00      	nop
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bf0:	bf00      	nop
 8001bf2:	e7fd      	b.n	8001bf0 <NMI_Handler+0x4>

08001bf4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf8:	bf00      	nop
 8001bfa:	e7fd      	b.n	8001bf8 <HardFault_Handler+0x4>

08001bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c00:	bf00      	nop
 8001c02:	e7fd      	b.n	8001c00 <MemManage_Handler+0x4>

08001c04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c08:	bf00      	nop
 8001c0a:	e7fd      	b.n	8001c08 <BusFault_Handler+0x4>

08001c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c10:	bf00      	nop
 8001c12:	e7fd      	b.n	8001c10 <UsageFault_Handler+0x4>

08001c14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c42:	f000 fb25 	bl	8002290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_UP_Pin);
 8001c4e:	2001      	movs	r0, #1
 8001c50:	f000 fe42 	bl	80028d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001c54:	bf00      	nop
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY2_Pin);
 8001c5c:	2004      	movs	r0, #4
 8001c5e:	f000 fe3b 	bl	80028d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY1_Pin);
 8001c6a:	2008      	movs	r0, #8
 8001c6c:	f000 fe34 	bl	80028d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001c70:	bf00      	nop
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY0_Pin);
 8001c78:	2010      	movs	r0, #16
 8001c7a:	f000 fe2d 	bl	80028d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
	...

08001c84 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c88:	4802      	ldr	r0, [pc, #8]	@ (8001c94 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001c8a:	f001 fb69 	bl	8003360 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000028 	.word	0x20000028

08001c98 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c9c:	4802      	ldr	r0, [pc, #8]	@ (8001ca8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001c9e:	f001 fb5f 	bl	8003360 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000028 	.word	0x20000028

08001cac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cb0:	4b06      	ldr	r3, [pc, #24]	@ (8001ccc <SystemInit+0x20>)
 8001cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cb6:	4a05      	ldr	r2, [pc, #20]	@ (8001ccc <SystemInit+0x20>)
 8001cb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <TFT_WriteCmd>:
#include "main.h"
#include "stdio.h"
#include "tftlcd_fonts.h"

void TFT_WriteCmd(uint16_t cmd)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	80fb      	strh	r3, [r7, #6]
    *(__IO uint16_t *)(0x6C000000) = cmd;
 8001cda:	f04f 42d8 	mov.w	r2, #1811939328	@ 0x6c000000
 8001cde:	88fb      	ldrh	r3, [r7, #6]
 8001ce0:	8013      	strh	r3, [r2, #0]
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <TFT_WriteData>:

void TFT_WriteData(uint16_t dat)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	80fb      	strh	r3, [r7, #6]
    *(__IO uint16_t *)(0x6C000080) = dat;
 8001cfa:	4a04      	ldr	r2, [pc, #16]	@ (8001d0c <TFT_WriteData+0x1c>)
 8001cfc:	88fb      	ldrh	r3, [r7, #6]
 8001cfe:	8013      	strh	r3, [r2, #0]
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	6c000080 	.word	0x6c000080

08001d10 <TFT_Init>:
		id |= TFT_ReadData();
		return id;
}

void TFT_Init()
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
	TFT_WriteCmd(0xFF);
 8001d14:	20ff      	movs	r0, #255	@ 0xff
 8001d16:	f7ff ffdb 	bl	8001cd0 <TFT_WriteCmd>
	TFT_WriteCmd(0xFF);
 8001d1a:	20ff      	movs	r0, #255	@ 0xff
 8001d1c:	f7ff ffd8 	bl	8001cd0 <TFT_WriteCmd>
	delay(5);
 8001d20:	2005      	movs	r0, #5
 8001d22:	f000 fad5 	bl	80022d0 <HAL_Delay>

	TFT_WriteCmd(0xFF);
 8001d26:	20ff      	movs	r0, #255	@ 0xff
 8001d28:	f7ff ffd2 	bl	8001cd0 <TFT_WriteCmd>
	TFT_WriteCmd(0xFF);
 8001d2c:	20ff      	movs	r0, #255	@ 0xff
 8001d2e:	f7ff ffcf 	bl	8001cd0 <TFT_WriteCmd>
	TFT_WriteCmd(0xFF);
 8001d32:	20ff      	movs	r0, #255	@ 0xff
 8001d34:	f7ff ffcc 	bl	8001cd0 <TFT_WriteCmd>
	TFT_WriteCmd(0xFF);
 8001d38:	20ff      	movs	r0, #255	@ 0xff
 8001d3a:	f7ff ffc9 	bl	8001cd0 <TFT_WriteCmd>
	delay(10);
 8001d3e:	200a      	movs	r0, #10
 8001d40:	f000 fac6 	bl	80022d0 <HAL_Delay>

	TFT_WriteCmd(0xB0);
 8001d44:	20b0      	movs	r0, #176	@ 0xb0
 8001d46:	f7ff ffc3 	bl	8001cd0 <TFT_WriteCmd>
	TFT_WriteData(0x00);
 8001d4a:	2000      	movs	r0, #0
 8001d4c:	f7ff ffd0 	bl	8001cf0 <TFT_WriteData>

	TFT_WriteCmd(0xB3);
 8001d50:	20b3      	movs	r0, #179	@ 0xb3
 8001d52:	f7ff ffbd 	bl	8001cd0 <TFT_WriteCmd>
	TFT_WriteData(0x02);
 8001d56:	2002      	movs	r0, #2
 8001d58:	f7ff ffca 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(0x00);
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	f7ff ffc7 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(0x00);
 8001d62:	2000      	movs	r0, #0
 8001d64:	f7ff ffc4 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(0x00);
 8001d68:	2000      	movs	r0, #0
 8001d6a:	f7ff ffc1 	bl	8001cf0 <TFT_WriteData>

	TFT_WriteCmd(0xC0);
 8001d6e:	20c0      	movs	r0, #192	@ 0xc0
 8001d70:	f7ff ffae 	bl	8001cd0 <TFT_WriteCmd>
	TFT_WriteData(0x13);
 8001d74:	2013      	movs	r0, #19
 8001d76:	f7ff ffbb 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(0x3B);//480
 8001d7a:	203b      	movs	r0, #59	@ 0x3b
 8001d7c:	f7ff ffb8 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(0x00);
 8001d80:	2000      	movs	r0, #0
 8001d82:	f7ff ffb5 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(0x00);
 8001d86:	2000      	movs	r0, #0
 8001d88:	f7ff ffb2 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(0x00);
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	f7ff ffaf 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(0x01);
 8001d92:	2001      	movs	r0, #1
 8001d94:	f7ff ffac 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(0x00);//NW
 8001d98:	2000      	movs	r0, #0
 8001d9a:	f7ff ffa9 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(0x43);
 8001d9e:	2043      	movs	r0, #67	@ 0x43
 8001da0:	f7ff ffa6 	bl	8001cf0 <TFT_WriteData>

	TFT_WriteCmd(0xC1);
 8001da4:	20c1      	movs	r0, #193	@ 0xc1
 8001da6:	f7ff ff93 	bl	8001cd0 <TFT_WriteCmd>
	TFT_WriteData(0x08);
 8001daa:	2008      	movs	r0, #8
 8001dac:	f7ff ffa0 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(0x1B);//CLOCK
 8001db0:	201b      	movs	r0, #27
 8001db2:	f7ff ff9d 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(0x08);
 8001db6:	2008      	movs	r0, #8
 8001db8:	f7ff ff9a 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(0x08);
 8001dbc:	2008      	movs	r0, #8
 8001dbe:	f7ff ff97 	bl	8001cf0 <TFT_WriteData>

	TFT_WriteCmd(0xC4);
 8001dc2:	20c4      	movs	r0, #196	@ 0xc4
 8001dc4:	f7ff ff84 	bl	8001cd0 <TFT_WriteCmd>
	TFT_WriteData(0x11);
 8001dc8:	2011      	movs	r0, #17
 8001dca:	f7ff ff91 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(0x01);
 8001dce:	2001      	movs	r0, #1
 8001dd0:	f7ff ff8e 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(0x73);
 8001dd4:	2073      	movs	r0, #115	@ 0x73
 8001dd6:	f7ff ff8b 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(0x01);
 8001dda:	2001      	movs	r0, #1
 8001ddc:	f7ff ff88 	bl	8001cf0 <TFT_WriteData>

	TFT_WriteCmd(0xC6);
 8001de0:	20c6      	movs	r0, #198	@ 0xc6
 8001de2:	f7ff ff75 	bl	8001cd0 <TFT_WriteCmd>
	TFT_WriteData(0x00);
 8001de6:	2000      	movs	r0, #0
 8001de8:	f7ff ff82 	bl	8001cf0 <TFT_WriteData>

	TFT_WriteCmd(0xC8);
 8001dec:	20c8      	movs	r0, #200	@ 0xc8
 8001dee:	f7ff ff6f 	bl	8001cd0 <TFT_WriteCmd>
	TFT_WriteData(0x0F);
 8001df2:	200f      	movs	r0, #15
 8001df4:	f7ff ff7c 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(0x05);
 8001df8:	2005      	movs	r0, #5
 8001dfa:	f7ff ff79 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(0x14);
 8001dfe:	2014      	movs	r0, #20
 8001e00:	f7ff ff76 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(0x5C);
 8001e04:	205c      	movs	r0, #92	@ 0x5c
 8001e06:	f7ff ff73 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(0x03);
 8001e0a:	2003      	movs	r0, #3
 8001e0c:	f7ff ff70 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(0x07);
 8001e10:	2007      	movs	r0, #7
 8001e12:	f7ff ff6d 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(0x07);
 8001e16:	2007      	movs	r0, #7
 8001e18:	f7ff ff6a 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(0x10);
 8001e1c:	2010      	movs	r0, #16
 8001e1e:	f7ff ff67 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(0x00);
 8001e22:	2000      	movs	r0, #0
 8001e24:	f7ff ff64 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(0x23);
 8001e28:	2023      	movs	r0, #35	@ 0x23
 8001e2a:	f7ff ff61 	bl	8001cf0 <TFT_WriteData>

	TFT_WriteData(0x10);
 8001e2e:	2010      	movs	r0, #16
 8001e30:	f7ff ff5e 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(0x07);
 8001e34:	2007      	movs	r0, #7
 8001e36:	f7ff ff5b 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(0x07);
 8001e3a:	2007      	movs	r0, #7
 8001e3c:	f7ff ff58 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(0x53);
 8001e40:	2053      	movs	r0, #83	@ 0x53
 8001e42:	f7ff ff55 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(0x0C);
 8001e46:	200c      	movs	r0, #12
 8001e48:	f7ff ff52 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(0x14);
 8001e4c:	2014      	movs	r0, #20
 8001e4e:	f7ff ff4f 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(0x05);
 8001e52:	2005      	movs	r0, #5
 8001e54:	f7ff ff4c 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(0x0F);
 8001e58:	200f      	movs	r0, #15
 8001e5a:	f7ff ff49 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(0x23);
 8001e5e:	2023      	movs	r0, #35	@ 0x23
 8001e60:	f7ff ff46 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(0x00);
 8001e64:	2000      	movs	r0, #0
 8001e66:	f7ff ff43 	bl	8001cf0 <TFT_WriteData>

	TFT_WriteCmd(0x35);
 8001e6a:	2035      	movs	r0, #53	@ 0x35
 8001e6c:	f7ff ff30 	bl	8001cd0 <TFT_WriteCmd>
	TFT_WriteData(0x00);
 8001e70:	2000      	movs	r0, #0
 8001e72:	f7ff ff3d 	bl	8001cf0 <TFT_WriteData>

	TFT_WriteCmd(0x44);
 8001e76:	2044      	movs	r0, #68	@ 0x44
 8001e78:	f7ff ff2a 	bl	8001cd0 <TFT_WriteCmd>
	TFT_WriteData(0x00);
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	f7ff ff37 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(0x01);
 8001e82:	2001      	movs	r0, #1
 8001e84:	f7ff ff34 	bl	8001cf0 <TFT_WriteData>

	TFT_WriteCmd(0xD0);
 8001e88:	20d0      	movs	r0, #208	@ 0xd0
 8001e8a:	f7ff ff21 	bl	8001cd0 <TFT_WriteCmd>
	TFT_WriteData(0x07);
 8001e8e:	2007      	movs	r0, #7
 8001e90:	f7ff ff2e 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(0x07);//VCI1
 8001e94:	2007      	movs	r0, #7
 8001e96:	f7ff ff2b 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(0x1D);//VRH
 8001e9a:	201d      	movs	r0, #29
 8001e9c:	f7ff ff28 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(0x03);//BT
 8001ea0:	2003      	movs	r0, #3
 8001ea2:	f7ff ff25 	bl	8001cf0 <TFT_WriteData>

	TFT_WriteCmd(0xD1);
 8001ea6:	20d1      	movs	r0, #209	@ 0xd1
 8001ea8:	f7ff ff12 	bl	8001cd0 <TFT_WriteCmd>
	TFT_WriteData(0x03);
 8001eac:	2003      	movs	r0, #3
 8001eae:	f7ff ff1f 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(0x5B);//VCM
 8001eb2:	205b      	movs	r0, #91	@ 0x5b
 8001eb4:	f7ff ff1c 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(0x10);//VDV
 8001eb8:	2010      	movs	r0, #16
 8001eba:	f7ff ff19 	bl	8001cf0 <TFT_WriteData>

	TFT_WriteCmd(0xD2);
 8001ebe:	20d2      	movs	r0, #210	@ 0xd2
 8001ec0:	f7ff ff06 	bl	8001cd0 <TFT_WriteCmd>
	TFT_WriteData(0x03);
 8001ec4:	2003      	movs	r0, #3
 8001ec6:	f7ff ff13 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(0x24);
 8001eca:	2024      	movs	r0, #36	@ 0x24
 8001ecc:	f7ff ff10 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(0x04);
 8001ed0:	2004      	movs	r0, #4
 8001ed2:	f7ff ff0d 	bl	8001cf0 <TFT_WriteData>

	TFT_WriteCmd(0x2A);
 8001ed6:	202a      	movs	r0, #42	@ 0x2a
 8001ed8:	f7ff fefa 	bl	8001cd0 <TFT_WriteCmd>
	TFT_WriteData(0x00);
 8001edc:	2000      	movs	r0, #0
 8001ede:	f7ff ff07 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(0x00);
 8001ee2:	2000      	movs	r0, #0
 8001ee4:	f7ff ff04 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(0x01);
 8001ee8:	2001      	movs	r0, #1
 8001eea:	f7ff ff01 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(0x3F);//320
 8001eee:	203f      	movs	r0, #63	@ 0x3f
 8001ef0:	f7ff fefe 	bl	8001cf0 <TFT_WriteData>

	TFT_WriteCmd(0x2B);
 8001ef4:	202b      	movs	r0, #43	@ 0x2b
 8001ef6:	f7ff feeb 	bl	8001cd0 <TFT_WriteCmd>
	TFT_WriteData(0x00);
 8001efa:	2000      	movs	r0, #0
 8001efc:	f7ff fef8 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(0x00);
 8001f00:	2000      	movs	r0, #0
 8001f02:	f7ff fef5 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(0x01);
 8001f06:	2001      	movs	r0, #1
 8001f08:	f7ff fef2 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(0xDF);//480
 8001f0c:	20df      	movs	r0, #223	@ 0xdf
 8001f0e:	f7ff feef 	bl	8001cf0 <TFT_WriteData>

	TFT_WriteCmd(0x36);
 8001f12:	2036      	movs	r0, #54	@ 0x36
 8001f14:	f7ff fedc 	bl	8001cd0 <TFT_WriteCmd>
	TFT_WriteData(0x00);
 8001f18:	2000      	movs	r0, #0
 8001f1a:	f7ff fee9 	bl	8001cf0 <TFT_WriteData>

	TFT_WriteCmd(0xC0);
 8001f1e:	20c0      	movs	r0, #192	@ 0xc0
 8001f20:	f7ff fed6 	bl	8001cd0 <TFT_WriteCmd>
	TFT_WriteData(0x13);
 8001f24:	2013      	movs	r0, #19
 8001f26:	f7ff fee3 	bl	8001cf0 <TFT_WriteData>

	TFT_WriteCmd(0x3A);
 8001f2a:	203a      	movs	r0, #58	@ 0x3a
 8001f2c:	f7ff fed0 	bl	8001cd0 <TFT_WriteCmd>
	TFT_WriteData(0x55);
 8001f30:	2055      	movs	r0, #85	@ 0x55
 8001f32:	f7ff fedd 	bl	8001cf0 <TFT_WriteData>

	TFT_WriteCmd(0x11);
 8001f36:	2011      	movs	r0, #17
 8001f38:	f7ff feca 	bl	8001cd0 <TFT_WriteCmd>
	delay(150);
 8001f3c:	2096      	movs	r0, #150	@ 0x96
 8001f3e:	f000 f9c7 	bl	80022d0 <HAL_Delay>

	TFT_WriteCmd(0x29);
 8001f42:	2029      	movs	r0, #41	@ 0x29
 8001f44:	f7ff fec4 	bl	8001cd0 <TFT_WriteCmd>
	delay(30);
 8001f48:	201e      	movs	r0, #30
 8001f4a:	f000 f9c1 	bl	80022d0 <HAL_Delay>

	TFT_WriteCmd(0x2C);
 8001f4e:	202c      	movs	r0, #44	@ 0x2c
 8001f50:	f7ff febe 	bl	8001cd0 <TFT_WriteCmd>
}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <TFT_WriteData_Color>:
	TFT_WriteCmd(cmd);
	TFT_WriteData(data);
}

void TFT_WriteData_Color(uint16_t color)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	80fb      	strh	r3, [r7, #6]
	TFT_WriteData(color);
 8001f62:	88fb      	ldrh	r3, [r7, #6]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff fec3 	bl	8001cf0 <TFT_WriteData>
}
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <TFT_Clear>:

void TFT_Clear(uint16_t color)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b084      	sub	sp, #16
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	4603      	mov	r3, r0
 8001f7a:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j ;

	TFT_Set_Window(0, 0, WIDTH-1,HEIGHT-1);
 8001f7c:	f240 13df 	movw	r3, #479	@ 0x1df
 8001f80:	f240 123f 	movw	r2, #319	@ 0x13f
 8001f84:	2100      	movs	r1, #0
 8001f86:	2000      	movs	r0, #0
 8001f88:	f000 f81d 	bl	8001fc6 <TFT_Set_Window>
  	for(i=0; i<WIDTH; i++)
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	81fb      	strh	r3, [r7, #14]
 8001f90:	e010      	b.n	8001fb4 <TFT_Clear+0x42>
	{
		for (j=0; j<HEIGHT; j++)
 8001f92:	2300      	movs	r3, #0
 8001f94:	81bb      	strh	r3, [r7, #12]
 8001f96:	e006      	b.n	8001fa6 <TFT_Clear+0x34>
		{
			TFT_WriteData_Color(color);
 8001f98:	88fb      	ldrh	r3, [r7, #6]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff ffdc 	bl	8001f58 <TFT_WriteData_Color>
		for (j=0; j<HEIGHT; j++)
 8001fa0:	89bb      	ldrh	r3, [r7, #12]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	81bb      	strh	r3, [r7, #12]
 8001fa6:	89bb      	ldrh	r3, [r7, #12]
 8001fa8:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8001fac:	d3f4      	bcc.n	8001f98 <TFT_Clear+0x26>
  	for(i=0; i<WIDTH; i++)
 8001fae:	89fb      	ldrh	r3, [r7, #14]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	81fb      	strh	r3, [r7, #14]
 8001fb4:	89fb      	ldrh	r3, [r7, #14]
 8001fb6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001fba:	d3ea      	bcc.n	8001f92 <TFT_Clear+0x20>
		}
	}
}
 8001fbc:	bf00      	nop
 8001fbe:	bf00      	nop
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <TFT_Set_Window>:

void TFT_Set_Window(uint16_t sx,uint16_t sy,uint16_t width,uint16_t height)
{
 8001fc6:	b590      	push	{r4, r7, lr}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	4604      	mov	r4, r0
 8001fce:	4608      	mov	r0, r1
 8001fd0:	4611      	mov	r1, r2
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	4623      	mov	r3, r4
 8001fd6:	80fb      	strh	r3, [r7, #6]
 8001fd8:	4603      	mov	r3, r0
 8001fda:	80bb      	strh	r3, [r7, #4]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	807b      	strh	r3, [r7, #2]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	803b      	strh	r3, [r7, #0]
	TFT_WriteCmd(0x2A);
 8001fe4:	202a      	movs	r0, #42	@ 0x2a
 8001fe6:	f7ff fe73 	bl	8001cd0 <TFT_WriteCmd>
	TFT_WriteData(sx/256);
 8001fea:	88fb      	ldrh	r3, [r7, #6]
 8001fec:	0a1b      	lsrs	r3, r3, #8
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff fe7d 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(sx%256);
 8001ff6:	88fb      	ldrh	r3, [r7, #6]
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff fe77 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(width/256);
 8002002:	887b      	ldrh	r3, [r7, #2]
 8002004:	0a1b      	lsrs	r3, r3, #8
 8002006:	b29b      	uxth	r3, r3
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff fe71 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(width%256);
 800200e:	887b      	ldrh	r3, [r7, #2]
 8002010:	b2db      	uxtb	r3, r3
 8002012:	b29b      	uxth	r3, r3
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff fe6b 	bl	8001cf0 <TFT_WriteData>

	TFT_WriteCmd(0x2B);
 800201a:	202b      	movs	r0, #43	@ 0x2b
 800201c:	f7ff fe58 	bl	8001cd0 <TFT_WriteCmd>
	TFT_WriteData(sy/256);
 8002020:	88bb      	ldrh	r3, [r7, #4]
 8002022:	0a1b      	lsrs	r3, r3, #8
 8002024:	b29b      	uxth	r3, r3
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff fe62 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(sy%256);
 800202c:	88bb      	ldrh	r3, [r7, #4]
 800202e:	b2db      	uxtb	r3, r3
 8002030:	b29b      	uxth	r3, r3
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff fe5c 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(height/256);
 8002038:	883b      	ldrh	r3, [r7, #0]
 800203a:	0a1b      	lsrs	r3, r3, #8
 800203c:	b29b      	uxth	r3, r3
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff fe56 	bl	8001cf0 <TFT_WriteData>
	TFT_WriteData(height%256);
 8002044:	883b      	ldrh	r3, [r7, #0]
 8002046:	b2db      	uxtb	r3, r3
 8002048:	b29b      	uxth	r3, r3
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff fe50 	bl	8001cf0 <TFT_WriteData>

	TFT_WriteCmd(0x2C);
 8002050:	202c      	movs	r0, #44	@ 0x2c
 8002052:	f7ff fe3d 	bl	8001cd0 <TFT_WriteCmd>
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	bd90      	pop	{r4, r7, pc}

0800205e <TFT_DrawPoint>:

void TFT_DrawPoint(uint16_t x,uint16_t y,uint16_t color)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	4603      	mov	r3, r0
 8002066:	80fb      	strh	r3, [r7, #6]
 8002068:	460b      	mov	r3, r1
 800206a:	80bb      	strh	r3, [r7, #4]
 800206c:	4613      	mov	r3, r2
 800206e:	807b      	strh	r3, [r7, #2]
#ifdef HEIGHT_AS_WIDTH
	TFT_Set_Window(y, HEIGHT - x ,1, 1);
	TFT_WriteData_Color(color);
#else
	TFT_Set_Window(x, y,x, y);
 8002070:	88bb      	ldrh	r3, [r7, #4]
 8002072:	88fa      	ldrh	r2, [r7, #6]
 8002074:	88b9      	ldrh	r1, [r7, #4]
 8002076:	88f8      	ldrh	r0, [r7, #6]
 8002078:	f7ff ffa5 	bl	8001fc6 <TFT_Set_Window>
	TFT_WriteData_Color(color);
 800207c:	887b      	ldrh	r3, [r7, #2]
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff ff6a 	bl	8001f58 <TFT_WriteData_Color>
#endif
}
 8002084:	bf00      	nop
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <TFT_DrawLine>:
  TFT_DrawLine(0,HEIGHT /2,WIDTH,HEIGHT/2,0xFFFF);
  TFT_DrawLine(WIDTH/2,0,WIDTH/2,HEIGHT,0xFFFF);
}

void TFT_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,uint16_t color)
{
 800208c:	b590      	push	{r4, r7, lr}
 800208e:	b08d      	sub	sp, #52	@ 0x34
 8002090:	af00      	add	r7, sp, #0
 8002092:	4604      	mov	r4, r0
 8002094:	4608      	mov	r0, r1
 8002096:	4611      	mov	r1, r2
 8002098:	461a      	mov	r2, r3
 800209a:	4623      	mov	r3, r4
 800209c:	80fb      	strh	r3, [r7, #6]
 800209e:	4603      	mov	r3, r0
 80020a0:	80bb      	strh	r3, [r7, #4]
 80020a2:	460b      	mov	r3, r1
 80020a4:	807b      	strh	r3, [r7, #2]
 80020a6:	4613      	mov	r3, r2
 80020a8:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 80020aa:	2300      	movs	r3, #0
 80020ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020ae:	2300      	movs	r3, #0
 80020b0:	627b      	str	r3, [r7, #36]	@ 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1; //计算坐标增量
 80020b2:	887a      	ldrh	r2, [r7, #2]
 80020b4:	88fb      	ldrh	r3, [r7, #6]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 80020ba:	883a      	ldrh	r2, [r7, #0]
 80020bc:	88bb      	ldrh	r3, [r7, #4]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 80020c2:	88fb      	ldrh	r3, [r7, #6]
 80020c4:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 80020c6:	88bb      	ldrh	r3, [r7, #4]
 80020c8:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1; //设置单步方向
 80020ca:	6a3b      	ldr	r3, [r7, #32]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	dd02      	ble.n	80020d6 <TFT_DrawLine+0x4a>
 80020d0:	2301      	movs	r3, #1
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	e00b      	b.n	80020ee <TFT_DrawLine+0x62>
	else if(delta_x==0)incx=0;//垂直线
 80020d6:	6a3b      	ldr	r3, [r7, #32]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d102      	bne.n	80020e2 <TFT_DrawLine+0x56>
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
 80020e0:	e005      	b.n	80020ee <TFT_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 80020e2:	f04f 33ff 	mov.w	r3, #4294967295
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	6a3b      	ldr	r3, [r7, #32]
 80020ea:	425b      	negs	r3, r3
 80020ec:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	dd02      	ble.n	80020fa <TFT_DrawLine+0x6e>
 80020f4:	2301      	movs	r3, #1
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	e00b      	b.n	8002112 <TFT_DrawLine+0x86>
	else if(delta_y==0)incy=0;//水平线
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d102      	bne.n	8002106 <TFT_DrawLine+0x7a>
 8002100:	2300      	movs	r3, #0
 8002102:	613b      	str	r3, [r7, #16]
 8002104:	e005      	b.n	8002112 <TFT_DrawLine+0x86>
	else{incy=-1;delta_y=-delta_y;}
 8002106:	f04f 33ff 	mov.w	r3, #4294967295
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	425b      	negs	r3, r3
 8002110:	61fb      	str	r3, [r7, #28]
	if( delta_x>delta_y)distance=delta_x; //选取基本增量坐标轴
 8002112:	6a3a      	ldr	r2, [r7, #32]
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	429a      	cmp	r2, r3
 8002118:	dd02      	ble.n	8002120 <TFT_DrawLine+0x94>
 800211a:	6a3b      	ldr	r3, [r7, #32]
 800211c:	61bb      	str	r3, [r7, #24]
 800211e:	e001      	b.n	8002124 <TFT_DrawLine+0x98>
	else distance=delta_y;
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	61bb      	str	r3, [r7, #24]
	for(t=0;t<=distance+1;t++ )//画线输出
 8002124:	2300      	movs	r3, #0
 8002126:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8002128:	e02b      	b.n	8002182 <TFT_DrawLine+0xf6>
	{
		TFT_DrawPoint(uRow,uCol,color);//画点
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	b29b      	uxth	r3, r3
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	b291      	uxth	r1, r2
 8002132:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff ff91 	bl	800205e <TFT_DrawPoint>
		xerr+=delta_x ;
 800213c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800213e:	6a3b      	ldr	r3, [r7, #32]
 8002140:	4413      	add	r3, r2
 8002142:	62bb      	str	r3, [r7, #40]	@ 0x28
		yerr+=delta_y ;
 8002144:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	4413      	add	r3, r2
 800214a:	627b      	str	r3, [r7, #36]	@ 0x24
		if(xerr>distance)
 800214c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	429a      	cmp	r2, r3
 8002152:	dd07      	ble.n	8002164 <TFT_DrawLine+0xd8>
		{
			xerr-=distance;
 8002154:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	62bb      	str	r3, [r7, #40]	@ 0x28
			uRow+=incx;
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	4413      	add	r3, r2
 8002162:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 8002164:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	429a      	cmp	r2, r3
 800216a:	dd07      	ble.n	800217c <TFT_DrawLine+0xf0>
		{
			yerr-=distance;
 800216c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	627b      	str	r3, [r7, #36]	@ 0x24
			uCol+=incy;
 8002174:	68ba      	ldr	r2, [r7, #8]
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4413      	add	r3, r2
 800217a:	60bb      	str	r3, [r7, #8]
	for(t=0;t<=distance+1;t++ )//画线输出
 800217c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800217e:	3301      	adds	r3, #1
 8002180:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8002182:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	3301      	adds	r3, #1
 8002188:	429a      	cmp	r2, r3
 800218a:	ddce      	ble.n	800212a <TFT_DrawLine+0x9e>
		}
	}
}
 800218c:	bf00      	nop
 800218e:	bf00      	nop
 8002190:	3734      	adds	r7, #52	@ 0x34
 8002192:	46bd      	mov	sp, r7
 8002194:	bd90      	pop	{r4, r7, pc}
	...

08002198 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002198:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021d0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800219c:	f7ff fd86 	bl	8001cac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021a0:	480c      	ldr	r0, [pc, #48]	@ (80021d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021a2:	490d      	ldr	r1, [pc, #52]	@ (80021d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021a4:	4a0d      	ldr	r2, [pc, #52]	@ (80021dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021a8:	e002      	b.n	80021b0 <LoopCopyDataInit>

080021aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ae:	3304      	adds	r3, #4

080021b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021b4:	d3f9      	bcc.n	80021aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021b6:	4a0a      	ldr	r2, [pc, #40]	@ (80021e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021b8:	4c0a      	ldr	r4, [pc, #40]	@ (80021e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021bc:	e001      	b.n	80021c2 <LoopFillZerobss>

080021be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021c0:	3204      	adds	r2, #4

080021c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021c4:	d3fb      	bcc.n	80021be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021c6:	f001 fd61 	bl	8003c8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021ca:	f7ff fa67 	bl	800169c <main>
  bx  lr    
 80021ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80021d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80021dc:	08004f48 	.word	0x08004f48
  ldr r2, =_sbss
 80021e0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80021e4:	200000d0 	.word	0x200000d0

080021e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021e8:	e7fe      	b.n	80021e8 <ADC_IRQHandler>
	...

080021ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021f0:	4b0e      	ldr	r3, [pc, #56]	@ (800222c <HAL_Init+0x40>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a0d      	ldr	r2, [pc, #52]	@ (800222c <HAL_Init+0x40>)
 80021f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021fc:	4b0b      	ldr	r3, [pc, #44]	@ (800222c <HAL_Init+0x40>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a0a      	ldr	r2, [pc, #40]	@ (800222c <HAL_Init+0x40>)
 8002202:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002206:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002208:	4b08      	ldr	r3, [pc, #32]	@ (800222c <HAL_Init+0x40>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a07      	ldr	r2, [pc, #28]	@ (800222c <HAL_Init+0x40>)
 800220e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002212:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002214:	2003      	movs	r0, #3
 8002216:	f000 f94f 	bl	80024b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800221a:	200f      	movs	r0, #15
 800221c:	f000 f808 	bl	8002230 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002220:	f7ff fc12 	bl	8001a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40023c00 	.word	0x40023c00

08002230 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002238:	4b12      	ldr	r3, [pc, #72]	@ (8002284 <HAL_InitTick+0x54>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4b12      	ldr	r3, [pc, #72]	@ (8002288 <HAL_InitTick+0x58>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	4619      	mov	r1, r3
 8002242:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002246:	fbb3 f3f1 	udiv	r3, r3, r1
 800224a:	fbb2 f3f3 	udiv	r3, r2, r3
 800224e:	4618      	mov	r0, r3
 8002250:	f000 f967 	bl	8002522 <HAL_SYSTICK_Config>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e00e      	b.n	800227c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b0f      	cmp	r3, #15
 8002262:	d80a      	bhi.n	800227a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002264:	2200      	movs	r2, #0
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	f04f 30ff 	mov.w	r0, #4294967295
 800226c:	f000 f92f 	bl	80024ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002270:	4a06      	ldr	r2, [pc, #24]	@ (800228c <HAL_InitTick+0x5c>)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002276:	2300      	movs	r3, #0
 8002278:	e000      	b.n	800227c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
}
 800227c:	4618      	mov	r0, r3
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20000000 	.word	0x20000000
 8002288:	20000008 	.word	0x20000008
 800228c:	20000004 	.word	0x20000004

08002290 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002294:	4b06      	ldr	r3, [pc, #24]	@ (80022b0 <HAL_IncTick+0x20>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	461a      	mov	r2, r3
 800229a:	4b06      	ldr	r3, [pc, #24]	@ (80022b4 <HAL_IncTick+0x24>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4413      	add	r3, r2
 80022a0:	4a04      	ldr	r2, [pc, #16]	@ (80022b4 <HAL_IncTick+0x24>)
 80022a2:	6013      	str	r3, [r2, #0]
}
 80022a4:	bf00      	nop
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	20000008 	.word	0x20000008
 80022b4:	200000cc 	.word	0x200000cc

080022b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return uwTick;
 80022bc:	4b03      	ldr	r3, [pc, #12]	@ (80022cc <HAL_GetTick+0x14>)
 80022be:	681b      	ldr	r3, [r3, #0]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	200000cc 	.word	0x200000cc

080022d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022d8:	f7ff ffee 	bl	80022b8 <HAL_GetTick>
 80022dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e8:	d005      	beq.n	80022f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002314 <HAL_Delay+0x44>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	461a      	mov	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4413      	add	r3, r2
 80022f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022f6:	bf00      	nop
 80022f8:	f7ff ffde 	bl	80022b8 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	429a      	cmp	r2, r3
 8002306:	d8f7      	bhi.n	80022f8 <HAL_Delay+0x28>
  {
  }
}
 8002308:	bf00      	nop
 800230a:	bf00      	nop
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	20000008 	.word	0x20000008

08002318 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002328:	4b0c      	ldr	r3, [pc, #48]	@ (800235c <__NVIC_SetPriorityGrouping+0x44>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002334:	4013      	ands	r3, r2
 8002336:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002340:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002344:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002348:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800234a:	4a04      	ldr	r2, [pc, #16]	@ (800235c <__NVIC_SetPriorityGrouping+0x44>)
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	60d3      	str	r3, [r2, #12]
}
 8002350:	bf00      	nop
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002364:	4b04      	ldr	r3, [pc, #16]	@ (8002378 <__NVIC_GetPriorityGrouping+0x18>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	0a1b      	lsrs	r3, r3, #8
 800236a:	f003 0307 	and.w	r3, r3, #7
}
 800236e:	4618      	mov	r0, r3
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238a:	2b00      	cmp	r3, #0
 800238c:	db0b      	blt.n	80023a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800238e:	79fb      	ldrb	r3, [r7, #7]
 8002390:	f003 021f 	and.w	r2, r3, #31
 8002394:	4907      	ldr	r1, [pc, #28]	@ (80023b4 <__NVIC_EnableIRQ+0x38>)
 8002396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239a:	095b      	lsrs	r3, r3, #5
 800239c:	2001      	movs	r0, #1
 800239e:	fa00 f202 	lsl.w	r2, r0, r2
 80023a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	e000e100 	.word	0xe000e100

080023b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	6039      	str	r1, [r7, #0]
 80023c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	db0a      	blt.n	80023e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	490c      	ldr	r1, [pc, #48]	@ (8002404 <__NVIC_SetPriority+0x4c>)
 80023d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d6:	0112      	lsls	r2, r2, #4
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	440b      	add	r3, r1
 80023dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023e0:	e00a      	b.n	80023f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	4908      	ldr	r1, [pc, #32]	@ (8002408 <__NVIC_SetPriority+0x50>)
 80023e8:	79fb      	ldrb	r3, [r7, #7]
 80023ea:	f003 030f 	and.w	r3, r3, #15
 80023ee:	3b04      	subs	r3, #4
 80023f0:	0112      	lsls	r2, r2, #4
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	440b      	add	r3, r1
 80023f6:	761a      	strb	r2, [r3, #24]
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	e000e100 	.word	0xe000e100
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800240c:	b480      	push	{r7}
 800240e:	b089      	sub	sp, #36	@ 0x24
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	f1c3 0307 	rsb	r3, r3, #7
 8002426:	2b04      	cmp	r3, #4
 8002428:	bf28      	it	cs
 800242a:	2304      	movcs	r3, #4
 800242c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3304      	adds	r3, #4
 8002432:	2b06      	cmp	r3, #6
 8002434:	d902      	bls.n	800243c <NVIC_EncodePriority+0x30>
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	3b03      	subs	r3, #3
 800243a:	e000      	b.n	800243e <NVIC_EncodePriority+0x32>
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002440:	f04f 32ff 	mov.w	r2, #4294967295
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43da      	mvns	r2, r3
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	401a      	ands	r2, r3
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002454:	f04f 31ff 	mov.w	r1, #4294967295
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	fa01 f303 	lsl.w	r3, r1, r3
 800245e:	43d9      	mvns	r1, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002464:	4313      	orrs	r3, r2
         );
}
 8002466:	4618      	mov	r0, r3
 8002468:	3724      	adds	r7, #36	@ 0x24
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
	...

08002474 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3b01      	subs	r3, #1
 8002480:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002484:	d301      	bcc.n	800248a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002486:	2301      	movs	r3, #1
 8002488:	e00f      	b.n	80024aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800248a:	4a0a      	ldr	r2, [pc, #40]	@ (80024b4 <SysTick_Config+0x40>)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3b01      	subs	r3, #1
 8002490:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002492:	210f      	movs	r1, #15
 8002494:	f04f 30ff 	mov.w	r0, #4294967295
 8002498:	f7ff ff8e 	bl	80023b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800249c:	4b05      	ldr	r3, [pc, #20]	@ (80024b4 <SysTick_Config+0x40>)
 800249e:	2200      	movs	r2, #0
 80024a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024a2:	4b04      	ldr	r3, [pc, #16]	@ (80024b4 <SysTick_Config+0x40>)
 80024a4:	2207      	movs	r2, #7
 80024a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	e000e010 	.word	0xe000e010

080024b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7ff ff29 	bl	8002318 <__NVIC_SetPriorityGrouping>
}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b086      	sub	sp, #24
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	4603      	mov	r3, r0
 80024d6:	60b9      	str	r1, [r7, #8]
 80024d8:	607a      	str	r2, [r7, #4]
 80024da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024e0:	f7ff ff3e 	bl	8002360 <__NVIC_GetPriorityGrouping>
 80024e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	68b9      	ldr	r1, [r7, #8]
 80024ea:	6978      	ldr	r0, [r7, #20]
 80024ec:	f7ff ff8e 	bl	800240c <NVIC_EncodePriority>
 80024f0:	4602      	mov	r2, r0
 80024f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024f6:	4611      	mov	r1, r2
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff ff5d 	bl	80023b8 <__NVIC_SetPriority>
}
 80024fe:	bf00      	nop
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b082      	sub	sp, #8
 800250a:	af00      	add	r7, sp, #0
 800250c:	4603      	mov	r3, r0
 800250e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff ff31 	bl	800237c <__NVIC_EnableIRQ>
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b082      	sub	sp, #8
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7ff ffa2 	bl	8002474 <SysTick_Config>
 8002530:	4603      	mov	r3, r0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800253c:	b480      	push	{r7}
 800253e:	b089      	sub	sp, #36	@ 0x24
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800254a:	2300      	movs	r3, #0
 800254c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800254e:	2300      	movs	r3, #0
 8002550:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002552:	2300      	movs	r3, #0
 8002554:	61fb      	str	r3, [r7, #28]
 8002556:	e16b      	b.n	8002830 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002558:	2201      	movs	r2, #1
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	4013      	ands	r3, r2
 800256a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	429a      	cmp	r2, r3
 8002572:	f040 815a 	bne.w	800282a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f003 0303 	and.w	r3, r3, #3
 800257e:	2b01      	cmp	r3, #1
 8002580:	d005      	beq.n	800258e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800258a:	2b02      	cmp	r3, #2
 800258c:	d130      	bne.n	80025f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	2203      	movs	r2, #3
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	43db      	mvns	r3, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4013      	ands	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	68da      	ldr	r2, [r3, #12]
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025c4:	2201      	movs	r2, #1
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4013      	ands	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	091b      	lsrs	r3, r3, #4
 80025da:	f003 0201 	and.w	r2, r3, #1
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f003 0303 	and.w	r3, r3, #3
 80025f8:	2b03      	cmp	r3, #3
 80025fa:	d017      	beq.n	800262c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	2203      	movs	r2, #3
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4313      	orrs	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 0303 	and.w	r3, r3, #3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d123      	bne.n	8002680 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	08da      	lsrs	r2, r3, #3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3208      	adds	r2, #8
 8002640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002644:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	220f      	movs	r2, #15
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4013      	ands	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	691a      	ldr	r2, [r3, #16]
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	08da      	lsrs	r2, r3, #3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	3208      	adds	r2, #8
 800267a:	69b9      	ldr	r1, [r7, #24]
 800267c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	2203      	movs	r2, #3
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 0203 	and.w	r2, r3, #3
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 80b4 	beq.w	800282a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	4b60      	ldr	r3, [pc, #384]	@ (8002848 <HAL_GPIO_Init+0x30c>)
 80026c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ca:	4a5f      	ldr	r2, [pc, #380]	@ (8002848 <HAL_GPIO_Init+0x30c>)
 80026cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80026d2:	4b5d      	ldr	r3, [pc, #372]	@ (8002848 <HAL_GPIO_Init+0x30c>)
 80026d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026de:	4a5b      	ldr	r2, [pc, #364]	@ (800284c <HAL_GPIO_Init+0x310>)
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	089b      	lsrs	r3, r3, #2
 80026e4:	3302      	adds	r3, #2
 80026e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	220f      	movs	r2, #15
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	43db      	mvns	r3, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4013      	ands	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a52      	ldr	r2, [pc, #328]	@ (8002850 <HAL_GPIO_Init+0x314>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d02b      	beq.n	8002762 <HAL_GPIO_Init+0x226>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a51      	ldr	r2, [pc, #324]	@ (8002854 <HAL_GPIO_Init+0x318>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d025      	beq.n	800275e <HAL_GPIO_Init+0x222>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a50      	ldr	r2, [pc, #320]	@ (8002858 <HAL_GPIO_Init+0x31c>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d01f      	beq.n	800275a <HAL_GPIO_Init+0x21e>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a4f      	ldr	r2, [pc, #316]	@ (800285c <HAL_GPIO_Init+0x320>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d019      	beq.n	8002756 <HAL_GPIO_Init+0x21a>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a4e      	ldr	r2, [pc, #312]	@ (8002860 <HAL_GPIO_Init+0x324>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d013      	beq.n	8002752 <HAL_GPIO_Init+0x216>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a4d      	ldr	r2, [pc, #308]	@ (8002864 <HAL_GPIO_Init+0x328>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d00d      	beq.n	800274e <HAL_GPIO_Init+0x212>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a4c      	ldr	r2, [pc, #304]	@ (8002868 <HAL_GPIO_Init+0x32c>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d007      	beq.n	800274a <HAL_GPIO_Init+0x20e>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a4b      	ldr	r2, [pc, #300]	@ (800286c <HAL_GPIO_Init+0x330>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d101      	bne.n	8002746 <HAL_GPIO_Init+0x20a>
 8002742:	2307      	movs	r3, #7
 8002744:	e00e      	b.n	8002764 <HAL_GPIO_Init+0x228>
 8002746:	2308      	movs	r3, #8
 8002748:	e00c      	b.n	8002764 <HAL_GPIO_Init+0x228>
 800274a:	2306      	movs	r3, #6
 800274c:	e00a      	b.n	8002764 <HAL_GPIO_Init+0x228>
 800274e:	2305      	movs	r3, #5
 8002750:	e008      	b.n	8002764 <HAL_GPIO_Init+0x228>
 8002752:	2304      	movs	r3, #4
 8002754:	e006      	b.n	8002764 <HAL_GPIO_Init+0x228>
 8002756:	2303      	movs	r3, #3
 8002758:	e004      	b.n	8002764 <HAL_GPIO_Init+0x228>
 800275a:	2302      	movs	r3, #2
 800275c:	e002      	b.n	8002764 <HAL_GPIO_Init+0x228>
 800275e:	2301      	movs	r3, #1
 8002760:	e000      	b.n	8002764 <HAL_GPIO_Init+0x228>
 8002762:	2300      	movs	r3, #0
 8002764:	69fa      	ldr	r2, [r7, #28]
 8002766:	f002 0203 	and.w	r2, r2, #3
 800276a:	0092      	lsls	r2, r2, #2
 800276c:	4093      	lsls	r3, r2
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4313      	orrs	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002774:	4935      	ldr	r1, [pc, #212]	@ (800284c <HAL_GPIO_Init+0x310>)
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	089b      	lsrs	r3, r3, #2
 800277a:	3302      	adds	r3, #2
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002782:	4b3b      	ldr	r3, [pc, #236]	@ (8002870 <HAL_GPIO_Init+0x334>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	43db      	mvns	r3, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4013      	ands	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027a6:	4a32      	ldr	r2, [pc, #200]	@ (8002870 <HAL_GPIO_Init+0x334>)
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027ac:	4b30      	ldr	r3, [pc, #192]	@ (8002870 <HAL_GPIO_Init+0x334>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	43db      	mvns	r3, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d003      	beq.n	80027d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027d0:	4a27      	ldr	r2, [pc, #156]	@ (8002870 <HAL_GPIO_Init+0x334>)
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027d6:	4b26      	ldr	r3, [pc, #152]	@ (8002870 <HAL_GPIO_Init+0x334>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	43db      	mvns	r3, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4013      	ands	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027fa:	4a1d      	ldr	r2, [pc, #116]	@ (8002870 <HAL_GPIO_Init+0x334>)
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002800:	4b1b      	ldr	r3, [pc, #108]	@ (8002870 <HAL_GPIO_Init+0x334>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	43db      	mvns	r3, r3
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4013      	ands	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d003      	beq.n	8002824 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	4313      	orrs	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002824:	4a12      	ldr	r2, [pc, #72]	@ (8002870 <HAL_GPIO_Init+0x334>)
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	3301      	adds	r3, #1
 800282e:	61fb      	str	r3, [r7, #28]
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	2b0f      	cmp	r3, #15
 8002834:	f67f ae90 	bls.w	8002558 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002838:	bf00      	nop
 800283a:	bf00      	nop
 800283c:	3724      	adds	r7, #36	@ 0x24
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	40023800 	.word	0x40023800
 800284c:	40013800 	.word	0x40013800
 8002850:	40020000 	.word	0x40020000
 8002854:	40020400 	.word	0x40020400
 8002858:	40020800 	.word	0x40020800
 800285c:	40020c00 	.word	0x40020c00
 8002860:	40021000 	.word	0x40021000
 8002864:	40021400 	.word	0x40021400
 8002868:	40021800 	.word	0x40021800
 800286c:	40021c00 	.word	0x40021c00
 8002870:	40013c00 	.word	0x40013c00

08002874 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	460b      	mov	r3, r1
 800287e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691a      	ldr	r2, [r3, #16]
 8002884:	887b      	ldrh	r3, [r7, #2]
 8002886:	4013      	ands	r3, r2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d002      	beq.n	8002892 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800288c:	2301      	movs	r3, #1
 800288e:	73fb      	strb	r3, [r7, #15]
 8002890:	e001      	b.n	8002896 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002892:	2300      	movs	r3, #0
 8002894:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002896:	7bfb      	ldrb	r3, [r7, #15]
}
 8002898:	4618      	mov	r0, r3
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	460b      	mov	r3, r1
 80028ae:	807b      	strh	r3, [r7, #2]
 80028b0:	4613      	mov	r3, r2
 80028b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028b4:	787b      	ldrb	r3, [r7, #1]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028ba:	887a      	ldrh	r2, [r7, #2]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028c0:	e003      	b.n	80028ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028c2:	887b      	ldrh	r3, [r7, #2]
 80028c4:	041a      	lsls	r2, r3, #16
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	619a      	str	r2, [r3, #24]
}
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
	...

080028d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	4603      	mov	r3, r0
 80028e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80028e2:	4b08      	ldr	r3, [pc, #32]	@ (8002904 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028e4:	695a      	ldr	r2, [r3, #20]
 80028e6:	88fb      	ldrh	r3, [r7, #6]
 80028e8:	4013      	ands	r3, r2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d006      	beq.n	80028fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028ee:	4a05      	ldr	r2, [pc, #20]	@ (8002904 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028f0:	88fb      	ldrh	r3, [r7, #6]
 80028f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028f4:	88fb      	ldrh	r3, [r7, #6]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fe faac 	bl	8000e54 <HAL_GPIO_EXTI_Callback>
  }
}
 80028fc:	bf00      	nop
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	40013c00 	.word	0x40013c00

08002908 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e267      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d075      	beq.n	8002a12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002926:	4b88      	ldr	r3, [pc, #544]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 030c 	and.w	r3, r3, #12
 800292e:	2b04      	cmp	r3, #4
 8002930:	d00c      	beq.n	800294c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002932:	4b85      	ldr	r3, [pc, #532]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800293a:	2b08      	cmp	r3, #8
 800293c:	d112      	bne.n	8002964 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800293e:	4b82      	ldr	r3, [pc, #520]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002946:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800294a:	d10b      	bne.n	8002964 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800294c:	4b7e      	ldr	r3, [pc, #504]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d05b      	beq.n	8002a10 <HAL_RCC_OscConfig+0x108>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d157      	bne.n	8002a10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e242      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800296c:	d106      	bne.n	800297c <HAL_RCC_OscConfig+0x74>
 800296e:	4b76      	ldr	r3, [pc, #472]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a75      	ldr	r2, [pc, #468]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002974:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	e01d      	b.n	80029b8 <HAL_RCC_OscConfig+0xb0>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002984:	d10c      	bne.n	80029a0 <HAL_RCC_OscConfig+0x98>
 8002986:	4b70      	ldr	r3, [pc, #448]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a6f      	ldr	r2, [pc, #444]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 800298c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	4b6d      	ldr	r3, [pc, #436]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a6c      	ldr	r2, [pc, #432]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002998:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	e00b      	b.n	80029b8 <HAL_RCC_OscConfig+0xb0>
 80029a0:	4b69      	ldr	r3, [pc, #420]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a68      	ldr	r2, [pc, #416]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 80029a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	4b66      	ldr	r3, [pc, #408]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a65      	ldr	r2, [pc, #404]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 80029b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d013      	beq.n	80029e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c0:	f7ff fc7a 	bl	80022b8 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029c8:	f7ff fc76 	bl	80022b8 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b64      	cmp	r3, #100	@ 0x64
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e207      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029da:	4b5b      	ldr	r3, [pc, #364]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0f0      	beq.n	80029c8 <HAL_RCC_OscConfig+0xc0>
 80029e6:	e014      	b.n	8002a12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e8:	f7ff fc66 	bl	80022b8 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029f0:	f7ff fc62 	bl	80022b8 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b64      	cmp	r3, #100	@ 0x64
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e1f3      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a02:	4b51      	ldr	r3, [pc, #324]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0xe8>
 8002a0e:	e000      	b.n	8002a12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d063      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a1e:	4b4a      	ldr	r3, [pc, #296]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 030c 	and.w	r3, r3, #12
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00b      	beq.n	8002a42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a2a:	4b47      	ldr	r3, [pc, #284]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a32:	2b08      	cmp	r3, #8
 8002a34:	d11c      	bne.n	8002a70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a36:	4b44      	ldr	r3, [pc, #272]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d116      	bne.n	8002a70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a42:	4b41      	ldr	r3, [pc, #260]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d005      	beq.n	8002a5a <HAL_RCC_OscConfig+0x152>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d001      	beq.n	8002a5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e1c7      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a5a:	4b3b      	ldr	r3, [pc, #236]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	4937      	ldr	r1, [pc, #220]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a6e:	e03a      	b.n	8002ae6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d020      	beq.n	8002aba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a78:	4b34      	ldr	r3, [pc, #208]	@ (8002b4c <HAL_RCC_OscConfig+0x244>)
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7e:	f7ff fc1b 	bl	80022b8 <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a86:	f7ff fc17 	bl	80022b8 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e1a8      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a98:	4b2b      	ldr	r3, [pc, #172]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d0f0      	beq.n	8002a86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa4:	4b28      	ldr	r3, [pc, #160]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	4925      	ldr	r1, [pc, #148]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	600b      	str	r3, [r1, #0]
 8002ab8:	e015      	b.n	8002ae6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aba:	4b24      	ldr	r3, [pc, #144]	@ (8002b4c <HAL_RCC_OscConfig+0x244>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac0:	f7ff fbfa 	bl	80022b8 <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ac8:	f7ff fbf6 	bl	80022b8 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e187      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ada:	4b1b      	ldr	r3, [pc, #108]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1f0      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d036      	beq.n	8002b60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d016      	beq.n	8002b28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002afa:	4b15      	ldr	r3, [pc, #84]	@ (8002b50 <HAL_RCC_OscConfig+0x248>)
 8002afc:	2201      	movs	r2, #1
 8002afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b00:	f7ff fbda 	bl	80022b8 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b08:	f7ff fbd6 	bl	80022b8 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e167      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002b1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f0      	beq.n	8002b08 <HAL_RCC_OscConfig+0x200>
 8002b26:	e01b      	b.n	8002b60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b28:	4b09      	ldr	r3, [pc, #36]	@ (8002b50 <HAL_RCC_OscConfig+0x248>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b2e:	f7ff fbc3 	bl	80022b8 <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b34:	e00e      	b.n	8002b54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b36:	f7ff fbbf 	bl	80022b8 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d907      	bls.n	8002b54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e150      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	42470000 	.word	0x42470000
 8002b50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b54:	4b88      	ldr	r3, [pc, #544]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002b56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1ea      	bne.n	8002b36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 8097 	beq.w	8002c9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b72:	4b81      	ldr	r3, [pc, #516]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10f      	bne.n	8002b9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	4b7d      	ldr	r3, [pc, #500]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b86:	4a7c      	ldr	r2, [pc, #496]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002b88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b8e:	4b7a      	ldr	r3, [pc, #488]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b96:	60bb      	str	r3, [r7, #8]
 8002b98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b9e:	4b77      	ldr	r3, [pc, #476]	@ (8002d7c <HAL_RCC_OscConfig+0x474>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d118      	bne.n	8002bdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002baa:	4b74      	ldr	r3, [pc, #464]	@ (8002d7c <HAL_RCC_OscConfig+0x474>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a73      	ldr	r2, [pc, #460]	@ (8002d7c <HAL_RCC_OscConfig+0x474>)
 8002bb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bb6:	f7ff fb7f 	bl	80022b8 <HAL_GetTick>
 8002bba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bbc:	e008      	b.n	8002bd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bbe:	f7ff fb7b 	bl	80022b8 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e10c      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd0:	4b6a      	ldr	r3, [pc, #424]	@ (8002d7c <HAL_RCC_OscConfig+0x474>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0f0      	beq.n	8002bbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d106      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x2ea>
 8002be4:	4b64      	ldr	r3, [pc, #400]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be8:	4a63      	ldr	r2, [pc, #396]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002bea:	f043 0301 	orr.w	r3, r3, #1
 8002bee:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bf0:	e01c      	b.n	8002c2c <HAL_RCC_OscConfig+0x324>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	2b05      	cmp	r3, #5
 8002bf8:	d10c      	bne.n	8002c14 <HAL_RCC_OscConfig+0x30c>
 8002bfa:	4b5f      	ldr	r3, [pc, #380]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002bfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bfe:	4a5e      	ldr	r2, [pc, #376]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c00:	f043 0304 	orr.w	r3, r3, #4
 8002c04:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c06:	4b5c      	ldr	r3, [pc, #368]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c0a:	4a5b      	ldr	r2, [pc, #364]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c0c:	f043 0301 	orr.w	r3, r3, #1
 8002c10:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c12:	e00b      	b.n	8002c2c <HAL_RCC_OscConfig+0x324>
 8002c14:	4b58      	ldr	r3, [pc, #352]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c18:	4a57      	ldr	r2, [pc, #348]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c1a:	f023 0301 	bic.w	r3, r3, #1
 8002c1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c20:	4b55      	ldr	r3, [pc, #340]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c24:	4a54      	ldr	r2, [pc, #336]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c26:	f023 0304 	bic.w	r3, r3, #4
 8002c2a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d015      	beq.n	8002c60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c34:	f7ff fb40 	bl	80022b8 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c3a:	e00a      	b.n	8002c52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c3c:	f7ff fb3c 	bl	80022b8 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e0cb      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c52:	4b49      	ldr	r3, [pc, #292]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0ee      	beq.n	8002c3c <HAL_RCC_OscConfig+0x334>
 8002c5e:	e014      	b.n	8002c8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c60:	f7ff fb2a 	bl	80022b8 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c66:	e00a      	b.n	8002c7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c68:	f7ff fb26 	bl	80022b8 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e0b5      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c7e:	4b3e      	ldr	r3, [pc, #248]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1ee      	bne.n	8002c68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c8a:	7dfb      	ldrb	r3, [r7, #23]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d105      	bne.n	8002c9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c90:	4b39      	ldr	r3, [pc, #228]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c94:	4a38      	ldr	r2, [pc, #224]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c9a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 80a1 	beq.w	8002de8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ca6:	4b34      	ldr	r3, [pc, #208]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 030c 	and.w	r3, r3, #12
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d05c      	beq.n	8002d6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d141      	bne.n	8002d3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cba:	4b31      	ldr	r3, [pc, #196]	@ (8002d80 <HAL_RCC_OscConfig+0x478>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc0:	f7ff fafa 	bl	80022b8 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cc8:	f7ff faf6 	bl	80022b8 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e087      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cda:	4b27      	ldr	r3, [pc, #156]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f0      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	69da      	ldr	r2, [r3, #28]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf4:	019b      	lsls	r3, r3, #6
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cfc:	085b      	lsrs	r3, r3, #1
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	041b      	lsls	r3, r3, #16
 8002d02:	431a      	orrs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d08:	061b      	lsls	r3, r3, #24
 8002d0a:	491b      	ldr	r1, [pc, #108]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d10:	4b1b      	ldr	r3, [pc, #108]	@ (8002d80 <HAL_RCC_OscConfig+0x478>)
 8002d12:	2201      	movs	r2, #1
 8002d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d16:	f7ff facf 	bl	80022b8 <HAL_GetTick>
 8002d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d1c:	e008      	b.n	8002d30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d1e:	f7ff facb 	bl	80022b8 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e05c      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d30:	4b11      	ldr	r3, [pc, #68]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0f0      	beq.n	8002d1e <HAL_RCC_OscConfig+0x416>
 8002d3c:	e054      	b.n	8002de8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d3e:	4b10      	ldr	r3, [pc, #64]	@ (8002d80 <HAL_RCC_OscConfig+0x478>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d44:	f7ff fab8 	bl	80022b8 <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d4c:	f7ff fab4 	bl	80022b8 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e045      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d5e:	4b06      	ldr	r3, [pc, #24]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f0      	bne.n	8002d4c <HAL_RCC_OscConfig+0x444>
 8002d6a:	e03d      	b.n	8002de8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d107      	bne.n	8002d84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e038      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	40007000 	.word	0x40007000
 8002d80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d84:	4b1b      	ldr	r3, [pc, #108]	@ (8002df4 <HAL_RCC_OscConfig+0x4ec>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d028      	beq.n	8002de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d121      	bne.n	8002de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d11a      	bne.n	8002de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002db4:	4013      	ands	r3, r2
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002dba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d111      	bne.n	8002de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dca:	085b      	lsrs	r3, r3, #1
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d107      	bne.n	8002de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d001      	beq.n	8002de8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e000      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40023800 	.word	0x40023800

08002df8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e0cc      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e0c:	4b68      	ldr	r3, [pc, #416]	@ (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d90c      	bls.n	8002e34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e1a:	4b65      	ldr	r3, [pc, #404]	@ (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e22:	4b63      	ldr	r3, [pc, #396]	@ (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d001      	beq.n	8002e34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e0b8      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d020      	beq.n	8002e82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d005      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e4c:	4b59      	ldr	r3, [pc, #356]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	4a58      	ldr	r2, [pc, #352]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e52:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002e56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0308 	and.w	r3, r3, #8
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d005      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e64:	4b53      	ldr	r3, [pc, #332]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	4a52      	ldr	r2, [pc, #328]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002e6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e70:	4b50      	ldr	r3, [pc, #320]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	494d      	ldr	r1, [pc, #308]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d044      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d107      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e96:	4b47      	ldr	r3, [pc, #284]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d119      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e07f      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d003      	beq.n	8002eb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eb2:	2b03      	cmp	r3, #3
 8002eb4:	d107      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eb6:	4b3f      	ldr	r3, [pc, #252]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d109      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e06f      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec6:	4b3b      	ldr	r3, [pc, #236]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e067      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ed6:	4b37      	ldr	r3, [pc, #220]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f023 0203 	bic.w	r2, r3, #3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	4934      	ldr	r1, [pc, #208]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ee8:	f7ff f9e6 	bl	80022b8 <HAL_GetTick>
 8002eec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eee:	e00a      	b.n	8002f06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ef0:	f7ff f9e2 	bl	80022b8 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e04f      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f06:	4b2b      	ldr	r3, [pc, #172]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 020c 	and.w	r2, r3, #12
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d1eb      	bne.n	8002ef0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f18:	4b25      	ldr	r3, [pc, #148]	@ (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d20c      	bcs.n	8002f40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f26:	4b22      	ldr	r3, [pc, #136]	@ (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2e:	4b20      	ldr	r3, [pc, #128]	@ (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d001      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e032      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d008      	beq.n	8002f5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f4c:	4b19      	ldr	r3, [pc, #100]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	4916      	ldr	r1, [pc, #88]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0308 	and.w	r3, r3, #8
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d009      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f6a:	4b12      	ldr	r3, [pc, #72]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	490e      	ldr	r1, [pc, #56]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f7e:	f000 f821 	bl	8002fc4 <HAL_RCC_GetSysClockFreq>
 8002f82:	4602      	mov	r2, r0
 8002f84:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	091b      	lsrs	r3, r3, #4
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	490a      	ldr	r1, [pc, #40]	@ (8002fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f90:	5ccb      	ldrb	r3, [r1, r3]
 8002f92:	fa22 f303 	lsr.w	r3, r2, r3
 8002f96:	4a09      	ldr	r2, [pc, #36]	@ (8002fbc <HAL_RCC_ClockConfig+0x1c4>)
 8002f98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f9a:	4b09      	ldr	r3, [pc, #36]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff f946 	bl	8002230 <HAL_InitTick>

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40023c00 	.word	0x40023c00
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	08004d50 	.word	0x08004d50
 8002fbc:	20000000 	.word	0x20000000
 8002fc0:	20000004 	.word	0x20000004

08002fc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fc8:	b090      	sub	sp, #64	@ 0x40
 8002fca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fdc:	4b59      	ldr	r3, [pc, #356]	@ (8003144 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 030c 	and.w	r3, r3, #12
 8002fe4:	2b08      	cmp	r3, #8
 8002fe6:	d00d      	beq.n	8003004 <HAL_RCC_GetSysClockFreq+0x40>
 8002fe8:	2b08      	cmp	r3, #8
 8002fea:	f200 80a1 	bhi.w	8003130 <HAL_RCC_GetSysClockFreq+0x16c>
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d002      	beq.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d003      	beq.n	8002ffe <HAL_RCC_GetSysClockFreq+0x3a>
 8002ff6:	e09b      	b.n	8003130 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ff8:	4b53      	ldr	r3, [pc, #332]	@ (8003148 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ffa:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002ffc:	e09b      	b.n	8003136 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ffe:	4b53      	ldr	r3, [pc, #332]	@ (800314c <HAL_RCC_GetSysClockFreq+0x188>)
 8003000:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003002:	e098      	b.n	8003136 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003004:	4b4f      	ldr	r3, [pc, #316]	@ (8003144 <HAL_RCC_GetSysClockFreq+0x180>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800300c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800300e:	4b4d      	ldr	r3, [pc, #308]	@ (8003144 <HAL_RCC_GetSysClockFreq+0x180>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d028      	beq.n	800306c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800301a:	4b4a      	ldr	r3, [pc, #296]	@ (8003144 <HAL_RCC_GetSysClockFreq+0x180>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	099b      	lsrs	r3, r3, #6
 8003020:	2200      	movs	r2, #0
 8003022:	623b      	str	r3, [r7, #32]
 8003024:	627a      	str	r2, [r7, #36]	@ 0x24
 8003026:	6a3b      	ldr	r3, [r7, #32]
 8003028:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800302c:	2100      	movs	r1, #0
 800302e:	4b47      	ldr	r3, [pc, #284]	@ (800314c <HAL_RCC_GetSysClockFreq+0x188>)
 8003030:	fb03 f201 	mul.w	r2, r3, r1
 8003034:	2300      	movs	r3, #0
 8003036:	fb00 f303 	mul.w	r3, r0, r3
 800303a:	4413      	add	r3, r2
 800303c:	4a43      	ldr	r2, [pc, #268]	@ (800314c <HAL_RCC_GetSysClockFreq+0x188>)
 800303e:	fba0 1202 	umull	r1, r2, r0, r2
 8003042:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003044:	460a      	mov	r2, r1
 8003046:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003048:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800304a:	4413      	add	r3, r2
 800304c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800304e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003050:	2200      	movs	r2, #0
 8003052:	61bb      	str	r3, [r7, #24]
 8003054:	61fa      	str	r2, [r7, #28]
 8003056:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800305a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800305e:	f7fd fd81 	bl	8000b64 <__aeabi_uldivmod>
 8003062:	4602      	mov	r2, r0
 8003064:	460b      	mov	r3, r1
 8003066:	4613      	mov	r3, r2
 8003068:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800306a:	e053      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800306c:	4b35      	ldr	r3, [pc, #212]	@ (8003144 <HAL_RCC_GetSysClockFreq+0x180>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	099b      	lsrs	r3, r3, #6
 8003072:	2200      	movs	r2, #0
 8003074:	613b      	str	r3, [r7, #16]
 8003076:	617a      	str	r2, [r7, #20]
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800307e:	f04f 0b00 	mov.w	fp, #0
 8003082:	4652      	mov	r2, sl
 8003084:	465b      	mov	r3, fp
 8003086:	f04f 0000 	mov.w	r0, #0
 800308a:	f04f 0100 	mov.w	r1, #0
 800308e:	0159      	lsls	r1, r3, #5
 8003090:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003094:	0150      	lsls	r0, r2, #5
 8003096:	4602      	mov	r2, r0
 8003098:	460b      	mov	r3, r1
 800309a:	ebb2 080a 	subs.w	r8, r2, sl
 800309e:	eb63 090b 	sbc.w	r9, r3, fp
 80030a2:	f04f 0200 	mov.w	r2, #0
 80030a6:	f04f 0300 	mov.w	r3, #0
 80030aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80030ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80030b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80030b6:	ebb2 0408 	subs.w	r4, r2, r8
 80030ba:	eb63 0509 	sbc.w	r5, r3, r9
 80030be:	f04f 0200 	mov.w	r2, #0
 80030c2:	f04f 0300 	mov.w	r3, #0
 80030c6:	00eb      	lsls	r3, r5, #3
 80030c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030cc:	00e2      	lsls	r2, r4, #3
 80030ce:	4614      	mov	r4, r2
 80030d0:	461d      	mov	r5, r3
 80030d2:	eb14 030a 	adds.w	r3, r4, sl
 80030d6:	603b      	str	r3, [r7, #0]
 80030d8:	eb45 030b 	adc.w	r3, r5, fp
 80030dc:	607b      	str	r3, [r7, #4]
 80030de:	f04f 0200 	mov.w	r2, #0
 80030e2:	f04f 0300 	mov.w	r3, #0
 80030e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030ea:	4629      	mov	r1, r5
 80030ec:	028b      	lsls	r3, r1, #10
 80030ee:	4621      	mov	r1, r4
 80030f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030f4:	4621      	mov	r1, r4
 80030f6:	028a      	lsls	r2, r1, #10
 80030f8:	4610      	mov	r0, r2
 80030fa:	4619      	mov	r1, r3
 80030fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030fe:	2200      	movs	r2, #0
 8003100:	60bb      	str	r3, [r7, #8]
 8003102:	60fa      	str	r2, [r7, #12]
 8003104:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003108:	f7fd fd2c 	bl	8000b64 <__aeabi_uldivmod>
 800310c:	4602      	mov	r2, r0
 800310e:	460b      	mov	r3, r1
 8003110:	4613      	mov	r3, r2
 8003112:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003114:	4b0b      	ldr	r3, [pc, #44]	@ (8003144 <HAL_RCC_GetSysClockFreq+0x180>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	0c1b      	lsrs	r3, r3, #16
 800311a:	f003 0303 	and.w	r3, r3, #3
 800311e:	3301      	adds	r3, #1
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003124:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003128:	fbb2 f3f3 	udiv	r3, r2, r3
 800312c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800312e:	e002      	b.n	8003136 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003130:	4b05      	ldr	r3, [pc, #20]	@ (8003148 <HAL_RCC_GetSysClockFreq+0x184>)
 8003132:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003134:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003138:	4618      	mov	r0, r3
 800313a:	3740      	adds	r7, #64	@ 0x40
 800313c:	46bd      	mov	sp, r7
 800313e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003142:	bf00      	nop
 8003144:	40023800 	.word	0x40023800
 8003148:	00f42400 	.word	0x00f42400
 800314c:	017d7840 	.word	0x017d7840

08003150 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e038      	b.n	80031d8 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d106      	bne.n	8003180 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f7fe fd2c 	bl	8001bd8 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	3308      	adds	r3, #8
 8003188:	4619      	mov	r1, r3
 800318a:	4610      	mov	r0, r2
 800318c:	f000 fc9e 	bl	8003acc <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6818      	ldr	r0, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	461a      	mov	r2, r3
 800319a:	68b9      	ldr	r1, [r7, #8]
 800319c:	f000 fd00 	bl	8003ba0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6858      	ldr	r0, [r3, #4]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	f000 fd2d 	bl	8003c0c <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	6892      	ldr	r2, [r2, #8]
 80031ba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	6892      	ldr	r2, [r2, #8]
 80031c6:	f041 0101 	orr.w	r1, r1, #1
 80031ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e041      	b.n	8003276 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d106      	bne.n	800320c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7fe fc46 	bl	8001a98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2202      	movs	r2, #2
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3304      	adds	r3, #4
 800321c:	4619      	mov	r1, r3
 800321e:	4610      	mov	r0, r2
 8003220:	f000 fa7e 	bl	8003720 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
	...

08003280 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b01      	cmp	r3, #1
 8003292:	d001      	beq.n	8003298 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e04e      	b.n	8003336 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2202      	movs	r2, #2
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68da      	ldr	r2, [r3, #12]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0201 	orr.w	r2, r2, #1
 80032ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a23      	ldr	r2, [pc, #140]	@ (8003344 <HAL_TIM_Base_Start_IT+0xc4>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d022      	beq.n	8003300 <HAL_TIM_Base_Start_IT+0x80>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032c2:	d01d      	beq.n	8003300 <HAL_TIM_Base_Start_IT+0x80>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a1f      	ldr	r2, [pc, #124]	@ (8003348 <HAL_TIM_Base_Start_IT+0xc8>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d018      	beq.n	8003300 <HAL_TIM_Base_Start_IT+0x80>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a1e      	ldr	r2, [pc, #120]	@ (800334c <HAL_TIM_Base_Start_IT+0xcc>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d013      	beq.n	8003300 <HAL_TIM_Base_Start_IT+0x80>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a1c      	ldr	r2, [pc, #112]	@ (8003350 <HAL_TIM_Base_Start_IT+0xd0>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d00e      	beq.n	8003300 <HAL_TIM_Base_Start_IT+0x80>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a1b      	ldr	r2, [pc, #108]	@ (8003354 <HAL_TIM_Base_Start_IT+0xd4>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d009      	beq.n	8003300 <HAL_TIM_Base_Start_IT+0x80>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a19      	ldr	r2, [pc, #100]	@ (8003358 <HAL_TIM_Base_Start_IT+0xd8>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d004      	beq.n	8003300 <HAL_TIM_Base_Start_IT+0x80>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a18      	ldr	r2, [pc, #96]	@ (800335c <HAL_TIM_Base_Start_IT+0xdc>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d111      	bne.n	8003324 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2b06      	cmp	r3, #6
 8003310:	d010      	beq.n	8003334 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f042 0201 	orr.w	r2, r2, #1
 8003320:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003322:	e007      	b.n	8003334 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0201 	orr.w	r2, r2, #1
 8003332:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3714      	adds	r7, #20
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	40010000 	.word	0x40010000
 8003348:	40000400 	.word	0x40000400
 800334c:	40000800 	.word	0x40000800
 8003350:	40000c00 	.word	0x40000c00
 8003354:	40010400 	.word	0x40010400
 8003358:	40014000 	.word	0x40014000
 800335c:	40001800 	.word	0x40001800

08003360 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d020      	beq.n	80033c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d01b      	beq.n	80033c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f06f 0202 	mvn.w	r2, #2
 8003394:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2201      	movs	r2, #1
 800339a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	f003 0303 	and.w	r3, r3, #3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d003      	beq.n	80033b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f999 	bl	80036e2 <HAL_TIM_IC_CaptureCallback>
 80033b0:	e005      	b.n	80033be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 f98b 	bl	80036ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 f99c 	bl	80036f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	f003 0304 	and.w	r3, r3, #4
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d020      	beq.n	8003410 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d01b      	beq.n	8003410 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f06f 0204 	mvn.w	r2, #4
 80033e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2202      	movs	r2, #2
 80033e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f973 	bl	80036e2 <HAL_TIM_IC_CaptureCallback>
 80033fc:	e005      	b.n	800340a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 f965 	bl	80036ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 f976 	bl	80036f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	f003 0308 	and.w	r3, r3, #8
 8003416:	2b00      	cmp	r3, #0
 8003418:	d020      	beq.n	800345c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f003 0308 	and.w	r3, r3, #8
 8003420:	2b00      	cmp	r3, #0
 8003422:	d01b      	beq.n	800345c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f06f 0208 	mvn.w	r2, #8
 800342c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2204      	movs	r2, #4
 8003432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	f003 0303 	and.w	r3, r3, #3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f94d 	bl	80036e2 <HAL_TIM_IC_CaptureCallback>
 8003448:	e005      	b.n	8003456 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f93f 	bl	80036ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f950 	bl	80036f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	f003 0310 	and.w	r3, r3, #16
 8003462:	2b00      	cmp	r3, #0
 8003464:	d020      	beq.n	80034a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f003 0310 	and.w	r3, r3, #16
 800346c:	2b00      	cmp	r3, #0
 800346e:	d01b      	beq.n	80034a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f06f 0210 	mvn.w	r2, #16
 8003478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2208      	movs	r2, #8
 800347e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f927 	bl	80036e2 <HAL_TIM_IC_CaptureCallback>
 8003494:	e005      	b.n	80034a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f919 	bl	80036ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f92a 	bl	80036f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00c      	beq.n	80034cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d007      	beq.n	80034cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f06f 0201 	mvn.w	r2, #1
 80034c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7fd fcd2 	bl	8000e70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00c      	beq.n	80034f0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d007      	beq.n	80034f0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80034e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 fae4 	bl	8003ab8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00c      	beq.n	8003514 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003500:	2b00      	cmp	r3, #0
 8003502:	d007      	beq.n	8003514 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800350c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f8fb 	bl	800370a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	f003 0320 	and.w	r3, r3, #32
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00c      	beq.n	8003538 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f003 0320 	and.w	r3, r3, #32
 8003524:	2b00      	cmp	r3, #0
 8003526:	d007      	beq.n	8003538 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f06f 0220 	mvn.w	r2, #32
 8003530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 fab6 	bl	8003aa4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003538:	bf00      	nop
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800354a:	2300      	movs	r3, #0
 800354c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003554:	2b01      	cmp	r3, #1
 8003556:	d101      	bne.n	800355c <HAL_TIM_ConfigClockSource+0x1c>
 8003558:	2302      	movs	r3, #2
 800355a:	e0b4      	b.n	80036c6 <HAL_TIM_ConfigClockSource+0x186>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800357a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003582:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003594:	d03e      	beq.n	8003614 <HAL_TIM_ConfigClockSource+0xd4>
 8003596:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800359a:	f200 8087 	bhi.w	80036ac <HAL_TIM_ConfigClockSource+0x16c>
 800359e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035a2:	f000 8086 	beq.w	80036b2 <HAL_TIM_ConfigClockSource+0x172>
 80035a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035aa:	d87f      	bhi.n	80036ac <HAL_TIM_ConfigClockSource+0x16c>
 80035ac:	2b70      	cmp	r3, #112	@ 0x70
 80035ae:	d01a      	beq.n	80035e6 <HAL_TIM_ConfigClockSource+0xa6>
 80035b0:	2b70      	cmp	r3, #112	@ 0x70
 80035b2:	d87b      	bhi.n	80036ac <HAL_TIM_ConfigClockSource+0x16c>
 80035b4:	2b60      	cmp	r3, #96	@ 0x60
 80035b6:	d050      	beq.n	800365a <HAL_TIM_ConfigClockSource+0x11a>
 80035b8:	2b60      	cmp	r3, #96	@ 0x60
 80035ba:	d877      	bhi.n	80036ac <HAL_TIM_ConfigClockSource+0x16c>
 80035bc:	2b50      	cmp	r3, #80	@ 0x50
 80035be:	d03c      	beq.n	800363a <HAL_TIM_ConfigClockSource+0xfa>
 80035c0:	2b50      	cmp	r3, #80	@ 0x50
 80035c2:	d873      	bhi.n	80036ac <HAL_TIM_ConfigClockSource+0x16c>
 80035c4:	2b40      	cmp	r3, #64	@ 0x40
 80035c6:	d058      	beq.n	800367a <HAL_TIM_ConfigClockSource+0x13a>
 80035c8:	2b40      	cmp	r3, #64	@ 0x40
 80035ca:	d86f      	bhi.n	80036ac <HAL_TIM_ConfigClockSource+0x16c>
 80035cc:	2b30      	cmp	r3, #48	@ 0x30
 80035ce:	d064      	beq.n	800369a <HAL_TIM_ConfigClockSource+0x15a>
 80035d0:	2b30      	cmp	r3, #48	@ 0x30
 80035d2:	d86b      	bhi.n	80036ac <HAL_TIM_ConfigClockSource+0x16c>
 80035d4:	2b20      	cmp	r3, #32
 80035d6:	d060      	beq.n	800369a <HAL_TIM_ConfigClockSource+0x15a>
 80035d8:	2b20      	cmp	r3, #32
 80035da:	d867      	bhi.n	80036ac <HAL_TIM_ConfigClockSource+0x16c>
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d05c      	beq.n	800369a <HAL_TIM_ConfigClockSource+0x15a>
 80035e0:	2b10      	cmp	r3, #16
 80035e2:	d05a      	beq.n	800369a <HAL_TIM_ConfigClockSource+0x15a>
 80035e4:	e062      	b.n	80036ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035f6:	f000 f9b9 	bl	800396c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003608:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68ba      	ldr	r2, [r7, #8]
 8003610:	609a      	str	r2, [r3, #8]
      break;
 8003612:	e04f      	b.n	80036b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003624:	f000 f9a2 	bl	800396c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689a      	ldr	r2, [r3, #8]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003636:	609a      	str	r2, [r3, #8]
      break;
 8003638:	e03c      	b.n	80036b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003646:	461a      	mov	r2, r3
 8003648:	f000 f916 	bl	8003878 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2150      	movs	r1, #80	@ 0x50
 8003652:	4618      	mov	r0, r3
 8003654:	f000 f96f 	bl	8003936 <TIM_ITRx_SetConfig>
      break;
 8003658:	e02c      	b.n	80036b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003666:	461a      	mov	r2, r3
 8003668:	f000 f935 	bl	80038d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2160      	movs	r1, #96	@ 0x60
 8003672:	4618      	mov	r0, r3
 8003674:	f000 f95f 	bl	8003936 <TIM_ITRx_SetConfig>
      break;
 8003678:	e01c      	b.n	80036b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003686:	461a      	mov	r2, r3
 8003688:	f000 f8f6 	bl	8003878 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2140      	movs	r1, #64	@ 0x40
 8003692:	4618      	mov	r0, r3
 8003694:	f000 f94f 	bl	8003936 <TIM_ITRx_SetConfig>
      break;
 8003698:	e00c      	b.n	80036b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4619      	mov	r1, r3
 80036a4:	4610      	mov	r0, r2
 80036a6:	f000 f946 	bl	8003936 <TIM_ITRx_SetConfig>
      break;
 80036aa:	e003      	b.n	80036b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	73fb      	strb	r3, [r7, #15]
      break;
 80036b0:	e000      	b.n	80036b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80036b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b083      	sub	sp, #12
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036fe:	bf00      	nop
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr

0800370a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003712:	bf00      	nop
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
	...

08003720 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a46      	ldr	r2, [pc, #280]	@ (800384c <TIM_Base_SetConfig+0x12c>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d013      	beq.n	8003760 <TIM_Base_SetConfig+0x40>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800373e:	d00f      	beq.n	8003760 <TIM_Base_SetConfig+0x40>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a43      	ldr	r2, [pc, #268]	@ (8003850 <TIM_Base_SetConfig+0x130>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d00b      	beq.n	8003760 <TIM_Base_SetConfig+0x40>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a42      	ldr	r2, [pc, #264]	@ (8003854 <TIM_Base_SetConfig+0x134>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d007      	beq.n	8003760 <TIM_Base_SetConfig+0x40>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a41      	ldr	r2, [pc, #260]	@ (8003858 <TIM_Base_SetConfig+0x138>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d003      	beq.n	8003760 <TIM_Base_SetConfig+0x40>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a40      	ldr	r2, [pc, #256]	@ (800385c <TIM_Base_SetConfig+0x13c>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d108      	bne.n	8003772 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003766:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	4313      	orrs	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a35      	ldr	r2, [pc, #212]	@ (800384c <TIM_Base_SetConfig+0x12c>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d02b      	beq.n	80037d2 <TIM_Base_SetConfig+0xb2>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003780:	d027      	beq.n	80037d2 <TIM_Base_SetConfig+0xb2>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a32      	ldr	r2, [pc, #200]	@ (8003850 <TIM_Base_SetConfig+0x130>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d023      	beq.n	80037d2 <TIM_Base_SetConfig+0xb2>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a31      	ldr	r2, [pc, #196]	@ (8003854 <TIM_Base_SetConfig+0x134>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d01f      	beq.n	80037d2 <TIM_Base_SetConfig+0xb2>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a30      	ldr	r2, [pc, #192]	@ (8003858 <TIM_Base_SetConfig+0x138>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d01b      	beq.n	80037d2 <TIM_Base_SetConfig+0xb2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a2f      	ldr	r2, [pc, #188]	@ (800385c <TIM_Base_SetConfig+0x13c>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d017      	beq.n	80037d2 <TIM_Base_SetConfig+0xb2>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a2e      	ldr	r2, [pc, #184]	@ (8003860 <TIM_Base_SetConfig+0x140>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d013      	beq.n	80037d2 <TIM_Base_SetConfig+0xb2>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a2d      	ldr	r2, [pc, #180]	@ (8003864 <TIM_Base_SetConfig+0x144>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d00f      	beq.n	80037d2 <TIM_Base_SetConfig+0xb2>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a2c      	ldr	r2, [pc, #176]	@ (8003868 <TIM_Base_SetConfig+0x148>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d00b      	beq.n	80037d2 <TIM_Base_SetConfig+0xb2>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a2b      	ldr	r2, [pc, #172]	@ (800386c <TIM_Base_SetConfig+0x14c>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d007      	beq.n	80037d2 <TIM_Base_SetConfig+0xb2>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a2a      	ldr	r2, [pc, #168]	@ (8003870 <TIM_Base_SetConfig+0x150>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d003      	beq.n	80037d2 <TIM_Base_SetConfig+0xb2>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a29      	ldr	r2, [pc, #164]	@ (8003874 <TIM_Base_SetConfig+0x154>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d108      	bne.n	80037e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	689a      	ldr	r2, [r3, #8]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a10      	ldr	r2, [pc, #64]	@ (800384c <TIM_Base_SetConfig+0x12c>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d003      	beq.n	8003818 <TIM_Base_SetConfig+0xf8>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a12      	ldr	r2, [pc, #72]	@ (800385c <TIM_Base_SetConfig+0x13c>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d103      	bne.n	8003820 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	691a      	ldr	r2, [r3, #16]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b01      	cmp	r3, #1
 8003830:	d105      	bne.n	800383e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	f023 0201 	bic.w	r2, r3, #1
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	611a      	str	r2, [r3, #16]
  }
}
 800383e:	bf00      	nop
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	40010000 	.word	0x40010000
 8003850:	40000400 	.word	0x40000400
 8003854:	40000800 	.word	0x40000800
 8003858:	40000c00 	.word	0x40000c00
 800385c:	40010400 	.word	0x40010400
 8003860:	40014000 	.word	0x40014000
 8003864:	40014400 	.word	0x40014400
 8003868:	40014800 	.word	0x40014800
 800386c:	40001800 	.word	0x40001800
 8003870:	40001c00 	.word	0x40001c00
 8003874:	40002000 	.word	0x40002000

08003878 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003878:	b480      	push	{r7}
 800387a:	b087      	sub	sp, #28
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	f023 0201 	bic.w	r2, r3, #1
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	011b      	lsls	r3, r3, #4
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	f023 030a 	bic.w	r3, r3, #10
 80038b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	621a      	str	r2, [r3, #32]
}
 80038ca:	bf00      	nop
 80038cc:	371c      	adds	r7, #28
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr

080038d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038d6:	b480      	push	{r7}
 80038d8:	b087      	sub	sp, #28
 80038da:	af00      	add	r7, sp, #0
 80038dc:	60f8      	str	r0, [r7, #12]
 80038de:	60b9      	str	r1, [r7, #8]
 80038e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	f023 0210 	bic.w	r2, r3, #16
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003900:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	031b      	lsls	r3, r3, #12
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	4313      	orrs	r3, r2
 800390a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003912:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	011b      	lsls	r3, r3, #4
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	4313      	orrs	r3, r2
 800391c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	621a      	str	r2, [r3, #32]
}
 800392a:	bf00      	nop
 800392c:	371c      	adds	r7, #28
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr

08003936 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003936:	b480      	push	{r7}
 8003938:	b085      	sub	sp, #20
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
 800393e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800394c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	4313      	orrs	r3, r2
 8003954:	f043 0307 	orr.w	r3, r3, #7
 8003958:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	609a      	str	r2, [r3, #8]
}
 8003960:	bf00      	nop
 8003962:	3714      	adds	r7, #20
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800396c:	b480      	push	{r7}
 800396e:	b087      	sub	sp, #28
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
 8003978:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003986:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	021a      	lsls	r2, r3, #8
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	431a      	orrs	r2, r3
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	4313      	orrs	r3, r2
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	4313      	orrs	r3, r2
 8003998:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	609a      	str	r2, [r3, #8]
}
 80039a0:	bf00      	nop
 80039a2:	371c      	adds	r7, #28
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d101      	bne.n	80039c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039c0:	2302      	movs	r3, #2
 80039c2:	e05a      	b.n	8003a7a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2202      	movs	r2, #2
 80039d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a21      	ldr	r2, [pc, #132]	@ (8003a88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d022      	beq.n	8003a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a10:	d01d      	beq.n	8003a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a1d      	ldr	r2, [pc, #116]	@ (8003a8c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d018      	beq.n	8003a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a1b      	ldr	r2, [pc, #108]	@ (8003a90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d013      	beq.n	8003a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a1a      	ldr	r2, [pc, #104]	@ (8003a94 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d00e      	beq.n	8003a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a18      	ldr	r2, [pc, #96]	@ (8003a98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d009      	beq.n	8003a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a17      	ldr	r2, [pc, #92]	@ (8003a9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d004      	beq.n	8003a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a15      	ldr	r2, [pc, #84]	@ (8003aa0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d10c      	bne.n	8003a68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	68ba      	ldr	r2, [r7, #8]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68ba      	ldr	r2, [r7, #8]
 8003a66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3714      	adds	r7, #20
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	40010000 	.word	0x40010000
 8003a8c:	40000400 	.word	0x40000400
 8003a90:	40000800 	.word	0x40000800
 8003a94:	40000c00 	.word	0x40000c00
 8003a98:	40010400 	.word	0x40010400
 8003a9c:	40014000 	.word	0x40014000
 8003aa0:	40001800 	.word	0x40001800

08003aa4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b087      	sub	sp, #28
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	6812      	ldr	r2, [r2, #0]
 8003ae4:	f023 0101 	bic.w	r1, r3, #1
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	2b08      	cmp	r3, #8
 8003af4:	d102      	bne.n	8003afc <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8003af6:	2340      	movs	r3, #64	@ 0x40
 8003af8:	617b      	str	r3, [r7, #20]
 8003afa:	e001      	b.n	8003b00 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8003afc:	2300      	movs	r3, #0
 8003afe:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8003b0c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8003b12:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8003b18:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8003b1e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8003b24:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8003b2a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8003b30:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8003b36:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8003b3c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8003b42:	4313      	orrs	r3, r2
 8003b44:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8003b5a:	4b10      	ldr	r3, [pc, #64]	@ (8003b9c <FSMC_NORSRAM_Init+0xd0>)
 8003b5c:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b64:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8003b6c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	43db      	mvns	r3, r3
 8003b7c:	ea02 0103 	and.w	r1, r2, r3
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	4319      	orrs	r1, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	371c      	adds	r7, #28
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	0008fb7f 	.word	0x0008fb7f

08003ba0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	1c5a      	adds	r2, r3, #1
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bb6:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	011b      	lsls	r3, r3, #4
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	021b      	lsls	r3, r3, #8
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	041b      	lsls	r3, r3, #16
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	051b      	lsls	r3, r3, #20
 8003bde:	431a      	orrs	r2, r3
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	3b02      	subs	r3, #2
 8003be6:	061b      	lsls	r3, r3, #24
 8003be8:	431a      	orrs	r2, r3
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	3201      	adds	r2, #1
 8003bf4:	4319      	orrs	r1, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3714      	adds	r7, #20
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
	...

08003c0c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
 8003c18:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c20:	d11d      	bne.n	8003c5e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003c2a:	4b13      	ldr	r3, [pc, #76]	@ (8003c78 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	68ba      	ldr	r2, [r7, #8]
 8003c30:	6811      	ldr	r1, [r2, #0]
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	6852      	ldr	r2, [r2, #4]
 8003c36:	0112      	lsls	r2, r2, #4
 8003c38:	4311      	orrs	r1, r2
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	6892      	ldr	r2, [r2, #8]
 8003c3e:	0212      	lsls	r2, r2, #8
 8003c40:	4311      	orrs	r1, r2
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	6992      	ldr	r2, [r2, #24]
 8003c46:	4311      	orrs	r1, r2
 8003c48:	68ba      	ldr	r2, [r7, #8]
 8003c4a:	68d2      	ldr	r2, [r2, #12]
 8003c4c:	0412      	lsls	r2, r2, #16
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	ea43 0102 	orr.w	r1, r3, r2
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003c5c:	e005      	b.n	8003c6a <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8003c66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	cff00000 	.word	0xcff00000

08003c7c <memset>:
 8003c7c:	4402      	add	r2, r0
 8003c7e:	4603      	mov	r3, r0
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d100      	bne.n	8003c86 <memset+0xa>
 8003c84:	4770      	bx	lr
 8003c86:	f803 1b01 	strb.w	r1, [r3], #1
 8003c8a:	e7f9      	b.n	8003c80 <memset+0x4>

08003c8c <__libc_init_array>:
 8003c8c:	b570      	push	{r4, r5, r6, lr}
 8003c8e:	4d0d      	ldr	r5, [pc, #52]	@ (8003cc4 <__libc_init_array+0x38>)
 8003c90:	4c0d      	ldr	r4, [pc, #52]	@ (8003cc8 <__libc_init_array+0x3c>)
 8003c92:	1b64      	subs	r4, r4, r5
 8003c94:	10a4      	asrs	r4, r4, #2
 8003c96:	2600      	movs	r6, #0
 8003c98:	42a6      	cmp	r6, r4
 8003c9a:	d109      	bne.n	8003cb0 <__libc_init_array+0x24>
 8003c9c:	4d0b      	ldr	r5, [pc, #44]	@ (8003ccc <__libc_init_array+0x40>)
 8003c9e:	4c0c      	ldr	r4, [pc, #48]	@ (8003cd0 <__libc_init_array+0x44>)
 8003ca0:	f001 f84a 	bl	8004d38 <_init>
 8003ca4:	1b64      	subs	r4, r4, r5
 8003ca6:	10a4      	asrs	r4, r4, #2
 8003ca8:	2600      	movs	r6, #0
 8003caa:	42a6      	cmp	r6, r4
 8003cac:	d105      	bne.n	8003cba <__libc_init_array+0x2e>
 8003cae:	bd70      	pop	{r4, r5, r6, pc}
 8003cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cb4:	4798      	blx	r3
 8003cb6:	3601      	adds	r6, #1
 8003cb8:	e7ee      	b.n	8003c98 <__libc_init_array+0xc>
 8003cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cbe:	4798      	blx	r3
 8003cc0:	3601      	adds	r6, #1
 8003cc2:	e7f2      	b.n	8003caa <__libc_init_array+0x1e>
 8003cc4:	08004f40 	.word	0x08004f40
 8003cc8:	08004f40 	.word	0x08004f40
 8003ccc:	08004f40 	.word	0x08004f40
 8003cd0:	08004f44 	.word	0x08004f44
 8003cd4:	00000000 	.word	0x00000000

08003cd8 <sin>:
 8003cd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003cda:	ec53 2b10 	vmov	r2, r3, d0
 8003cde:	4826      	ldr	r0, [pc, #152]	@ (8003d78 <sin+0xa0>)
 8003ce0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003ce4:	4281      	cmp	r1, r0
 8003ce6:	d807      	bhi.n	8003cf8 <sin+0x20>
 8003ce8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8003d70 <sin+0x98>
 8003cec:	2000      	movs	r0, #0
 8003cee:	b005      	add	sp, #20
 8003cf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cf4:	f000 b90c 	b.w	8003f10 <__kernel_sin>
 8003cf8:	4820      	ldr	r0, [pc, #128]	@ (8003d7c <sin+0xa4>)
 8003cfa:	4281      	cmp	r1, r0
 8003cfc:	d908      	bls.n	8003d10 <sin+0x38>
 8003cfe:	4610      	mov	r0, r2
 8003d00:	4619      	mov	r1, r3
 8003d02:	f7fc fa65 	bl	80001d0 <__aeabi_dsub>
 8003d06:	ec41 0b10 	vmov	d0, r0, r1
 8003d0a:	b005      	add	sp, #20
 8003d0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d10:	4668      	mov	r0, sp
 8003d12:	f000 f9b9 	bl	8004088 <__ieee754_rem_pio2>
 8003d16:	f000 0003 	and.w	r0, r0, #3
 8003d1a:	2801      	cmp	r0, #1
 8003d1c:	d00c      	beq.n	8003d38 <sin+0x60>
 8003d1e:	2802      	cmp	r0, #2
 8003d20:	d011      	beq.n	8003d46 <sin+0x6e>
 8003d22:	b9e8      	cbnz	r0, 8003d60 <sin+0x88>
 8003d24:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003d28:	ed9d 0b00 	vldr	d0, [sp]
 8003d2c:	2001      	movs	r0, #1
 8003d2e:	f000 f8ef 	bl	8003f10 <__kernel_sin>
 8003d32:	ec51 0b10 	vmov	r0, r1, d0
 8003d36:	e7e6      	b.n	8003d06 <sin+0x2e>
 8003d38:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003d3c:	ed9d 0b00 	vldr	d0, [sp]
 8003d40:	f000 f81e 	bl	8003d80 <__kernel_cos>
 8003d44:	e7f5      	b.n	8003d32 <sin+0x5a>
 8003d46:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003d4a:	ed9d 0b00 	vldr	d0, [sp]
 8003d4e:	2001      	movs	r0, #1
 8003d50:	f000 f8de 	bl	8003f10 <__kernel_sin>
 8003d54:	ec53 2b10 	vmov	r2, r3, d0
 8003d58:	4610      	mov	r0, r2
 8003d5a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8003d5e:	e7d2      	b.n	8003d06 <sin+0x2e>
 8003d60:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003d64:	ed9d 0b00 	vldr	d0, [sp]
 8003d68:	f000 f80a 	bl	8003d80 <__kernel_cos>
 8003d6c:	e7f2      	b.n	8003d54 <sin+0x7c>
 8003d6e:	bf00      	nop
	...
 8003d78:	3fe921fb 	.word	0x3fe921fb
 8003d7c:	7fefffff 	.word	0x7fefffff

08003d80 <__kernel_cos>:
 8003d80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d84:	ec57 6b10 	vmov	r6, r7, d0
 8003d88:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8003d8c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8003d90:	ed8d 1b00 	vstr	d1, [sp]
 8003d94:	d206      	bcs.n	8003da4 <__kernel_cos+0x24>
 8003d96:	4630      	mov	r0, r6
 8003d98:	4639      	mov	r1, r7
 8003d9a:	f7fc fe6b 	bl	8000a74 <__aeabi_d2iz>
 8003d9e:	2800      	cmp	r0, #0
 8003da0:	f000 8088 	beq.w	8003eb4 <__kernel_cos+0x134>
 8003da4:	4632      	mov	r2, r6
 8003da6:	463b      	mov	r3, r7
 8003da8:	4630      	mov	r0, r6
 8003daa:	4639      	mov	r1, r7
 8003dac:	f7fc fbc8 	bl	8000540 <__aeabi_dmul>
 8003db0:	4b51      	ldr	r3, [pc, #324]	@ (8003ef8 <__kernel_cos+0x178>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	4604      	mov	r4, r0
 8003db6:	460d      	mov	r5, r1
 8003db8:	f7fc fbc2 	bl	8000540 <__aeabi_dmul>
 8003dbc:	a340      	add	r3, pc, #256	@ (adr r3, 8003ec0 <__kernel_cos+0x140>)
 8003dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc2:	4682      	mov	sl, r0
 8003dc4:	468b      	mov	fp, r1
 8003dc6:	4620      	mov	r0, r4
 8003dc8:	4629      	mov	r1, r5
 8003dca:	f7fc fbb9 	bl	8000540 <__aeabi_dmul>
 8003dce:	a33e      	add	r3, pc, #248	@ (adr r3, 8003ec8 <__kernel_cos+0x148>)
 8003dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd4:	f7fc f9fe 	bl	80001d4 <__adddf3>
 8003dd8:	4622      	mov	r2, r4
 8003dda:	462b      	mov	r3, r5
 8003ddc:	f7fc fbb0 	bl	8000540 <__aeabi_dmul>
 8003de0:	a33b      	add	r3, pc, #236	@ (adr r3, 8003ed0 <__kernel_cos+0x150>)
 8003de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de6:	f7fc f9f3 	bl	80001d0 <__aeabi_dsub>
 8003dea:	4622      	mov	r2, r4
 8003dec:	462b      	mov	r3, r5
 8003dee:	f7fc fba7 	bl	8000540 <__aeabi_dmul>
 8003df2:	a339      	add	r3, pc, #228	@ (adr r3, 8003ed8 <__kernel_cos+0x158>)
 8003df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df8:	f7fc f9ec 	bl	80001d4 <__adddf3>
 8003dfc:	4622      	mov	r2, r4
 8003dfe:	462b      	mov	r3, r5
 8003e00:	f7fc fb9e 	bl	8000540 <__aeabi_dmul>
 8003e04:	a336      	add	r3, pc, #216	@ (adr r3, 8003ee0 <__kernel_cos+0x160>)
 8003e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0a:	f7fc f9e1 	bl	80001d0 <__aeabi_dsub>
 8003e0e:	4622      	mov	r2, r4
 8003e10:	462b      	mov	r3, r5
 8003e12:	f7fc fb95 	bl	8000540 <__aeabi_dmul>
 8003e16:	a334      	add	r3, pc, #208	@ (adr r3, 8003ee8 <__kernel_cos+0x168>)
 8003e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1c:	f7fc f9da 	bl	80001d4 <__adddf3>
 8003e20:	4622      	mov	r2, r4
 8003e22:	462b      	mov	r3, r5
 8003e24:	f7fc fb8c 	bl	8000540 <__aeabi_dmul>
 8003e28:	4622      	mov	r2, r4
 8003e2a:	462b      	mov	r3, r5
 8003e2c:	f7fc fb88 	bl	8000540 <__aeabi_dmul>
 8003e30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003e34:	4604      	mov	r4, r0
 8003e36:	460d      	mov	r5, r1
 8003e38:	4630      	mov	r0, r6
 8003e3a:	4639      	mov	r1, r7
 8003e3c:	f7fc fb80 	bl	8000540 <__aeabi_dmul>
 8003e40:	460b      	mov	r3, r1
 8003e42:	4602      	mov	r2, r0
 8003e44:	4629      	mov	r1, r5
 8003e46:	4620      	mov	r0, r4
 8003e48:	f7fc f9c2 	bl	80001d0 <__aeabi_dsub>
 8003e4c:	4b2b      	ldr	r3, [pc, #172]	@ (8003efc <__kernel_cos+0x17c>)
 8003e4e:	4598      	cmp	r8, r3
 8003e50:	4606      	mov	r6, r0
 8003e52:	460f      	mov	r7, r1
 8003e54:	d810      	bhi.n	8003e78 <__kernel_cos+0xf8>
 8003e56:	4602      	mov	r2, r0
 8003e58:	460b      	mov	r3, r1
 8003e5a:	4650      	mov	r0, sl
 8003e5c:	4659      	mov	r1, fp
 8003e5e:	f7fc f9b7 	bl	80001d0 <__aeabi_dsub>
 8003e62:	460b      	mov	r3, r1
 8003e64:	4926      	ldr	r1, [pc, #152]	@ (8003f00 <__kernel_cos+0x180>)
 8003e66:	4602      	mov	r2, r0
 8003e68:	2000      	movs	r0, #0
 8003e6a:	f7fc f9b1 	bl	80001d0 <__aeabi_dsub>
 8003e6e:	ec41 0b10 	vmov	d0, r0, r1
 8003e72:	b003      	add	sp, #12
 8003e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e78:	4b22      	ldr	r3, [pc, #136]	@ (8003f04 <__kernel_cos+0x184>)
 8003e7a:	4921      	ldr	r1, [pc, #132]	@ (8003f00 <__kernel_cos+0x180>)
 8003e7c:	4598      	cmp	r8, r3
 8003e7e:	bf8c      	ite	hi
 8003e80:	4d21      	ldrhi	r5, [pc, #132]	@ (8003f08 <__kernel_cos+0x188>)
 8003e82:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8003e86:	2400      	movs	r4, #0
 8003e88:	4622      	mov	r2, r4
 8003e8a:	462b      	mov	r3, r5
 8003e8c:	2000      	movs	r0, #0
 8003e8e:	f7fc f99f 	bl	80001d0 <__aeabi_dsub>
 8003e92:	4622      	mov	r2, r4
 8003e94:	4680      	mov	r8, r0
 8003e96:	4689      	mov	r9, r1
 8003e98:	462b      	mov	r3, r5
 8003e9a:	4650      	mov	r0, sl
 8003e9c:	4659      	mov	r1, fp
 8003e9e:	f7fc f997 	bl	80001d0 <__aeabi_dsub>
 8003ea2:	4632      	mov	r2, r6
 8003ea4:	463b      	mov	r3, r7
 8003ea6:	f7fc f993 	bl	80001d0 <__aeabi_dsub>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	460b      	mov	r3, r1
 8003eae:	4640      	mov	r0, r8
 8003eb0:	4649      	mov	r1, r9
 8003eb2:	e7da      	b.n	8003e6a <__kernel_cos+0xea>
 8003eb4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8003ef0 <__kernel_cos+0x170>
 8003eb8:	e7db      	b.n	8003e72 <__kernel_cos+0xf2>
 8003eba:	bf00      	nop
 8003ebc:	f3af 8000 	nop.w
 8003ec0:	be8838d4 	.word	0xbe8838d4
 8003ec4:	bda8fae9 	.word	0xbda8fae9
 8003ec8:	bdb4b1c4 	.word	0xbdb4b1c4
 8003ecc:	3e21ee9e 	.word	0x3e21ee9e
 8003ed0:	809c52ad 	.word	0x809c52ad
 8003ed4:	3e927e4f 	.word	0x3e927e4f
 8003ed8:	19cb1590 	.word	0x19cb1590
 8003edc:	3efa01a0 	.word	0x3efa01a0
 8003ee0:	16c15177 	.word	0x16c15177
 8003ee4:	3f56c16c 	.word	0x3f56c16c
 8003ee8:	5555554c 	.word	0x5555554c
 8003eec:	3fa55555 	.word	0x3fa55555
 8003ef0:	00000000 	.word	0x00000000
 8003ef4:	3ff00000 	.word	0x3ff00000
 8003ef8:	3fe00000 	.word	0x3fe00000
 8003efc:	3fd33332 	.word	0x3fd33332
 8003f00:	3ff00000 	.word	0x3ff00000
 8003f04:	3fe90000 	.word	0x3fe90000
 8003f08:	3fd20000 	.word	0x3fd20000
 8003f0c:	00000000 	.word	0x00000000

08003f10 <__kernel_sin>:
 8003f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f14:	ec55 4b10 	vmov	r4, r5, d0
 8003f18:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8003f1c:	b085      	sub	sp, #20
 8003f1e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8003f22:	ed8d 1b02 	vstr	d1, [sp, #8]
 8003f26:	4680      	mov	r8, r0
 8003f28:	d205      	bcs.n	8003f36 <__kernel_sin+0x26>
 8003f2a:	4620      	mov	r0, r4
 8003f2c:	4629      	mov	r1, r5
 8003f2e:	f7fc fda1 	bl	8000a74 <__aeabi_d2iz>
 8003f32:	2800      	cmp	r0, #0
 8003f34:	d052      	beq.n	8003fdc <__kernel_sin+0xcc>
 8003f36:	4622      	mov	r2, r4
 8003f38:	462b      	mov	r3, r5
 8003f3a:	4620      	mov	r0, r4
 8003f3c:	4629      	mov	r1, r5
 8003f3e:	f7fc faff 	bl	8000540 <__aeabi_dmul>
 8003f42:	4682      	mov	sl, r0
 8003f44:	468b      	mov	fp, r1
 8003f46:	4602      	mov	r2, r0
 8003f48:	460b      	mov	r3, r1
 8003f4a:	4620      	mov	r0, r4
 8003f4c:	4629      	mov	r1, r5
 8003f4e:	f7fc faf7 	bl	8000540 <__aeabi_dmul>
 8003f52:	a342      	add	r3, pc, #264	@ (adr r3, 800405c <__kernel_sin+0x14c>)
 8003f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f58:	e9cd 0100 	strd	r0, r1, [sp]
 8003f5c:	4650      	mov	r0, sl
 8003f5e:	4659      	mov	r1, fp
 8003f60:	f7fc faee 	bl	8000540 <__aeabi_dmul>
 8003f64:	a33f      	add	r3, pc, #252	@ (adr r3, 8004064 <__kernel_sin+0x154>)
 8003f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6a:	f7fc f931 	bl	80001d0 <__aeabi_dsub>
 8003f6e:	4652      	mov	r2, sl
 8003f70:	465b      	mov	r3, fp
 8003f72:	f7fc fae5 	bl	8000540 <__aeabi_dmul>
 8003f76:	a33d      	add	r3, pc, #244	@ (adr r3, 800406c <__kernel_sin+0x15c>)
 8003f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7c:	f7fc f92a 	bl	80001d4 <__adddf3>
 8003f80:	4652      	mov	r2, sl
 8003f82:	465b      	mov	r3, fp
 8003f84:	f7fc fadc 	bl	8000540 <__aeabi_dmul>
 8003f88:	a33a      	add	r3, pc, #232	@ (adr r3, 8004074 <__kernel_sin+0x164>)
 8003f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8e:	f7fc f91f 	bl	80001d0 <__aeabi_dsub>
 8003f92:	4652      	mov	r2, sl
 8003f94:	465b      	mov	r3, fp
 8003f96:	f7fc fad3 	bl	8000540 <__aeabi_dmul>
 8003f9a:	a338      	add	r3, pc, #224	@ (adr r3, 800407c <__kernel_sin+0x16c>)
 8003f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa0:	f7fc f918 	bl	80001d4 <__adddf3>
 8003fa4:	4606      	mov	r6, r0
 8003fa6:	460f      	mov	r7, r1
 8003fa8:	f1b8 0f00 	cmp.w	r8, #0
 8003fac:	d11b      	bne.n	8003fe6 <__kernel_sin+0xd6>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	4650      	mov	r0, sl
 8003fb4:	4659      	mov	r1, fp
 8003fb6:	f7fc fac3 	bl	8000540 <__aeabi_dmul>
 8003fba:	a325      	add	r3, pc, #148	@ (adr r3, 8004050 <__kernel_sin+0x140>)
 8003fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc0:	f7fc f906 	bl	80001d0 <__aeabi_dsub>
 8003fc4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003fc8:	f7fc faba 	bl	8000540 <__aeabi_dmul>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	4620      	mov	r0, r4
 8003fd2:	4629      	mov	r1, r5
 8003fd4:	f7fc f8fe 	bl	80001d4 <__adddf3>
 8003fd8:	4604      	mov	r4, r0
 8003fda:	460d      	mov	r5, r1
 8003fdc:	ec45 4b10 	vmov	d0, r4, r5
 8003fe0:	b005      	add	sp, #20
 8003fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003fea:	4b1b      	ldr	r3, [pc, #108]	@ (8004058 <__kernel_sin+0x148>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	f7fc faa7 	bl	8000540 <__aeabi_dmul>
 8003ff2:	4632      	mov	r2, r6
 8003ff4:	4680      	mov	r8, r0
 8003ff6:	4689      	mov	r9, r1
 8003ff8:	463b      	mov	r3, r7
 8003ffa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003ffe:	f7fc fa9f 	bl	8000540 <__aeabi_dmul>
 8004002:	4602      	mov	r2, r0
 8004004:	460b      	mov	r3, r1
 8004006:	4640      	mov	r0, r8
 8004008:	4649      	mov	r1, r9
 800400a:	f7fc f8e1 	bl	80001d0 <__aeabi_dsub>
 800400e:	4652      	mov	r2, sl
 8004010:	465b      	mov	r3, fp
 8004012:	f7fc fa95 	bl	8000540 <__aeabi_dmul>
 8004016:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800401a:	f7fc f8d9 	bl	80001d0 <__aeabi_dsub>
 800401e:	a30c      	add	r3, pc, #48	@ (adr r3, 8004050 <__kernel_sin+0x140>)
 8004020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004024:	4606      	mov	r6, r0
 8004026:	460f      	mov	r7, r1
 8004028:	e9dd 0100 	ldrd	r0, r1, [sp]
 800402c:	f7fc fa88 	bl	8000540 <__aeabi_dmul>
 8004030:	4602      	mov	r2, r0
 8004032:	460b      	mov	r3, r1
 8004034:	4630      	mov	r0, r6
 8004036:	4639      	mov	r1, r7
 8004038:	f7fc f8cc 	bl	80001d4 <__adddf3>
 800403c:	4602      	mov	r2, r0
 800403e:	460b      	mov	r3, r1
 8004040:	4620      	mov	r0, r4
 8004042:	4629      	mov	r1, r5
 8004044:	f7fc f8c4 	bl	80001d0 <__aeabi_dsub>
 8004048:	e7c6      	b.n	8003fd8 <__kernel_sin+0xc8>
 800404a:	bf00      	nop
 800404c:	f3af 8000 	nop.w
 8004050:	55555549 	.word	0x55555549
 8004054:	3fc55555 	.word	0x3fc55555
 8004058:	3fe00000 	.word	0x3fe00000
 800405c:	5acfd57c 	.word	0x5acfd57c
 8004060:	3de5d93a 	.word	0x3de5d93a
 8004064:	8a2b9ceb 	.word	0x8a2b9ceb
 8004068:	3e5ae5e6 	.word	0x3e5ae5e6
 800406c:	57b1fe7d 	.word	0x57b1fe7d
 8004070:	3ec71de3 	.word	0x3ec71de3
 8004074:	19c161d5 	.word	0x19c161d5
 8004078:	3f2a01a0 	.word	0x3f2a01a0
 800407c:	1110f8a6 	.word	0x1110f8a6
 8004080:	3f811111 	.word	0x3f811111
 8004084:	00000000 	.word	0x00000000

08004088 <__ieee754_rem_pio2>:
 8004088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800408c:	ec57 6b10 	vmov	r6, r7, d0
 8004090:	4bc5      	ldr	r3, [pc, #788]	@ (80043a8 <__ieee754_rem_pio2+0x320>)
 8004092:	b08d      	sub	sp, #52	@ 0x34
 8004094:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8004098:	4598      	cmp	r8, r3
 800409a:	4604      	mov	r4, r0
 800409c:	9704      	str	r7, [sp, #16]
 800409e:	d807      	bhi.n	80040b0 <__ieee754_rem_pio2+0x28>
 80040a0:	2200      	movs	r2, #0
 80040a2:	2300      	movs	r3, #0
 80040a4:	ed80 0b00 	vstr	d0, [r0]
 80040a8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80040ac:	2500      	movs	r5, #0
 80040ae:	e028      	b.n	8004102 <__ieee754_rem_pio2+0x7a>
 80040b0:	4bbe      	ldr	r3, [pc, #760]	@ (80043ac <__ieee754_rem_pio2+0x324>)
 80040b2:	4598      	cmp	r8, r3
 80040b4:	d878      	bhi.n	80041a8 <__ieee754_rem_pio2+0x120>
 80040b6:	9b04      	ldr	r3, [sp, #16]
 80040b8:	4dbd      	ldr	r5, [pc, #756]	@ (80043b0 <__ieee754_rem_pio2+0x328>)
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	4630      	mov	r0, r6
 80040be:	a3ac      	add	r3, pc, #688	@ (adr r3, 8004370 <__ieee754_rem_pio2+0x2e8>)
 80040c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c4:	4639      	mov	r1, r7
 80040c6:	dd38      	ble.n	800413a <__ieee754_rem_pio2+0xb2>
 80040c8:	f7fc f882 	bl	80001d0 <__aeabi_dsub>
 80040cc:	45a8      	cmp	r8, r5
 80040ce:	4606      	mov	r6, r0
 80040d0:	460f      	mov	r7, r1
 80040d2:	d01a      	beq.n	800410a <__ieee754_rem_pio2+0x82>
 80040d4:	a3a8      	add	r3, pc, #672	@ (adr r3, 8004378 <__ieee754_rem_pio2+0x2f0>)
 80040d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040da:	f7fc f879 	bl	80001d0 <__aeabi_dsub>
 80040de:	4602      	mov	r2, r0
 80040e0:	460b      	mov	r3, r1
 80040e2:	4680      	mov	r8, r0
 80040e4:	4689      	mov	r9, r1
 80040e6:	4630      	mov	r0, r6
 80040e8:	4639      	mov	r1, r7
 80040ea:	f7fc f871 	bl	80001d0 <__aeabi_dsub>
 80040ee:	a3a2      	add	r3, pc, #648	@ (adr r3, 8004378 <__ieee754_rem_pio2+0x2f0>)
 80040f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f4:	f7fc f86c 	bl	80001d0 <__aeabi_dsub>
 80040f8:	e9c4 8900 	strd	r8, r9, [r4]
 80040fc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004100:	2501      	movs	r5, #1
 8004102:	4628      	mov	r0, r5
 8004104:	b00d      	add	sp, #52	@ 0x34
 8004106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800410a:	a39d      	add	r3, pc, #628	@ (adr r3, 8004380 <__ieee754_rem_pio2+0x2f8>)
 800410c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004110:	f7fc f85e 	bl	80001d0 <__aeabi_dsub>
 8004114:	a39c      	add	r3, pc, #624	@ (adr r3, 8004388 <__ieee754_rem_pio2+0x300>)
 8004116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411a:	4606      	mov	r6, r0
 800411c:	460f      	mov	r7, r1
 800411e:	f7fc f857 	bl	80001d0 <__aeabi_dsub>
 8004122:	4602      	mov	r2, r0
 8004124:	460b      	mov	r3, r1
 8004126:	4680      	mov	r8, r0
 8004128:	4689      	mov	r9, r1
 800412a:	4630      	mov	r0, r6
 800412c:	4639      	mov	r1, r7
 800412e:	f7fc f84f 	bl	80001d0 <__aeabi_dsub>
 8004132:	a395      	add	r3, pc, #596	@ (adr r3, 8004388 <__ieee754_rem_pio2+0x300>)
 8004134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004138:	e7dc      	b.n	80040f4 <__ieee754_rem_pio2+0x6c>
 800413a:	f7fc f84b 	bl	80001d4 <__adddf3>
 800413e:	45a8      	cmp	r8, r5
 8004140:	4606      	mov	r6, r0
 8004142:	460f      	mov	r7, r1
 8004144:	d018      	beq.n	8004178 <__ieee754_rem_pio2+0xf0>
 8004146:	a38c      	add	r3, pc, #560	@ (adr r3, 8004378 <__ieee754_rem_pio2+0x2f0>)
 8004148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414c:	f7fc f842 	bl	80001d4 <__adddf3>
 8004150:	4602      	mov	r2, r0
 8004152:	460b      	mov	r3, r1
 8004154:	4680      	mov	r8, r0
 8004156:	4689      	mov	r9, r1
 8004158:	4630      	mov	r0, r6
 800415a:	4639      	mov	r1, r7
 800415c:	f7fc f838 	bl	80001d0 <__aeabi_dsub>
 8004160:	a385      	add	r3, pc, #532	@ (adr r3, 8004378 <__ieee754_rem_pio2+0x2f0>)
 8004162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004166:	f7fc f835 	bl	80001d4 <__adddf3>
 800416a:	f04f 35ff 	mov.w	r5, #4294967295
 800416e:	e9c4 8900 	strd	r8, r9, [r4]
 8004172:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004176:	e7c4      	b.n	8004102 <__ieee754_rem_pio2+0x7a>
 8004178:	a381      	add	r3, pc, #516	@ (adr r3, 8004380 <__ieee754_rem_pio2+0x2f8>)
 800417a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417e:	f7fc f829 	bl	80001d4 <__adddf3>
 8004182:	a381      	add	r3, pc, #516	@ (adr r3, 8004388 <__ieee754_rem_pio2+0x300>)
 8004184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004188:	4606      	mov	r6, r0
 800418a:	460f      	mov	r7, r1
 800418c:	f7fc f822 	bl	80001d4 <__adddf3>
 8004190:	4602      	mov	r2, r0
 8004192:	460b      	mov	r3, r1
 8004194:	4680      	mov	r8, r0
 8004196:	4689      	mov	r9, r1
 8004198:	4630      	mov	r0, r6
 800419a:	4639      	mov	r1, r7
 800419c:	f7fc f818 	bl	80001d0 <__aeabi_dsub>
 80041a0:	a379      	add	r3, pc, #484	@ (adr r3, 8004388 <__ieee754_rem_pio2+0x300>)
 80041a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a6:	e7de      	b.n	8004166 <__ieee754_rem_pio2+0xde>
 80041a8:	4b82      	ldr	r3, [pc, #520]	@ (80043b4 <__ieee754_rem_pio2+0x32c>)
 80041aa:	4598      	cmp	r8, r3
 80041ac:	f200 80d1 	bhi.w	8004352 <__ieee754_rem_pio2+0x2ca>
 80041b0:	f000 f966 	bl	8004480 <fabs>
 80041b4:	ec57 6b10 	vmov	r6, r7, d0
 80041b8:	a375      	add	r3, pc, #468	@ (adr r3, 8004390 <__ieee754_rem_pio2+0x308>)
 80041ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041be:	4630      	mov	r0, r6
 80041c0:	4639      	mov	r1, r7
 80041c2:	f7fc f9bd 	bl	8000540 <__aeabi_dmul>
 80041c6:	4b7c      	ldr	r3, [pc, #496]	@ (80043b8 <__ieee754_rem_pio2+0x330>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	f7fc f803 	bl	80001d4 <__adddf3>
 80041ce:	f7fc fc51 	bl	8000a74 <__aeabi_d2iz>
 80041d2:	4605      	mov	r5, r0
 80041d4:	f7fc f94a 	bl	800046c <__aeabi_i2d>
 80041d8:	4602      	mov	r2, r0
 80041da:	460b      	mov	r3, r1
 80041dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80041e0:	a363      	add	r3, pc, #396	@ (adr r3, 8004370 <__ieee754_rem_pio2+0x2e8>)
 80041e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e6:	f7fc f9ab 	bl	8000540 <__aeabi_dmul>
 80041ea:	4602      	mov	r2, r0
 80041ec:	460b      	mov	r3, r1
 80041ee:	4630      	mov	r0, r6
 80041f0:	4639      	mov	r1, r7
 80041f2:	f7fb ffed 	bl	80001d0 <__aeabi_dsub>
 80041f6:	a360      	add	r3, pc, #384	@ (adr r3, 8004378 <__ieee754_rem_pio2+0x2f0>)
 80041f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fc:	4682      	mov	sl, r0
 80041fe:	468b      	mov	fp, r1
 8004200:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004204:	f7fc f99c 	bl	8000540 <__aeabi_dmul>
 8004208:	2d1f      	cmp	r5, #31
 800420a:	4606      	mov	r6, r0
 800420c:	460f      	mov	r7, r1
 800420e:	dc0c      	bgt.n	800422a <__ieee754_rem_pio2+0x1a2>
 8004210:	4b6a      	ldr	r3, [pc, #424]	@ (80043bc <__ieee754_rem_pio2+0x334>)
 8004212:	1e6a      	subs	r2, r5, #1
 8004214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004218:	4543      	cmp	r3, r8
 800421a:	d006      	beq.n	800422a <__ieee754_rem_pio2+0x1a2>
 800421c:	4632      	mov	r2, r6
 800421e:	463b      	mov	r3, r7
 8004220:	4650      	mov	r0, sl
 8004222:	4659      	mov	r1, fp
 8004224:	f7fb ffd4 	bl	80001d0 <__aeabi_dsub>
 8004228:	e00e      	b.n	8004248 <__ieee754_rem_pio2+0x1c0>
 800422a:	463b      	mov	r3, r7
 800422c:	4632      	mov	r2, r6
 800422e:	4650      	mov	r0, sl
 8004230:	4659      	mov	r1, fp
 8004232:	f7fb ffcd 	bl	80001d0 <__aeabi_dsub>
 8004236:	ea4f 5328 	mov.w	r3, r8, asr #20
 800423a:	9305      	str	r3, [sp, #20]
 800423c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004240:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8004244:	2b10      	cmp	r3, #16
 8004246:	dc02      	bgt.n	800424e <__ieee754_rem_pio2+0x1c6>
 8004248:	e9c4 0100 	strd	r0, r1, [r4]
 800424c:	e039      	b.n	80042c2 <__ieee754_rem_pio2+0x23a>
 800424e:	a34c      	add	r3, pc, #304	@ (adr r3, 8004380 <__ieee754_rem_pio2+0x2f8>)
 8004250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004254:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004258:	f7fc f972 	bl	8000540 <__aeabi_dmul>
 800425c:	4606      	mov	r6, r0
 800425e:	460f      	mov	r7, r1
 8004260:	4602      	mov	r2, r0
 8004262:	460b      	mov	r3, r1
 8004264:	4650      	mov	r0, sl
 8004266:	4659      	mov	r1, fp
 8004268:	f7fb ffb2 	bl	80001d0 <__aeabi_dsub>
 800426c:	4602      	mov	r2, r0
 800426e:	460b      	mov	r3, r1
 8004270:	4680      	mov	r8, r0
 8004272:	4689      	mov	r9, r1
 8004274:	4650      	mov	r0, sl
 8004276:	4659      	mov	r1, fp
 8004278:	f7fb ffaa 	bl	80001d0 <__aeabi_dsub>
 800427c:	4632      	mov	r2, r6
 800427e:	463b      	mov	r3, r7
 8004280:	f7fb ffa6 	bl	80001d0 <__aeabi_dsub>
 8004284:	a340      	add	r3, pc, #256	@ (adr r3, 8004388 <__ieee754_rem_pio2+0x300>)
 8004286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428a:	4606      	mov	r6, r0
 800428c:	460f      	mov	r7, r1
 800428e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004292:	f7fc f955 	bl	8000540 <__aeabi_dmul>
 8004296:	4632      	mov	r2, r6
 8004298:	463b      	mov	r3, r7
 800429a:	f7fb ff99 	bl	80001d0 <__aeabi_dsub>
 800429e:	4602      	mov	r2, r0
 80042a0:	460b      	mov	r3, r1
 80042a2:	4606      	mov	r6, r0
 80042a4:	460f      	mov	r7, r1
 80042a6:	4640      	mov	r0, r8
 80042a8:	4649      	mov	r1, r9
 80042aa:	f7fb ff91 	bl	80001d0 <__aeabi_dsub>
 80042ae:	9a05      	ldr	r2, [sp, #20]
 80042b0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b31      	cmp	r3, #49	@ 0x31
 80042b8:	dc20      	bgt.n	80042fc <__ieee754_rem_pio2+0x274>
 80042ba:	e9c4 0100 	strd	r0, r1, [r4]
 80042be:	46c2      	mov	sl, r8
 80042c0:	46cb      	mov	fp, r9
 80042c2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80042c6:	4650      	mov	r0, sl
 80042c8:	4642      	mov	r2, r8
 80042ca:	464b      	mov	r3, r9
 80042cc:	4659      	mov	r1, fp
 80042ce:	f7fb ff7f 	bl	80001d0 <__aeabi_dsub>
 80042d2:	463b      	mov	r3, r7
 80042d4:	4632      	mov	r2, r6
 80042d6:	f7fb ff7b 	bl	80001d0 <__aeabi_dsub>
 80042da:	9b04      	ldr	r3, [sp, #16]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80042e2:	f6bf af0e 	bge.w	8004102 <__ieee754_rem_pio2+0x7a>
 80042e6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80042ea:	6063      	str	r3, [r4, #4]
 80042ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80042f0:	f8c4 8000 	str.w	r8, [r4]
 80042f4:	60a0      	str	r0, [r4, #8]
 80042f6:	60e3      	str	r3, [r4, #12]
 80042f8:	426d      	negs	r5, r5
 80042fa:	e702      	b.n	8004102 <__ieee754_rem_pio2+0x7a>
 80042fc:	a326      	add	r3, pc, #152	@ (adr r3, 8004398 <__ieee754_rem_pio2+0x310>)
 80042fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004302:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004306:	f7fc f91b 	bl	8000540 <__aeabi_dmul>
 800430a:	4606      	mov	r6, r0
 800430c:	460f      	mov	r7, r1
 800430e:	4602      	mov	r2, r0
 8004310:	460b      	mov	r3, r1
 8004312:	4640      	mov	r0, r8
 8004314:	4649      	mov	r1, r9
 8004316:	f7fb ff5b 	bl	80001d0 <__aeabi_dsub>
 800431a:	4602      	mov	r2, r0
 800431c:	460b      	mov	r3, r1
 800431e:	4682      	mov	sl, r0
 8004320:	468b      	mov	fp, r1
 8004322:	4640      	mov	r0, r8
 8004324:	4649      	mov	r1, r9
 8004326:	f7fb ff53 	bl	80001d0 <__aeabi_dsub>
 800432a:	4632      	mov	r2, r6
 800432c:	463b      	mov	r3, r7
 800432e:	f7fb ff4f 	bl	80001d0 <__aeabi_dsub>
 8004332:	a31b      	add	r3, pc, #108	@ (adr r3, 80043a0 <__ieee754_rem_pio2+0x318>)
 8004334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004338:	4606      	mov	r6, r0
 800433a:	460f      	mov	r7, r1
 800433c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004340:	f7fc f8fe 	bl	8000540 <__aeabi_dmul>
 8004344:	4632      	mov	r2, r6
 8004346:	463b      	mov	r3, r7
 8004348:	f7fb ff42 	bl	80001d0 <__aeabi_dsub>
 800434c:	4606      	mov	r6, r0
 800434e:	460f      	mov	r7, r1
 8004350:	e764      	b.n	800421c <__ieee754_rem_pio2+0x194>
 8004352:	4b1b      	ldr	r3, [pc, #108]	@ (80043c0 <__ieee754_rem_pio2+0x338>)
 8004354:	4598      	cmp	r8, r3
 8004356:	d935      	bls.n	80043c4 <__ieee754_rem_pio2+0x33c>
 8004358:	4632      	mov	r2, r6
 800435a:	463b      	mov	r3, r7
 800435c:	4630      	mov	r0, r6
 800435e:	4639      	mov	r1, r7
 8004360:	f7fb ff36 	bl	80001d0 <__aeabi_dsub>
 8004364:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004368:	e9c4 0100 	strd	r0, r1, [r4]
 800436c:	e69e      	b.n	80040ac <__ieee754_rem_pio2+0x24>
 800436e:	bf00      	nop
 8004370:	54400000 	.word	0x54400000
 8004374:	3ff921fb 	.word	0x3ff921fb
 8004378:	1a626331 	.word	0x1a626331
 800437c:	3dd0b461 	.word	0x3dd0b461
 8004380:	1a600000 	.word	0x1a600000
 8004384:	3dd0b461 	.word	0x3dd0b461
 8004388:	2e037073 	.word	0x2e037073
 800438c:	3ba3198a 	.word	0x3ba3198a
 8004390:	6dc9c883 	.word	0x6dc9c883
 8004394:	3fe45f30 	.word	0x3fe45f30
 8004398:	2e000000 	.word	0x2e000000
 800439c:	3ba3198a 	.word	0x3ba3198a
 80043a0:	252049c1 	.word	0x252049c1
 80043a4:	397b839a 	.word	0x397b839a
 80043a8:	3fe921fb 	.word	0x3fe921fb
 80043ac:	4002d97b 	.word	0x4002d97b
 80043b0:	3ff921fb 	.word	0x3ff921fb
 80043b4:	413921fb 	.word	0x413921fb
 80043b8:	3fe00000 	.word	0x3fe00000
 80043bc:	08004d60 	.word	0x08004d60
 80043c0:	7fefffff 	.word	0x7fefffff
 80043c4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80043c8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80043cc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80043d0:	4630      	mov	r0, r6
 80043d2:	460f      	mov	r7, r1
 80043d4:	f7fc fb4e 	bl	8000a74 <__aeabi_d2iz>
 80043d8:	f7fc f848 	bl	800046c <__aeabi_i2d>
 80043dc:	4602      	mov	r2, r0
 80043de:	460b      	mov	r3, r1
 80043e0:	4630      	mov	r0, r6
 80043e2:	4639      	mov	r1, r7
 80043e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80043e8:	f7fb fef2 	bl	80001d0 <__aeabi_dsub>
 80043ec:	4b22      	ldr	r3, [pc, #136]	@ (8004478 <__ieee754_rem_pio2+0x3f0>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	f7fc f8a6 	bl	8000540 <__aeabi_dmul>
 80043f4:	460f      	mov	r7, r1
 80043f6:	4606      	mov	r6, r0
 80043f8:	f7fc fb3c 	bl	8000a74 <__aeabi_d2iz>
 80043fc:	f7fc f836 	bl	800046c <__aeabi_i2d>
 8004400:	4602      	mov	r2, r0
 8004402:	460b      	mov	r3, r1
 8004404:	4630      	mov	r0, r6
 8004406:	4639      	mov	r1, r7
 8004408:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800440c:	f7fb fee0 	bl	80001d0 <__aeabi_dsub>
 8004410:	4b19      	ldr	r3, [pc, #100]	@ (8004478 <__ieee754_rem_pio2+0x3f0>)
 8004412:	2200      	movs	r2, #0
 8004414:	f7fc f894 	bl	8000540 <__aeabi_dmul>
 8004418:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800441c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8004420:	f04f 0803 	mov.w	r8, #3
 8004424:	2600      	movs	r6, #0
 8004426:	2700      	movs	r7, #0
 8004428:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800442c:	4632      	mov	r2, r6
 800442e:	463b      	mov	r3, r7
 8004430:	46c2      	mov	sl, r8
 8004432:	f108 38ff 	add.w	r8, r8, #4294967295
 8004436:	f7fc faeb 	bl	8000a10 <__aeabi_dcmpeq>
 800443a:	2800      	cmp	r0, #0
 800443c:	d1f4      	bne.n	8004428 <__ieee754_rem_pio2+0x3a0>
 800443e:	4b0f      	ldr	r3, [pc, #60]	@ (800447c <__ieee754_rem_pio2+0x3f4>)
 8004440:	9301      	str	r3, [sp, #4]
 8004442:	2302      	movs	r3, #2
 8004444:	9300      	str	r3, [sp, #0]
 8004446:	462a      	mov	r2, r5
 8004448:	4653      	mov	r3, sl
 800444a:	4621      	mov	r1, r4
 800444c:	a806      	add	r0, sp, #24
 800444e:	f000 f81f 	bl	8004490 <__kernel_rem_pio2>
 8004452:	9b04      	ldr	r3, [sp, #16]
 8004454:	2b00      	cmp	r3, #0
 8004456:	4605      	mov	r5, r0
 8004458:	f6bf ae53 	bge.w	8004102 <__ieee754_rem_pio2+0x7a>
 800445c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8004460:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004464:	e9c4 2300 	strd	r2, r3, [r4]
 8004468:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800446c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004470:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004474:	e740      	b.n	80042f8 <__ieee754_rem_pio2+0x270>
 8004476:	bf00      	nop
 8004478:	41700000 	.word	0x41700000
 800447c:	08004de0 	.word	0x08004de0

08004480 <fabs>:
 8004480:	ec51 0b10 	vmov	r0, r1, d0
 8004484:	4602      	mov	r2, r0
 8004486:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800448a:	ec43 2b10 	vmov	d0, r2, r3
 800448e:	4770      	bx	lr

08004490 <__kernel_rem_pio2>:
 8004490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004494:	ed2d 8b02 	vpush	{d8}
 8004498:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800449c:	f112 0f14 	cmn.w	r2, #20
 80044a0:	9306      	str	r3, [sp, #24]
 80044a2:	9104      	str	r1, [sp, #16]
 80044a4:	4bbe      	ldr	r3, [pc, #760]	@ (80047a0 <__kernel_rem_pio2+0x310>)
 80044a6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80044a8:	9008      	str	r0, [sp, #32]
 80044aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80044ae:	9300      	str	r3, [sp, #0]
 80044b0:	9b06      	ldr	r3, [sp, #24]
 80044b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80044b6:	bfa8      	it	ge
 80044b8:	1ed4      	subge	r4, r2, #3
 80044ba:	9305      	str	r3, [sp, #20]
 80044bc:	bfb2      	itee	lt
 80044be:	2400      	movlt	r4, #0
 80044c0:	2318      	movge	r3, #24
 80044c2:	fb94 f4f3 	sdivge	r4, r4, r3
 80044c6:	f06f 0317 	mvn.w	r3, #23
 80044ca:	fb04 3303 	mla	r3, r4, r3, r3
 80044ce:	eb03 0b02 	add.w	fp, r3, r2
 80044d2:	9b00      	ldr	r3, [sp, #0]
 80044d4:	9a05      	ldr	r2, [sp, #20]
 80044d6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8004790 <__kernel_rem_pio2+0x300>
 80044da:	eb03 0802 	add.w	r8, r3, r2
 80044de:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80044e0:	1aa7      	subs	r7, r4, r2
 80044e2:	ae20      	add	r6, sp, #128	@ 0x80
 80044e4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80044e8:	2500      	movs	r5, #0
 80044ea:	4545      	cmp	r5, r8
 80044ec:	dd13      	ble.n	8004516 <__kernel_rem_pio2+0x86>
 80044ee:	9b06      	ldr	r3, [sp, #24]
 80044f0:	aa20      	add	r2, sp, #128	@ 0x80
 80044f2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80044f6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80044fa:	f04f 0800 	mov.w	r8, #0
 80044fe:	9b00      	ldr	r3, [sp, #0]
 8004500:	4598      	cmp	r8, r3
 8004502:	dc31      	bgt.n	8004568 <__kernel_rem_pio2+0xd8>
 8004504:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8004790 <__kernel_rem_pio2+0x300>
 8004508:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800450c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004510:	462f      	mov	r7, r5
 8004512:	2600      	movs	r6, #0
 8004514:	e01b      	b.n	800454e <__kernel_rem_pio2+0xbe>
 8004516:	42ef      	cmn	r7, r5
 8004518:	d407      	bmi.n	800452a <__kernel_rem_pio2+0x9a>
 800451a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800451e:	f7fb ffa5 	bl	800046c <__aeabi_i2d>
 8004522:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004526:	3501      	adds	r5, #1
 8004528:	e7df      	b.n	80044ea <__kernel_rem_pio2+0x5a>
 800452a:	ec51 0b18 	vmov	r0, r1, d8
 800452e:	e7f8      	b.n	8004522 <__kernel_rem_pio2+0x92>
 8004530:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004534:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004538:	f7fc f802 	bl	8000540 <__aeabi_dmul>
 800453c:	4602      	mov	r2, r0
 800453e:	460b      	mov	r3, r1
 8004540:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004544:	f7fb fe46 	bl	80001d4 <__adddf3>
 8004548:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800454c:	3601      	adds	r6, #1
 800454e:	9b05      	ldr	r3, [sp, #20]
 8004550:	429e      	cmp	r6, r3
 8004552:	f1a7 0708 	sub.w	r7, r7, #8
 8004556:	ddeb      	ble.n	8004530 <__kernel_rem_pio2+0xa0>
 8004558:	ed9d 7b02 	vldr	d7, [sp, #8]
 800455c:	f108 0801 	add.w	r8, r8, #1
 8004560:	ecaa 7b02 	vstmia	sl!, {d7}
 8004564:	3508      	adds	r5, #8
 8004566:	e7ca      	b.n	80044fe <__kernel_rem_pio2+0x6e>
 8004568:	9b00      	ldr	r3, [sp, #0]
 800456a:	f8dd 8000 	ldr.w	r8, [sp]
 800456e:	aa0c      	add	r2, sp, #48	@ 0x30
 8004570:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004574:	930a      	str	r3, [sp, #40]	@ 0x28
 8004576:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8004578:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800457c:	9309      	str	r3, [sp, #36]	@ 0x24
 800457e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8004582:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004584:	ab98      	add	r3, sp, #608	@ 0x260
 8004586:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800458a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800458e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004592:	ac0c      	add	r4, sp, #48	@ 0x30
 8004594:	ab70      	add	r3, sp, #448	@ 0x1c0
 8004596:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800459a:	46a1      	mov	r9, r4
 800459c:	46c2      	mov	sl, r8
 800459e:	f1ba 0f00 	cmp.w	sl, #0
 80045a2:	f1a5 0508 	sub.w	r5, r5, #8
 80045a6:	dc77      	bgt.n	8004698 <__kernel_rem_pio2+0x208>
 80045a8:	4658      	mov	r0, fp
 80045aa:	ed9d 0b02 	vldr	d0, [sp, #8]
 80045ae:	f000 fac7 	bl	8004b40 <scalbn>
 80045b2:	ec57 6b10 	vmov	r6, r7, d0
 80045b6:	2200      	movs	r2, #0
 80045b8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80045bc:	4630      	mov	r0, r6
 80045be:	4639      	mov	r1, r7
 80045c0:	f7fb ffbe 	bl	8000540 <__aeabi_dmul>
 80045c4:	ec41 0b10 	vmov	d0, r0, r1
 80045c8:	f000 fb3a 	bl	8004c40 <floor>
 80045cc:	4b75      	ldr	r3, [pc, #468]	@ (80047a4 <__kernel_rem_pio2+0x314>)
 80045ce:	ec51 0b10 	vmov	r0, r1, d0
 80045d2:	2200      	movs	r2, #0
 80045d4:	f7fb ffb4 	bl	8000540 <__aeabi_dmul>
 80045d8:	4602      	mov	r2, r0
 80045da:	460b      	mov	r3, r1
 80045dc:	4630      	mov	r0, r6
 80045de:	4639      	mov	r1, r7
 80045e0:	f7fb fdf6 	bl	80001d0 <__aeabi_dsub>
 80045e4:	460f      	mov	r7, r1
 80045e6:	4606      	mov	r6, r0
 80045e8:	f7fc fa44 	bl	8000a74 <__aeabi_d2iz>
 80045ec:	9002      	str	r0, [sp, #8]
 80045ee:	f7fb ff3d 	bl	800046c <__aeabi_i2d>
 80045f2:	4602      	mov	r2, r0
 80045f4:	460b      	mov	r3, r1
 80045f6:	4630      	mov	r0, r6
 80045f8:	4639      	mov	r1, r7
 80045fa:	f7fb fde9 	bl	80001d0 <__aeabi_dsub>
 80045fe:	f1bb 0f00 	cmp.w	fp, #0
 8004602:	4606      	mov	r6, r0
 8004604:	460f      	mov	r7, r1
 8004606:	dd6c      	ble.n	80046e2 <__kernel_rem_pio2+0x252>
 8004608:	f108 31ff 	add.w	r1, r8, #4294967295
 800460c:	ab0c      	add	r3, sp, #48	@ 0x30
 800460e:	9d02      	ldr	r5, [sp, #8]
 8004610:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004614:	f1cb 0018 	rsb	r0, fp, #24
 8004618:	fa43 f200 	asr.w	r2, r3, r0
 800461c:	4415      	add	r5, r2
 800461e:	4082      	lsls	r2, r0
 8004620:	1a9b      	subs	r3, r3, r2
 8004622:	aa0c      	add	r2, sp, #48	@ 0x30
 8004624:	9502      	str	r5, [sp, #8]
 8004626:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800462a:	f1cb 0217 	rsb	r2, fp, #23
 800462e:	fa43 f902 	asr.w	r9, r3, r2
 8004632:	f1b9 0f00 	cmp.w	r9, #0
 8004636:	dd64      	ble.n	8004702 <__kernel_rem_pio2+0x272>
 8004638:	9b02      	ldr	r3, [sp, #8]
 800463a:	2200      	movs	r2, #0
 800463c:	3301      	adds	r3, #1
 800463e:	9302      	str	r3, [sp, #8]
 8004640:	4615      	mov	r5, r2
 8004642:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8004646:	4590      	cmp	r8, r2
 8004648:	f300 80b8 	bgt.w	80047bc <__kernel_rem_pio2+0x32c>
 800464c:	f1bb 0f00 	cmp.w	fp, #0
 8004650:	dd07      	ble.n	8004662 <__kernel_rem_pio2+0x1d2>
 8004652:	f1bb 0f01 	cmp.w	fp, #1
 8004656:	f000 80bf 	beq.w	80047d8 <__kernel_rem_pio2+0x348>
 800465a:	f1bb 0f02 	cmp.w	fp, #2
 800465e:	f000 80c6 	beq.w	80047ee <__kernel_rem_pio2+0x35e>
 8004662:	f1b9 0f02 	cmp.w	r9, #2
 8004666:	d14c      	bne.n	8004702 <__kernel_rem_pio2+0x272>
 8004668:	4632      	mov	r2, r6
 800466a:	463b      	mov	r3, r7
 800466c:	494e      	ldr	r1, [pc, #312]	@ (80047a8 <__kernel_rem_pio2+0x318>)
 800466e:	2000      	movs	r0, #0
 8004670:	f7fb fdae 	bl	80001d0 <__aeabi_dsub>
 8004674:	4606      	mov	r6, r0
 8004676:	460f      	mov	r7, r1
 8004678:	2d00      	cmp	r5, #0
 800467a:	d042      	beq.n	8004702 <__kernel_rem_pio2+0x272>
 800467c:	4658      	mov	r0, fp
 800467e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8004798 <__kernel_rem_pio2+0x308>
 8004682:	f000 fa5d 	bl	8004b40 <scalbn>
 8004686:	4630      	mov	r0, r6
 8004688:	4639      	mov	r1, r7
 800468a:	ec53 2b10 	vmov	r2, r3, d0
 800468e:	f7fb fd9f 	bl	80001d0 <__aeabi_dsub>
 8004692:	4606      	mov	r6, r0
 8004694:	460f      	mov	r7, r1
 8004696:	e034      	b.n	8004702 <__kernel_rem_pio2+0x272>
 8004698:	4b44      	ldr	r3, [pc, #272]	@ (80047ac <__kernel_rem_pio2+0x31c>)
 800469a:	2200      	movs	r2, #0
 800469c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046a0:	f7fb ff4e 	bl	8000540 <__aeabi_dmul>
 80046a4:	f7fc f9e6 	bl	8000a74 <__aeabi_d2iz>
 80046a8:	f7fb fee0 	bl	800046c <__aeabi_i2d>
 80046ac:	4b40      	ldr	r3, [pc, #256]	@ (80047b0 <__kernel_rem_pio2+0x320>)
 80046ae:	2200      	movs	r2, #0
 80046b0:	4606      	mov	r6, r0
 80046b2:	460f      	mov	r7, r1
 80046b4:	f7fb ff44 	bl	8000540 <__aeabi_dmul>
 80046b8:	4602      	mov	r2, r0
 80046ba:	460b      	mov	r3, r1
 80046bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046c0:	f7fb fd86 	bl	80001d0 <__aeabi_dsub>
 80046c4:	f7fc f9d6 	bl	8000a74 <__aeabi_d2iz>
 80046c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80046cc:	f849 0b04 	str.w	r0, [r9], #4
 80046d0:	4639      	mov	r1, r7
 80046d2:	4630      	mov	r0, r6
 80046d4:	f7fb fd7e 	bl	80001d4 <__adddf3>
 80046d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80046dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80046e0:	e75d      	b.n	800459e <__kernel_rem_pio2+0x10e>
 80046e2:	d107      	bne.n	80046f4 <__kernel_rem_pio2+0x264>
 80046e4:	f108 33ff 	add.w	r3, r8, #4294967295
 80046e8:	aa0c      	add	r2, sp, #48	@ 0x30
 80046ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046ee:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80046f2:	e79e      	b.n	8004632 <__kernel_rem_pio2+0x1a2>
 80046f4:	4b2f      	ldr	r3, [pc, #188]	@ (80047b4 <__kernel_rem_pio2+0x324>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	f7fc f9a8 	bl	8000a4c <__aeabi_dcmpge>
 80046fc:	2800      	cmp	r0, #0
 80046fe:	d143      	bne.n	8004788 <__kernel_rem_pio2+0x2f8>
 8004700:	4681      	mov	r9, r0
 8004702:	2200      	movs	r2, #0
 8004704:	2300      	movs	r3, #0
 8004706:	4630      	mov	r0, r6
 8004708:	4639      	mov	r1, r7
 800470a:	f7fc f981 	bl	8000a10 <__aeabi_dcmpeq>
 800470e:	2800      	cmp	r0, #0
 8004710:	f000 80bf 	beq.w	8004892 <__kernel_rem_pio2+0x402>
 8004714:	f108 33ff 	add.w	r3, r8, #4294967295
 8004718:	2200      	movs	r2, #0
 800471a:	9900      	ldr	r1, [sp, #0]
 800471c:	428b      	cmp	r3, r1
 800471e:	da6e      	bge.n	80047fe <__kernel_rem_pio2+0x36e>
 8004720:	2a00      	cmp	r2, #0
 8004722:	f000 8089 	beq.w	8004838 <__kernel_rem_pio2+0x3a8>
 8004726:	f108 38ff 	add.w	r8, r8, #4294967295
 800472a:	ab0c      	add	r3, sp, #48	@ 0x30
 800472c:	f1ab 0b18 	sub.w	fp, fp, #24
 8004730:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d0f6      	beq.n	8004726 <__kernel_rem_pio2+0x296>
 8004738:	4658      	mov	r0, fp
 800473a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8004798 <__kernel_rem_pio2+0x308>
 800473e:	f000 f9ff 	bl	8004b40 <scalbn>
 8004742:	f108 0301 	add.w	r3, r8, #1
 8004746:	00da      	lsls	r2, r3, #3
 8004748:	9205      	str	r2, [sp, #20]
 800474a:	ec55 4b10 	vmov	r4, r5, d0
 800474e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8004750:	f8df b058 	ldr.w	fp, [pc, #88]	@ 80047ac <__kernel_rem_pio2+0x31c>
 8004754:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8004758:	4646      	mov	r6, r8
 800475a:	f04f 0a00 	mov.w	sl, #0
 800475e:	2e00      	cmp	r6, #0
 8004760:	f280 80cf 	bge.w	8004902 <__kernel_rem_pio2+0x472>
 8004764:	4644      	mov	r4, r8
 8004766:	2c00      	cmp	r4, #0
 8004768:	f2c0 80fd 	blt.w	8004966 <__kernel_rem_pio2+0x4d6>
 800476c:	4b12      	ldr	r3, [pc, #72]	@ (80047b8 <__kernel_rem_pio2+0x328>)
 800476e:	461f      	mov	r7, r3
 8004770:	ab70      	add	r3, sp, #448	@ 0x1c0
 8004772:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004776:	9306      	str	r3, [sp, #24]
 8004778:	f04f 0a00 	mov.w	sl, #0
 800477c:	f04f 0b00 	mov.w	fp, #0
 8004780:	2600      	movs	r6, #0
 8004782:	eba8 0504 	sub.w	r5, r8, r4
 8004786:	e0e2      	b.n	800494e <__kernel_rem_pio2+0x4be>
 8004788:	f04f 0902 	mov.w	r9, #2
 800478c:	e754      	b.n	8004638 <__kernel_rem_pio2+0x1a8>
 800478e:	bf00      	nop
	...
 800479c:	3ff00000 	.word	0x3ff00000
 80047a0:	08004f28 	.word	0x08004f28
 80047a4:	40200000 	.word	0x40200000
 80047a8:	3ff00000 	.word	0x3ff00000
 80047ac:	3e700000 	.word	0x3e700000
 80047b0:	41700000 	.word	0x41700000
 80047b4:	3fe00000 	.word	0x3fe00000
 80047b8:	08004ee8 	.word	0x08004ee8
 80047bc:	f854 3b04 	ldr.w	r3, [r4], #4
 80047c0:	b945      	cbnz	r5, 80047d4 <__kernel_rem_pio2+0x344>
 80047c2:	b123      	cbz	r3, 80047ce <__kernel_rem_pio2+0x33e>
 80047c4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80047c8:	f844 3c04 	str.w	r3, [r4, #-4]
 80047cc:	2301      	movs	r3, #1
 80047ce:	3201      	adds	r2, #1
 80047d0:	461d      	mov	r5, r3
 80047d2:	e738      	b.n	8004646 <__kernel_rem_pio2+0x1b6>
 80047d4:	1acb      	subs	r3, r1, r3
 80047d6:	e7f7      	b.n	80047c8 <__kernel_rem_pio2+0x338>
 80047d8:	f108 32ff 	add.w	r2, r8, #4294967295
 80047dc:	ab0c      	add	r3, sp, #48	@ 0x30
 80047de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047e2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80047e6:	a90c      	add	r1, sp, #48	@ 0x30
 80047e8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80047ec:	e739      	b.n	8004662 <__kernel_rem_pio2+0x1d2>
 80047ee:	f108 32ff 	add.w	r2, r8, #4294967295
 80047f2:	ab0c      	add	r3, sp, #48	@ 0x30
 80047f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047f8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80047fc:	e7f3      	b.n	80047e6 <__kernel_rem_pio2+0x356>
 80047fe:	a90c      	add	r1, sp, #48	@ 0x30
 8004800:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004804:	3b01      	subs	r3, #1
 8004806:	430a      	orrs	r2, r1
 8004808:	e787      	b.n	800471a <__kernel_rem_pio2+0x28a>
 800480a:	3401      	adds	r4, #1
 800480c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004810:	2a00      	cmp	r2, #0
 8004812:	d0fa      	beq.n	800480a <__kernel_rem_pio2+0x37a>
 8004814:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004816:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800481a:	eb0d 0503 	add.w	r5, sp, r3
 800481e:	9b06      	ldr	r3, [sp, #24]
 8004820:	aa20      	add	r2, sp, #128	@ 0x80
 8004822:	4443      	add	r3, r8
 8004824:	f108 0701 	add.w	r7, r8, #1
 8004828:	3d98      	subs	r5, #152	@ 0x98
 800482a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800482e:	4444      	add	r4, r8
 8004830:	42bc      	cmp	r4, r7
 8004832:	da04      	bge.n	800483e <__kernel_rem_pio2+0x3ae>
 8004834:	46a0      	mov	r8, r4
 8004836:	e6a2      	b.n	800457e <__kernel_rem_pio2+0xee>
 8004838:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800483a:	2401      	movs	r4, #1
 800483c:	e7e6      	b.n	800480c <__kernel_rem_pio2+0x37c>
 800483e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004840:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8004844:	f7fb fe12 	bl	800046c <__aeabi_i2d>
 8004848:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8004b10 <__kernel_rem_pio2+0x680>
 800484c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004850:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004854:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004858:	46b2      	mov	sl, r6
 800485a:	f04f 0800 	mov.w	r8, #0
 800485e:	9b05      	ldr	r3, [sp, #20]
 8004860:	4598      	cmp	r8, r3
 8004862:	dd05      	ble.n	8004870 <__kernel_rem_pio2+0x3e0>
 8004864:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004868:	3701      	adds	r7, #1
 800486a:	eca5 7b02 	vstmia	r5!, {d7}
 800486e:	e7df      	b.n	8004830 <__kernel_rem_pio2+0x3a0>
 8004870:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8004874:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004878:	f7fb fe62 	bl	8000540 <__aeabi_dmul>
 800487c:	4602      	mov	r2, r0
 800487e:	460b      	mov	r3, r1
 8004880:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004884:	f7fb fca6 	bl	80001d4 <__adddf3>
 8004888:	f108 0801 	add.w	r8, r8, #1
 800488c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004890:	e7e5      	b.n	800485e <__kernel_rem_pio2+0x3ce>
 8004892:	f1cb 0000 	rsb	r0, fp, #0
 8004896:	ec47 6b10 	vmov	d0, r6, r7
 800489a:	f000 f951 	bl	8004b40 <scalbn>
 800489e:	ec55 4b10 	vmov	r4, r5, d0
 80048a2:	4b9d      	ldr	r3, [pc, #628]	@ (8004b18 <__kernel_rem_pio2+0x688>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	4620      	mov	r0, r4
 80048a8:	4629      	mov	r1, r5
 80048aa:	f7fc f8cf 	bl	8000a4c <__aeabi_dcmpge>
 80048ae:	b300      	cbz	r0, 80048f2 <__kernel_rem_pio2+0x462>
 80048b0:	4b9a      	ldr	r3, [pc, #616]	@ (8004b1c <__kernel_rem_pio2+0x68c>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	4620      	mov	r0, r4
 80048b6:	4629      	mov	r1, r5
 80048b8:	f7fb fe42 	bl	8000540 <__aeabi_dmul>
 80048bc:	f7fc f8da 	bl	8000a74 <__aeabi_d2iz>
 80048c0:	4606      	mov	r6, r0
 80048c2:	f7fb fdd3 	bl	800046c <__aeabi_i2d>
 80048c6:	4b94      	ldr	r3, [pc, #592]	@ (8004b18 <__kernel_rem_pio2+0x688>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	f7fb fe39 	bl	8000540 <__aeabi_dmul>
 80048ce:	460b      	mov	r3, r1
 80048d0:	4602      	mov	r2, r0
 80048d2:	4629      	mov	r1, r5
 80048d4:	4620      	mov	r0, r4
 80048d6:	f7fb fc7b 	bl	80001d0 <__aeabi_dsub>
 80048da:	f7fc f8cb 	bl	8000a74 <__aeabi_d2iz>
 80048de:	ab0c      	add	r3, sp, #48	@ 0x30
 80048e0:	f10b 0b18 	add.w	fp, fp, #24
 80048e4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80048e8:	f108 0801 	add.w	r8, r8, #1
 80048ec:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80048f0:	e722      	b.n	8004738 <__kernel_rem_pio2+0x2a8>
 80048f2:	4620      	mov	r0, r4
 80048f4:	4629      	mov	r1, r5
 80048f6:	f7fc f8bd 	bl	8000a74 <__aeabi_d2iz>
 80048fa:	ab0c      	add	r3, sp, #48	@ 0x30
 80048fc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8004900:	e71a      	b.n	8004738 <__kernel_rem_pio2+0x2a8>
 8004902:	ab0c      	add	r3, sp, #48	@ 0x30
 8004904:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004908:	f7fb fdb0 	bl	800046c <__aeabi_i2d>
 800490c:	4622      	mov	r2, r4
 800490e:	462b      	mov	r3, r5
 8004910:	f7fb fe16 	bl	8000540 <__aeabi_dmul>
 8004914:	4652      	mov	r2, sl
 8004916:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800491a:	465b      	mov	r3, fp
 800491c:	4620      	mov	r0, r4
 800491e:	4629      	mov	r1, r5
 8004920:	f7fb fe0e 	bl	8000540 <__aeabi_dmul>
 8004924:	3e01      	subs	r6, #1
 8004926:	4604      	mov	r4, r0
 8004928:	460d      	mov	r5, r1
 800492a:	e718      	b.n	800475e <__kernel_rem_pio2+0x2ce>
 800492c:	9906      	ldr	r1, [sp, #24]
 800492e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8004932:	9106      	str	r1, [sp, #24]
 8004934:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8004938:	f7fb fe02 	bl	8000540 <__aeabi_dmul>
 800493c:	4602      	mov	r2, r0
 800493e:	460b      	mov	r3, r1
 8004940:	4650      	mov	r0, sl
 8004942:	4659      	mov	r1, fp
 8004944:	f7fb fc46 	bl	80001d4 <__adddf3>
 8004948:	3601      	adds	r6, #1
 800494a:	4682      	mov	sl, r0
 800494c:	468b      	mov	fp, r1
 800494e:	9b00      	ldr	r3, [sp, #0]
 8004950:	429e      	cmp	r6, r3
 8004952:	dc01      	bgt.n	8004958 <__kernel_rem_pio2+0x4c8>
 8004954:	42b5      	cmp	r5, r6
 8004956:	dae9      	bge.n	800492c <__kernel_rem_pio2+0x49c>
 8004958:	ab48      	add	r3, sp, #288	@ 0x120
 800495a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800495e:	e9c5 ab00 	strd	sl, fp, [r5]
 8004962:	3c01      	subs	r4, #1
 8004964:	e6ff      	b.n	8004766 <__kernel_rem_pio2+0x2d6>
 8004966:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8004968:	2b02      	cmp	r3, #2
 800496a:	dc0b      	bgt.n	8004984 <__kernel_rem_pio2+0x4f4>
 800496c:	2b00      	cmp	r3, #0
 800496e:	dc39      	bgt.n	80049e4 <__kernel_rem_pio2+0x554>
 8004970:	d05d      	beq.n	8004a2e <__kernel_rem_pio2+0x59e>
 8004972:	9b02      	ldr	r3, [sp, #8]
 8004974:	f003 0007 	and.w	r0, r3, #7
 8004978:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800497c:	ecbd 8b02 	vpop	{d8}
 8004980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004984:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8004986:	2b03      	cmp	r3, #3
 8004988:	d1f3      	bne.n	8004972 <__kernel_rem_pio2+0x4e2>
 800498a:	9b05      	ldr	r3, [sp, #20]
 800498c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004990:	eb0d 0403 	add.w	r4, sp, r3
 8004994:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8004998:	4625      	mov	r5, r4
 800499a:	46c2      	mov	sl, r8
 800499c:	f1ba 0f00 	cmp.w	sl, #0
 80049a0:	f1a5 0508 	sub.w	r5, r5, #8
 80049a4:	dc6b      	bgt.n	8004a7e <__kernel_rem_pio2+0x5ee>
 80049a6:	4645      	mov	r5, r8
 80049a8:	2d01      	cmp	r5, #1
 80049aa:	f1a4 0408 	sub.w	r4, r4, #8
 80049ae:	f300 8087 	bgt.w	8004ac0 <__kernel_rem_pio2+0x630>
 80049b2:	9c05      	ldr	r4, [sp, #20]
 80049b4:	ab48      	add	r3, sp, #288	@ 0x120
 80049b6:	441c      	add	r4, r3
 80049b8:	2000      	movs	r0, #0
 80049ba:	2100      	movs	r1, #0
 80049bc:	f1b8 0f01 	cmp.w	r8, #1
 80049c0:	f300 809c 	bgt.w	8004afc <__kernel_rem_pio2+0x66c>
 80049c4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 80049c8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 80049cc:	f1b9 0f00 	cmp.w	r9, #0
 80049d0:	f040 80a6 	bne.w	8004b20 <__kernel_rem_pio2+0x690>
 80049d4:	9b04      	ldr	r3, [sp, #16]
 80049d6:	e9c3 7800 	strd	r7, r8, [r3]
 80049da:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80049de:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80049e2:	e7c6      	b.n	8004972 <__kernel_rem_pio2+0x4e2>
 80049e4:	9d05      	ldr	r5, [sp, #20]
 80049e6:	ab48      	add	r3, sp, #288	@ 0x120
 80049e8:	441d      	add	r5, r3
 80049ea:	4644      	mov	r4, r8
 80049ec:	2000      	movs	r0, #0
 80049ee:	2100      	movs	r1, #0
 80049f0:	2c00      	cmp	r4, #0
 80049f2:	da35      	bge.n	8004a60 <__kernel_rem_pio2+0x5d0>
 80049f4:	f1b9 0f00 	cmp.w	r9, #0
 80049f8:	d038      	beq.n	8004a6c <__kernel_rem_pio2+0x5dc>
 80049fa:	4602      	mov	r2, r0
 80049fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004a00:	9c04      	ldr	r4, [sp, #16]
 8004a02:	e9c4 2300 	strd	r2, r3, [r4]
 8004a06:	4602      	mov	r2, r0
 8004a08:	460b      	mov	r3, r1
 8004a0a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8004a0e:	f7fb fbdf 	bl	80001d0 <__aeabi_dsub>
 8004a12:	ad4a      	add	r5, sp, #296	@ 0x128
 8004a14:	2401      	movs	r4, #1
 8004a16:	45a0      	cmp	r8, r4
 8004a18:	da2b      	bge.n	8004a72 <__kernel_rem_pio2+0x5e2>
 8004a1a:	f1b9 0f00 	cmp.w	r9, #0
 8004a1e:	d002      	beq.n	8004a26 <__kernel_rem_pio2+0x596>
 8004a20:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004a24:	4619      	mov	r1, r3
 8004a26:	9b04      	ldr	r3, [sp, #16]
 8004a28:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004a2c:	e7a1      	b.n	8004972 <__kernel_rem_pio2+0x4e2>
 8004a2e:	9c05      	ldr	r4, [sp, #20]
 8004a30:	ab48      	add	r3, sp, #288	@ 0x120
 8004a32:	441c      	add	r4, r3
 8004a34:	2000      	movs	r0, #0
 8004a36:	2100      	movs	r1, #0
 8004a38:	f1b8 0f00 	cmp.w	r8, #0
 8004a3c:	da09      	bge.n	8004a52 <__kernel_rem_pio2+0x5c2>
 8004a3e:	f1b9 0f00 	cmp.w	r9, #0
 8004a42:	d002      	beq.n	8004a4a <__kernel_rem_pio2+0x5ba>
 8004a44:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004a48:	4619      	mov	r1, r3
 8004a4a:	9b04      	ldr	r3, [sp, #16]
 8004a4c:	e9c3 0100 	strd	r0, r1, [r3]
 8004a50:	e78f      	b.n	8004972 <__kernel_rem_pio2+0x4e2>
 8004a52:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004a56:	f7fb fbbd 	bl	80001d4 <__adddf3>
 8004a5a:	f108 38ff 	add.w	r8, r8, #4294967295
 8004a5e:	e7eb      	b.n	8004a38 <__kernel_rem_pio2+0x5a8>
 8004a60:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8004a64:	f7fb fbb6 	bl	80001d4 <__adddf3>
 8004a68:	3c01      	subs	r4, #1
 8004a6a:	e7c1      	b.n	80049f0 <__kernel_rem_pio2+0x560>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	e7c6      	b.n	8004a00 <__kernel_rem_pio2+0x570>
 8004a72:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8004a76:	f7fb fbad 	bl	80001d4 <__adddf3>
 8004a7a:	3401      	adds	r4, #1
 8004a7c:	e7cb      	b.n	8004a16 <__kernel_rem_pio2+0x586>
 8004a7e:	ed95 7b00 	vldr	d7, [r5]
 8004a82:	ed8d 7b00 	vstr	d7, [sp]
 8004a86:	ed95 7b02 	vldr	d7, [r5, #8]
 8004a8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004a8e:	ec53 2b17 	vmov	r2, r3, d7
 8004a92:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004a96:	f7fb fb9d 	bl	80001d4 <__adddf3>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	4606      	mov	r6, r0
 8004aa0:	460f      	mov	r7, r1
 8004aa2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004aa6:	f7fb fb93 	bl	80001d0 <__aeabi_dsub>
 8004aaa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004aae:	f7fb fb91 	bl	80001d4 <__adddf3>
 8004ab2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004ab6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8004aba:	e9c5 6700 	strd	r6, r7, [r5]
 8004abe:	e76d      	b.n	800499c <__kernel_rem_pio2+0x50c>
 8004ac0:	ed94 7b00 	vldr	d7, [r4]
 8004ac4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8004ac8:	ec51 0b17 	vmov	r0, r1, d7
 8004acc:	4652      	mov	r2, sl
 8004ace:	465b      	mov	r3, fp
 8004ad0:	ed8d 7b00 	vstr	d7, [sp]
 8004ad4:	f7fb fb7e 	bl	80001d4 <__adddf3>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	460b      	mov	r3, r1
 8004adc:	4606      	mov	r6, r0
 8004ade:	460f      	mov	r7, r1
 8004ae0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ae4:	f7fb fb74 	bl	80001d0 <__aeabi_dsub>
 8004ae8:	4652      	mov	r2, sl
 8004aea:	465b      	mov	r3, fp
 8004aec:	f7fb fb72 	bl	80001d4 <__adddf3>
 8004af0:	3d01      	subs	r5, #1
 8004af2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004af6:	e9c4 6700 	strd	r6, r7, [r4]
 8004afa:	e755      	b.n	80049a8 <__kernel_rem_pio2+0x518>
 8004afc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004b00:	f7fb fb68 	bl	80001d4 <__adddf3>
 8004b04:	f108 38ff 	add.w	r8, r8, #4294967295
 8004b08:	e758      	b.n	80049bc <__kernel_rem_pio2+0x52c>
 8004b0a:	bf00      	nop
 8004b0c:	f3af 8000 	nop.w
	...
 8004b18:	41700000 	.word	0x41700000
 8004b1c:	3e700000 	.word	0x3e700000
 8004b20:	9b04      	ldr	r3, [sp, #16]
 8004b22:	9a04      	ldr	r2, [sp, #16]
 8004b24:	601f      	str	r7, [r3, #0]
 8004b26:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8004b2a:	605c      	str	r4, [r3, #4]
 8004b2c:	609d      	str	r5, [r3, #8]
 8004b2e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004b32:	60d3      	str	r3, [r2, #12]
 8004b34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004b38:	6110      	str	r0, [r2, #16]
 8004b3a:	6153      	str	r3, [r2, #20]
 8004b3c:	e719      	b.n	8004972 <__kernel_rem_pio2+0x4e2>
 8004b3e:	bf00      	nop

08004b40 <scalbn>:
 8004b40:	b570      	push	{r4, r5, r6, lr}
 8004b42:	ec55 4b10 	vmov	r4, r5, d0
 8004b46:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8004b4a:	4606      	mov	r6, r0
 8004b4c:	462b      	mov	r3, r5
 8004b4e:	b991      	cbnz	r1, 8004b76 <scalbn+0x36>
 8004b50:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8004b54:	4323      	orrs	r3, r4
 8004b56:	d03d      	beq.n	8004bd4 <scalbn+0x94>
 8004b58:	4b35      	ldr	r3, [pc, #212]	@ (8004c30 <scalbn+0xf0>)
 8004b5a:	4620      	mov	r0, r4
 8004b5c:	4629      	mov	r1, r5
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f7fb fcee 	bl	8000540 <__aeabi_dmul>
 8004b64:	4b33      	ldr	r3, [pc, #204]	@ (8004c34 <scalbn+0xf4>)
 8004b66:	429e      	cmp	r6, r3
 8004b68:	4604      	mov	r4, r0
 8004b6a:	460d      	mov	r5, r1
 8004b6c:	da0f      	bge.n	8004b8e <scalbn+0x4e>
 8004b6e:	a328      	add	r3, pc, #160	@ (adr r3, 8004c10 <scalbn+0xd0>)
 8004b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b74:	e01e      	b.n	8004bb4 <scalbn+0x74>
 8004b76:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8004b7a:	4291      	cmp	r1, r2
 8004b7c:	d10b      	bne.n	8004b96 <scalbn+0x56>
 8004b7e:	4622      	mov	r2, r4
 8004b80:	4620      	mov	r0, r4
 8004b82:	4629      	mov	r1, r5
 8004b84:	f7fb fb26 	bl	80001d4 <__adddf3>
 8004b88:	4604      	mov	r4, r0
 8004b8a:	460d      	mov	r5, r1
 8004b8c:	e022      	b.n	8004bd4 <scalbn+0x94>
 8004b8e:	460b      	mov	r3, r1
 8004b90:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004b94:	3936      	subs	r1, #54	@ 0x36
 8004b96:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8004b9a:	4296      	cmp	r6, r2
 8004b9c:	dd0d      	ble.n	8004bba <scalbn+0x7a>
 8004b9e:	2d00      	cmp	r5, #0
 8004ba0:	a11d      	add	r1, pc, #116	@ (adr r1, 8004c18 <scalbn+0xd8>)
 8004ba2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ba6:	da02      	bge.n	8004bae <scalbn+0x6e>
 8004ba8:	a11d      	add	r1, pc, #116	@ (adr r1, 8004c20 <scalbn+0xe0>)
 8004baa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004bae:	a31a      	add	r3, pc, #104	@ (adr r3, 8004c18 <scalbn+0xd8>)
 8004bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb4:	f7fb fcc4 	bl	8000540 <__aeabi_dmul>
 8004bb8:	e7e6      	b.n	8004b88 <scalbn+0x48>
 8004bba:	1872      	adds	r2, r6, r1
 8004bbc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8004bc0:	428a      	cmp	r2, r1
 8004bc2:	dcec      	bgt.n	8004b9e <scalbn+0x5e>
 8004bc4:	2a00      	cmp	r2, #0
 8004bc6:	dd08      	ble.n	8004bda <scalbn+0x9a>
 8004bc8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004bcc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004bd0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004bd4:	ec45 4b10 	vmov	d0, r4, r5
 8004bd8:	bd70      	pop	{r4, r5, r6, pc}
 8004bda:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8004bde:	da08      	bge.n	8004bf2 <scalbn+0xb2>
 8004be0:	2d00      	cmp	r5, #0
 8004be2:	a10b      	add	r1, pc, #44	@ (adr r1, 8004c10 <scalbn+0xd0>)
 8004be4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004be8:	dac1      	bge.n	8004b6e <scalbn+0x2e>
 8004bea:	a10f      	add	r1, pc, #60	@ (adr r1, 8004c28 <scalbn+0xe8>)
 8004bec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004bf0:	e7bd      	b.n	8004b6e <scalbn+0x2e>
 8004bf2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004bf6:	3236      	adds	r2, #54	@ 0x36
 8004bf8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004bfc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004c00:	4620      	mov	r0, r4
 8004c02:	4b0d      	ldr	r3, [pc, #52]	@ (8004c38 <scalbn+0xf8>)
 8004c04:	4629      	mov	r1, r5
 8004c06:	2200      	movs	r2, #0
 8004c08:	e7d4      	b.n	8004bb4 <scalbn+0x74>
 8004c0a:	bf00      	nop
 8004c0c:	f3af 8000 	nop.w
 8004c10:	c2f8f359 	.word	0xc2f8f359
 8004c14:	01a56e1f 	.word	0x01a56e1f
 8004c18:	8800759c 	.word	0x8800759c
 8004c1c:	7e37e43c 	.word	0x7e37e43c
 8004c20:	8800759c 	.word	0x8800759c
 8004c24:	fe37e43c 	.word	0xfe37e43c
 8004c28:	c2f8f359 	.word	0xc2f8f359
 8004c2c:	81a56e1f 	.word	0x81a56e1f
 8004c30:	43500000 	.word	0x43500000
 8004c34:	ffff3cb0 	.word	0xffff3cb0
 8004c38:	3c900000 	.word	0x3c900000
 8004c3c:	00000000 	.word	0x00000000

08004c40 <floor>:
 8004c40:	ec51 0b10 	vmov	r0, r1, d0
 8004c44:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c4c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8004c50:	2e13      	cmp	r6, #19
 8004c52:	460c      	mov	r4, r1
 8004c54:	4605      	mov	r5, r0
 8004c56:	4680      	mov	r8, r0
 8004c58:	dc34      	bgt.n	8004cc4 <floor+0x84>
 8004c5a:	2e00      	cmp	r6, #0
 8004c5c:	da17      	bge.n	8004c8e <floor+0x4e>
 8004c5e:	a332      	add	r3, pc, #200	@ (adr r3, 8004d28 <floor+0xe8>)
 8004c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c64:	f7fb fab6 	bl	80001d4 <__adddf3>
 8004c68:	2200      	movs	r2, #0
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	f7fb fef8 	bl	8000a60 <__aeabi_dcmpgt>
 8004c70:	b150      	cbz	r0, 8004c88 <floor+0x48>
 8004c72:	2c00      	cmp	r4, #0
 8004c74:	da55      	bge.n	8004d22 <floor+0xe2>
 8004c76:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8004c7a:	432c      	orrs	r4, r5
 8004c7c:	2500      	movs	r5, #0
 8004c7e:	42ac      	cmp	r4, r5
 8004c80:	4c2b      	ldr	r4, [pc, #172]	@ (8004d30 <floor+0xf0>)
 8004c82:	bf08      	it	eq
 8004c84:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8004c88:	4621      	mov	r1, r4
 8004c8a:	4628      	mov	r0, r5
 8004c8c:	e023      	b.n	8004cd6 <floor+0x96>
 8004c8e:	4f29      	ldr	r7, [pc, #164]	@ (8004d34 <floor+0xf4>)
 8004c90:	4137      	asrs	r7, r6
 8004c92:	ea01 0307 	and.w	r3, r1, r7
 8004c96:	4303      	orrs	r3, r0
 8004c98:	d01d      	beq.n	8004cd6 <floor+0x96>
 8004c9a:	a323      	add	r3, pc, #140	@ (adr r3, 8004d28 <floor+0xe8>)
 8004c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca0:	f7fb fa98 	bl	80001d4 <__adddf3>
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	f7fb feda 	bl	8000a60 <__aeabi_dcmpgt>
 8004cac:	2800      	cmp	r0, #0
 8004cae:	d0eb      	beq.n	8004c88 <floor+0x48>
 8004cb0:	2c00      	cmp	r4, #0
 8004cb2:	bfbe      	ittt	lt
 8004cb4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8004cb8:	4133      	asrlt	r3, r6
 8004cba:	18e4      	addlt	r4, r4, r3
 8004cbc:	ea24 0407 	bic.w	r4, r4, r7
 8004cc0:	2500      	movs	r5, #0
 8004cc2:	e7e1      	b.n	8004c88 <floor+0x48>
 8004cc4:	2e33      	cmp	r6, #51	@ 0x33
 8004cc6:	dd0a      	ble.n	8004cde <floor+0x9e>
 8004cc8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8004ccc:	d103      	bne.n	8004cd6 <floor+0x96>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	f7fb fa7f 	bl	80001d4 <__adddf3>
 8004cd6:	ec41 0b10 	vmov	d0, r0, r1
 8004cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cde:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8004ce2:	f04f 37ff 	mov.w	r7, #4294967295
 8004ce6:	40df      	lsrs	r7, r3
 8004ce8:	4207      	tst	r7, r0
 8004cea:	d0f4      	beq.n	8004cd6 <floor+0x96>
 8004cec:	a30e      	add	r3, pc, #56	@ (adr r3, 8004d28 <floor+0xe8>)
 8004cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf2:	f7fb fa6f 	bl	80001d4 <__adddf3>
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	f7fb feb1 	bl	8000a60 <__aeabi_dcmpgt>
 8004cfe:	2800      	cmp	r0, #0
 8004d00:	d0c2      	beq.n	8004c88 <floor+0x48>
 8004d02:	2c00      	cmp	r4, #0
 8004d04:	da0a      	bge.n	8004d1c <floor+0xdc>
 8004d06:	2e14      	cmp	r6, #20
 8004d08:	d101      	bne.n	8004d0e <floor+0xce>
 8004d0a:	3401      	adds	r4, #1
 8004d0c:	e006      	b.n	8004d1c <floor+0xdc>
 8004d0e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8004d12:	2301      	movs	r3, #1
 8004d14:	40b3      	lsls	r3, r6
 8004d16:	441d      	add	r5, r3
 8004d18:	4545      	cmp	r5, r8
 8004d1a:	d3f6      	bcc.n	8004d0a <floor+0xca>
 8004d1c:	ea25 0507 	bic.w	r5, r5, r7
 8004d20:	e7b2      	b.n	8004c88 <floor+0x48>
 8004d22:	2500      	movs	r5, #0
 8004d24:	462c      	mov	r4, r5
 8004d26:	e7af      	b.n	8004c88 <floor+0x48>
 8004d28:	8800759c 	.word	0x8800759c
 8004d2c:	7e37e43c 	.word	0x7e37e43c
 8004d30:	bff00000 	.word	0xbff00000
 8004d34:	000fffff 	.word	0x000fffff

08004d38 <_init>:
 8004d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d3a:	bf00      	nop
 8004d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d3e:	bc08      	pop	{r3}
 8004d40:	469e      	mov	lr, r3
 8004d42:	4770      	bx	lr

08004d44 <_fini>:
 8004d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d46:	bf00      	nop
 8004d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d4a:	bc08      	pop	{r3}
 8004d4c:	469e      	mov	lr, r3
 8004d4e:	4770      	bx	lr
